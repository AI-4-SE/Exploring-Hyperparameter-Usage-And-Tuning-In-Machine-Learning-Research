{
    "methods/T5/transformer_local/examples/mm-imdb/run_mmimdb.py": {
        "sklearn": {
            "f1_score_321": {
                "y_true": {
                    "value": "out_label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_322": {
                "y_true": {
                    "value": "out_label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_275": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_99": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_140": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_282": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_494": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_498": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_561": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(label_frequences, device=args.device, dtype=torch.float) / len(train_dataset)) ** (-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_102": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_497": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_577": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_581": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_585": {
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_312": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_559": {
                "data": {
                    "value": "label_frequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.get_label_frequencies()",
                            "Call"
                        ],
                        [
                            "[label_frequences[l] for l in labels]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_604": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "variable"
                        ]
                    ]
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/metrics/__init__.py": {
        "sklearn": {
            "f1_score_37": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_56": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/benchmarks.py": {
        "tensorflow": {
            "set_experimental_options_280": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "stack_525": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(tf.constant(tokenized_sequence[:slice_size])[None, :])] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_526": {
                "input": {
                    "value": "tf.constant(tokenized_sequence[:slice_size])[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_526": {
                "value": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_455": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_sequence[:slice_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if gpu and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_459": {
                "variable": {
                    "value": "inference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ],
                        [
                            "TFAutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/hans/hans_processors.py": {
        "tensorflow": {
            "TensorShape_165": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_161": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_162": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_163": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/ner/run_tf_ner.py": {
        "tensorflow": {
            "create_file_writer_147": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "/tmp/mylogs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_303": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_365": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TFRecordWriter_373": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], 'cached_{}_{}_{}.tf_record'.format(mode, tokenizer.__class__.__name__, str(args['max_seq_length'])))",
                            "Call"
                        ],
                        [
                            "cached_features_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SparseCategoricalCrossentropy_150": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_158": {
                "variable": {
                    "value": "loss_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_353": {
                "variable": {
                    "value": "name_to_features[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_356": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'attention_mask': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'label_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_390": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=record_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_463": {
                "variable": {
                    "value": "resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "args['tpu']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "flags.FLAGS.flag_values_dict()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TPUStrategy_466": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LossScaleOptimizer_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "boolean_mask_319": {
                "variable": {
                    "value": "active_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(logits, (-1, len(labels)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_320": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(eval_labels, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "FixedLenFeature_347": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_348": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_349": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_380": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_experimental_options_460": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_464": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_465": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_470": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "[f'/gpu:{gpu}' for gpu in args['gpus'].split(',')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "boolean_mask_199": {
                "variable": {
                    "value": "active_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(logits, (-1, len(labels)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "boolean_mask_200": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(train_labels, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ],
                        [
                            "tf.reshape(eval_labels, (-1,)) != pad_token_label_id",
                            "Compare"
                        ]
                    ]
                }
            },
            "OneDeviceStrategy_473": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_476": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'/gpu:' + args['gpus'].split(',')[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GFile_573": {
                "name": {
                    "value": "output_eval_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_599": {
                "name": {
                    "value": "output_test_results_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_607": {
                "name": {
                    "value": "output_test_predictions_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_predictions.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_318": {
                "tensor": {
                    "value": "eval_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_iterator",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "tensor": {
                    "value": "eval_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_iterator",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_390": {
                "feature": {
                    "value": "record_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_608": {
                "name": {
                    "value": "os.path.join(args['data_dir'], 'test.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch_iterator",
                            "variable"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "tensor": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch_iterator",
                            "variable"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_380": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_271": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_metric.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_263": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr(step)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_264": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "(loss_metric.result() - logging_loss) / args['logging_steps']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_254": {
                "name": {
                    "value": "eval_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evaluate(args, strategy, model, tokenizer, labels, pad_token_label_id, mode='dev')",
                            "Call"
                        ],
                        [
                            "evaluate(args, strategy, model, tokenizer, labels, pad_token_label_id, mode='dev')",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_255": {
                "name": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.precision_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "recall",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.recall_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_257": {
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.f1_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_tf_glue.py": {
        "tensorflow": {
            "Adam_59": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_70": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_experimental_options_36": {
                "options": {
                    "value": "{'auto_mixed_precision': USE_AMP}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_62": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MeanSquaredError_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/benchmark_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "methods/T5/transformer_local/src/transformers/commands/env.py": {
        "tensorflow": {
            "is_gpu_available_36": {
                "variable": {
                    "value": "tf_cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_39": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_26": {
                "variable": {
                    "value": "pt_cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_bert_pytorch_checkpoint_to_original_tf.py": {
        "tensorflow": {
            "as_dtype_70": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "tf_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_72": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_104": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/processors/glue.py": {
        "tensorflow": {
            "TensorShape_102": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_98": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_99": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_100": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/processors/squad.py": {
        "tensorflow": {
            "TensorShape_421": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_422": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_423": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_424": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_425": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_428": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_429": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_430": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_431": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_432": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_351": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "all_attention_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_is_impossible",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.is_impossible for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_359": {
                "variable": {
                    "value": "all_feature_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_360": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_366": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/processors/utils.py": {
        "tensorflow": {
            "TensorShape_323": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_332": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_339": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "methods/T5/transformer_local/src/transformers/modeling_albert.py": {
        "tensorflow": {
            "list_variables_61": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_66": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.replace('module/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn_1', 'ffn')",
                            "Call"
                        ],
                        [
                            "name.replace('bert/', 'albert/')",
                            "Call"
                        ],
                        [
                            "name.replace('attention_1', 'attention')",
                            "Call"
                        ],
                        [
                            "name.replace('transform/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm_1', 'full_layer_layer_norm')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm', 'attention/LayerNorm')",
                            "Call"
                        ],
                        [
                            "name.replace('transformer/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('intermediate/dense/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn/intermediate/output/dense/', 'ffn_output/')",
                            "Call"
                        ],
                        [
                            "name.replace('/output/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('/self/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('pooler/dense', 'pooler')",
                            "Call"
                        ],
                        [
                            "name.replace('cls/predictions', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('predictions/attention', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('embeddings/attention', 'embeddings')",
                            "Call"
                        ],
                        [
                            "name.replace('inner_group_', 'albert_layers/')",
                            "Call"
                        ],
                        [
                            "name.replace('group_', 'albert_layer_groups/')",
                            "Call"
                        ],
                        [
                            "'classifier/' + name",
                            "BinOp"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_164": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_177": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_178": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_179": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_180": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_191": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_193": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_199": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_269": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.albert_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayer(config) for _ in range(config.inner_group_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.albert_layer_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_451": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_452": {
                "variable": {
                    "value": "self.pooler_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_575": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_576": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_577": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_578": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_694": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_695": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_789": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_790": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_886": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_547": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_549": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_676": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_861": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_976": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_236": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "equation": {
                    "value": "bfnd,ndh->bfh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "context_layer.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_576": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_768": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_771": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_206": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_77": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_82": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_149": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_150": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_285": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_430": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1059": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1060": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1155": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1156": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1256": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1257": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1354": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_700": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_702": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_842": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_948": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_956": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1041": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1238": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1327": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1448": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_241": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_716": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1135": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1138": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1332": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_292": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1333": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_electra.py": {
        "tensorflow": {
            "list_variables_42": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_47": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.replace('electra/embeddings/', 'generator/embeddings/')",
                            "Call"
                        ],
                        [
                            "name.replace('electra/', 'discriminator/')",
                            "Call"
                        ],
                        [
                            "name.replace('generator/', 'electra/')",
                            "Call"
                        ],
                        [
                            "name.replace('dense_1', 'dense_prediction')",
                            "Call"
                        ],
                        [
                            "name.replace('generator_predictions/output_bias', 'generator_lm_head/bias')",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Embedding_112": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "config.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_113": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_114": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.generator_lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_532": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_314": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_411": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_511": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_597": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_59": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_64": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_95": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_117": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_149": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(self.n_head, self.split_size // self.n_head)",
                            "Call"
                        ],
                        [
                            "mask.view(-1).contiguous().eq(1)",
                            "Call"
                        ],
                        [
                            "self.bias[:, :, ns - nd:ns, :ns]",
                            "Subscript"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask, w, self.masked_bias)",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.masked_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_226": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_348": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_349": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_350": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_351": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_539": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_648": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_448": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_628": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_753": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_759": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_108": {
                "input": {
                    "value": "torch.ones((n_ctx, n_ctx), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_155": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask, w, self.masked_bias)",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_131": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "(n_ctx, n_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_t5.py": {
        "tensorflow": {
            "list_variables_68": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_73": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "txt_name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_127": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wi(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "self.wo(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_213": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_kv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_273": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_359": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_376": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_382": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_401": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_432": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_466": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_560": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_632": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_636": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_839": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_961": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_970": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_207": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_260": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_262": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_275": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_618": {
                "input": {
                    "value": "shifted_input_ids >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_688": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_length",
                            "variable"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_691": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1097": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_153": {
                "input": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_273": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_280": {
                "start": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_281": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_qlen",
                            "variable"
                        ],
                        [
                            "kv.size(1)",
                            "Call"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_350": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_219": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_271": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_albert.py": {
        "tensorflow": {
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_67": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_158": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_161": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_164": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_190": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_222": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_225": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_242": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_245": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_267": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_310": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_322": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "full_layer_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_385": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_hidden_mapping_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_452": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_460": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_492": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_568": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_784": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_785": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_841": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_887": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_888": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_889": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_117": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_551": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_553": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_268": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_115": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_bert.py": {
        "tensorflow": {
            "Activation_86": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_88": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_89": {
                "activation": {
                    "value": "gelu_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu_new",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_103": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_118": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_211": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_214": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_217": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_243": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_263": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_275": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_278": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_279": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_311": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_328": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_331": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_398": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_416": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_423": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_466": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_556": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_886": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_887": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_943": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_944": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_1045": {
                "variable": {
                    "value": "reshaped_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_1063": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_1064": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1121": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1168": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1169": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1170": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_168": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_171": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_539": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_541": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "erf_64": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_77": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_244": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_955": {
                "value": {
                    "value": "MULTIPLE_CHOICE_DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1025": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1026": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1027": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1028": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_166": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_77": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_ctrl.py": {
        "tensorflow": {
            "cast_48": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.concatenate([sines, cosines], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(k, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_key, k), axis=-2)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_value, v), axis=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Wv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "original_size_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(output[0], perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='relu', name='0'), tf.keras.layers.Dense(d_model_size, name='2')]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_157": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_158": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layernorm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_213": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_336": {
                "variable": {
                    "value": "pos_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pos_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_109": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "x": {
                    "value": "use_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_123": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_290": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_550": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_141": {
                "units": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_332": {
                "input": {
                    "value": "tf.ones((seq_len, seq_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_334": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_289": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_324": {
                "x": {
                    "value": "self.d_model_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_332": {
                "shape": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_371": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_348": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_distilbert.py": {
        "tensorflow": {
            "Embedding_78": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_85": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_182": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_185": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_191": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(key))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bs, 1, 1, k_length]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_244": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_265": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_268": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_293": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_300": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "sa_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_303": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_445": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.ones(input_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_607": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_610": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_611": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_671": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_677": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_680": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_735": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_736": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_791": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_795": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_834": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_835": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_836": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_444": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_52": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_275": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "range_144": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_65": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_electra.py": {
        "tensorflow": {
            "Embedding_36": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(self.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_51": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_133": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "variable": {
                    "value": "self.dense_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense_prediction(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_149": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_150": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "self.get_extended_attention_mask(attention_mask, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_565": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_566": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_101": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_104": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(self.dense_prediction(hidden_states))",
                            "Call"
                        ],
                        [
                            "self.discriminator_predictions(discriminator_sequence_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(discriminator_sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_168": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_206": {
                "variable": {
                    "value": "self.embeddings_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings_project",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_262": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_264": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_99": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_flaubert.py": {
        "tensorflow": {
            "assert_equal_177": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_172": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_195": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_201": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_170": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_gpt2.py": {
        "tensorflow": {
            "Dropout_77": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_140": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_194": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_196": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_230": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_236": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_238": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_377": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_739": {
                "variable": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.ln_2(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(m, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_99": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_145": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_key, key]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_value, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_152": {
                "x": {
                    "value": "use_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "inputs[7] if len(inputs) > 7 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "inputs[8] if len(inputs) > 8 else use_cache",
                            "IfExp"
                        ],
                        [
                            "inputs.get('use_cache', use_cache)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_159": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_329": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_544": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_89": {},
            "matmul_119": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_715": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_716": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_717": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "token_type_ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_718": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_313": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_365": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_58": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_openai.py": {
        "tensorflow": {
            "Activation_62": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_64": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_146": {
                "variable": {
                    "value": "(query, key, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_183": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_185": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ln_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_213": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "positions_embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_653": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_658": {
                "variable": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_98": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.mlp(n, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_105": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_140": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_290": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_95": {},
            "matmul_125": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_636": {
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_637": {
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_638": {
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_639": {
                "tensor": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_274": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_325": {
                "tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_53": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_pytorch_utils.py": {
        "tensorflow": {},
        "torch": {
            "load_89": {
                "variable": {
                    "value": "pt_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(pytorch_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "new_pt_params_dict[pt_weight_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "loaded_pt_weights_data_ptr[pt_weight.data_ptr()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_roberta.py": {
        "tensorflow": {
            "cast_55": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(x, self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_234": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_237": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_238": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_315": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_322": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_401": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_457": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_503": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output, training=kwargs.get('training', False))",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_504": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_55": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x, mode='linear') + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_67": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_t5.py": {
        "tensorflow": {
            "reduce_mean_62": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "wo",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_115": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_164": {
                "variable": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_exact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(values, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.k(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_308": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_343": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_521": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_589": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, mask_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('attention_mask', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_728": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_729": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_MASK",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relative_attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_159": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_161": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_172": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.less(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_253": {
                "x": {
                    "value": "use_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(use_cache.numpy())",
                            "Call"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "kwargs.get('use_cache', True)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "use_cache",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_578": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, mask_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_581": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, encoder_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_626": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, encoder_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_62": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_63": {
                "x": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relative_attention_bias(rp_bucket)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.inner_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "self._abs_scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_555": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, (-1, input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "tf.constant(DUMMY_INPUTS)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ],
                        [
                            "kwargs.get('inputs', None)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, input_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_834": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_955": {
                "name_or_scope": {
                    "value": "shared",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "tf.math.less(n, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_487": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_496": {
                "name": {
                    "value": "abs_scope_name.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_598": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_equal_599": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, mask_seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_158": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "tf.dtypes.cast(n, tf.float32) / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_600": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, mask_seq_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_1115": {
                "params": {
                    "value": "layer_past_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_past_states",
                            "variable"
                        ]
                    ]
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_166": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "einsum_45": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.drop_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "CoreNet_._3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNormalization_69": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_124": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "qkv_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_130": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "o_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_134": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_147": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "r_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1] + 1, x_size[0], x_size[2], x_size[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "w_head_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "w_head_q[-qlen:]",
                            "Subscript"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(qlen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rlen, self.n_head, self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rw_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_w_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rr_head_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_head_q + self.r_r_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r_head_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score * (1 - attn_mask_t) - 1e+30 * attn_mask_t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropatt(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(w_heads, 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, w_head_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_409": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_566": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_567": {
                "variable": {
                    "value": "mask_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "band_part_568": {
                "variable": {
                    "value": "mask_dia",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_570": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_183": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_192": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "inp_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(inp_flat)[0], self.d_proj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(shape_list(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "embed_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(inp) + [self.d_proj]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_510": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "band_part_572": {
                "variable": {
                    "value": "mask_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_573": {
                "variable": {
                    "value": "dec_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_49": {
                "input": {
                    "value": "pos_emb[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_369": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,de->ie",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_371": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_485": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mem_len, bsz, self.d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_511": {
                "input": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, w], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([mems[i], hids[i]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_537": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_593": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_614": {
                "a": {
                    "value": "core_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(inp)",
                            "Call"
                        ],
                        [
                            "self.layer_1(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_1(inp)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.drop(word_emb, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(core_out, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sin_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_46": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_372": {
                "indices": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(mask_i), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.cast(shape_list(emb_flat), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_540": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_42": {},
            "Embedding_335": {
                "input_dim": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "self.d_embed // self.div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "get_initializer(init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'emb_layers_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_367": {
                "tensor": {
                    "value": "inp_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_371": {
                "condition": {
                    "value": "mask_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_372": {
                "x": {
                    "value": "shape_list(emb_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_618": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_622": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_transfo_xl_utilities.py": {
        "tensorflow": {
            "range_113": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, target]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibd,ed->ibe",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_115": {
                "params": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprob",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([r, target], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "hidden_sizes[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.log_softmax(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_108": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(shape_list(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_133": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "cur_W",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_W, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "cur_b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_b, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_155": {
                "variable": {
                    "value": "tail_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tail_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_151": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_160": {
                "variable": {
                    "value": "cur_head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_161": {
                "variable": {
                    "value": "cur_tail_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(tail_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scatter_nd_165": {
                "indices": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-cur_logprob",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.cast(shape_list(loss), dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_134": {
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_165": {
                "x": {
                    "value": "shape_list(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_utils.py": {
        "tensorflow": {
            "reshape_1431": {
                "variable": {
                    "value": "broad_casted_batch_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(shape[0]), axis=-1), shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1433": {
                "variable": {
                    "value": "pair_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1692": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_844": {
                "variable": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_958": {
                "variable": {
                    "value": "min_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_959": {
                "variable": {
                    "value": "max_sent_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1023": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_beams,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1262": {
                "variable": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "sent_lengths_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1316": {
                "value": {
                    "value": "token_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(shape_list(logits))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_1397": {
                "variable": {
                    "value": "sorted_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1398": {
                "variable": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(logits, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_1402": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(sorted_logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roll_1418": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cumulative_probs > top_p",
                            "Compare"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]], -1)",
                            "Call"
                        ],
                        [
                            "tf.roll(sorted_indices_to_remove, 1, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1419": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :1]), sorted_indices_to_remove[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scatter_nd_1435": {
                "indices": {
                    "value": "pair_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.concat([broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])], 0))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.reshape(values, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1441": {
                "condition": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "value_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(tensor) + value",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1513": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1516": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bz, sl, self.nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1576": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1577": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TruncatedNormal_1703": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_667": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_688": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(input_ids, pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_728": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_731": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, effective_batch_mult * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_737": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(effective_batch_size * num_beams, input_ids_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_752": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_929": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(tokens_to_add, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_966": {
                "variable": {
                    "value": "broad_casted_sent_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sent_lengths, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_sent_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_969": {
                "variable": {
                    "value": "broad_casted_range",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(tf.range(max_length), -1), [max_length, batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_973": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "broad_casted_range < broad_casted_sent_lengths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, max_sent_length.numpy()], dtype=tf.int32) * pad_token_id",
                            "BinOp"
                        ],
                        [
                            "pad_token_id * tf.ones((num_pad_tokens,), dtype=tf.int32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_1017": {
                "variable": {
                    "value": "beam_scores_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1019": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[beam_scores_begin, beam_scores_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1021": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_1054": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1201": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[0] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1202": {
                "variable": {
                    "value": "beam_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[1] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1203": {
                "variable": {
                    "value": "beam_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x[2] for x in next_batch_beam]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1206": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.identity(input_ids[x, :]) for x in beam_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_1207": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, tf.expand_dims(beam_tokens, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1292": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "decoded_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1296": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1409": {
                "variable": {
                    "value": "sorted_indices_to_remove",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(sorted_indices_to_remove[:, :min_tokens_to_keep]), sorted_indices_to_remove[:, min_tokens_to_keep:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_1431": {
                "input": {
                    "value": "tf.expand_dims(tf.range(shape[0]), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(batch_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1433": {
                "values": {
                    "value": "[broad_casted_batch_dims, tf.reshape(batch_indices, [1, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1435": {
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_1440": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_1565": {
                "params": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1579": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_1614": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_1624": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1628": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "register_keras_serializable_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_135": {
                "value": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_690": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_845": {
                "input": {
                    "value": "input_ids[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_865": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_899": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_902": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_915": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random.categorical(next_token_logits, dtype=tf.int32, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_920": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_934": {
                "variable": {
                    "value": "is_sents_unfinished_and_token_to_add_is_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(eos_in_sents, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_951": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_1047": {
                "variable": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_logits_penalties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ],
                        [
                            "_create_next_token_logits_penalties(input_ids, next_token_logits, repetition_penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1061": {
                "variable": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True if token is eos_token_id else False for token in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1064": {
                "variable": {
                    "value": "eos_token_indices_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_token_logit_eos_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([True if token is eos_token_id else False for token in range(vocab_size)], dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch_hypotheses, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1112": {
                "variable": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "categorical_1114": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1118": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_1121": {
                "variable": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1122": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1123": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(_scores, dtype=tf.int32, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_tokens, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(next_scores, direction='DESCENDING', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1131": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams * vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_1135": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(_scores, next_tokens, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(next_scores, next_scores_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "scores + tf.broadcast_to(beam_scores[:, None], (batch_size * num_beams, vocab_size))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(next_scores, (batch_size, num_beams * vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.math.top_k(next_scores, k=2 * num_beams, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_1214": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_1265": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1265": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1402": {
                "logits": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(logits, sorted_indices, axis=-1, batch_dims=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1431": {
                "input": {
                    "value": "tf.range(shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_1514": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_688": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "pad_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_token_id if pad_token_id is not None else self.config.pad_token_id",
                            "IfExp"
                        ],
                        [
                            "eos_token_id",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ],
                        [
                            "pad_token_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_729": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, 1), bos_token_id)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(input_ids, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_ids, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.ones((effective_batch_size * num_beams, 1), dtype=tf.int32) * decoder_start_token_id",
                            "BinOp"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(tokens_to_add, -1)], 1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.identity(input_ids[x, :]) for x in beam_idx])",
                            "Call"
                        ],
                        [
                            "tf.concat([input_ids, tf.expand_dims(beam_tokens, 1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_732": {
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(input_ids, pad_token_id), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(input_ids)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.expand_dims(attention_mask, 1), (batch_size, effective_batch_mult * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_mask, (effective_batch_size * num_beams, input_ids_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([attention_mask, tf.ones((shape_list(attention_mask)[0], 1), dtype=tf.int32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_744": {
                "shape": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_753": {
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_beams * effective_batch_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_757": {
                "params": {
                    "value": "encoder_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.repeat(tf.expand_dims(tf.range(batch_size), -1), repeats=num_beams * effective_batch_mult, axis=1), shape=(-1,))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_946": {
                "input_tensor": {
                    "value": "unfinished_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0])",
                            "Call"
                        ],
                        [
                            "unfinished_sents - is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_963": {
                "shape": {
                    "value": "[batch_size, max_sent_length.numpy()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_967": {
                "input": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_970": {
                "input": {
                    "value": "tf.expand_dims(tf.range(max_length), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_length, batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1018": {
                "shape": {
                    "value": "(batch_size, num_beams - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_1230": {
                "input_tensor": {
                    "value": "next_scores[batch_idx, :num_beams] == tf.reshape(beam_scores, (batch_size, num_beams))[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "concat_1280": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypo, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1302": {
                "params": {
                    "value": "layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "beam_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[2] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "beam_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1420": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1433": {
                "tensor": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_1508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1653": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_753": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_879": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_893": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_916": {
                "logits": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, eos_token_indices_mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(next_token_logits, tf.convert_to_tensor(banned_tokens_indices_mask, dtype=tf.bool), -float('inf'))",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "tf_top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.math.multiply(next_token_logits, next_token_logits_penalties)",
                            "Call"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_929": {
                "input": {
                    "value": "tokens_to_add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_token * unfinished_sents + pad_token_id * (1 - unfinished_sents)",
                            "BinOp"
                        ],
                        [
                            "next_token",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_935": {
                "x": {
                    "value": "eos_in_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_to_add == eos_token_id",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_970": {
                "input": {
                    "value": "tf.range(max_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1083": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1097": {
                "value": {
                    "value": "banned_tokens_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_to_1103": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "broadcast_to_1126": {
                "input": {
                    "value": "beam_scores[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * num_beams, vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "identity_1206": {
                "input": {
                    "value": "input_ids[x, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_1207": {
                "input": {
                    "value": "beam_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([x[1] for x in next_batch_beam], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_1267": {
                "input_tensor": {
                    "value": "sent_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(input_ids[:, 0]) * max_length",
                            "BinOp"
                        ],
                        [
                            "sent_lengths * (1 - is_sents_unfinished_and_token_to_add_is_eos) + cur_len * is_sents_unfinished_and_token_to_add_is_eos",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(sent_lengths_list, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1284": {
                "variable": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decoded_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypo",
                            "variable"
                        ],
                        [
                            "tf.concat([hypo, padding], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.range(sent_max_len, dtype=tf.int32) == sent_lengths[i], eos_token_id * tf.ones((sent_max_len,), dtype=tf.int32), decoded_slice)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1393": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "set_tensor_by_indices_to_value(logits, indices_to_remove, filter_value)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits_shape[-1])",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_1411": {
                "input": {
                    "value": "sorted_indices_to_remove[:, :min_tokens_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_1667": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "inputs.get('cls_index', None)",
                            "Call"
                        ],
                        [
                            "tf.fill(hidden_shape[:-2], hidden_shape[-2] - 1)",
                            "Call"
                        ],
                        [
                            "cls_index[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1668": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._generate_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, early_stopping=early_stopping, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, num_return_sequences=num_return_sequences, length_penalty=length_penalty, num_beams=num_beams, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "self._generate_no_beam_search(input_ids, cur_len=cur_len, max_length=max_length, min_length=min_length, do_sample=do_sample, temperature=temperature, top_k=top_k, top_p=top_p, repetition_penalty=repetition_penalty, no_repeat_ngram_size=no_repeat_ngram_size, bad_words_ids=bad_words_ids, bos_token_id=bos_token_id, pad_token_id=pad_token_id, eos_token_id=eos_token_id, decoder_start_token_id=decoder_start_token_id, batch_size=effective_batch_size, vocab_size=vocab_size, encoder_outputs=encoder_outputs, attention_mask=attention_mask, use_cache=use_cache)",
                            "Call"
                        ],
                        [
                            "hidden_states[:, -1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.first_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden_states, axis=1)",
                            "Call"
                        ],
                        [
                            "self.summary(output)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "self.last_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.gather(hidden_states, cls_index, batch_dims=len(hidden_shape) - 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=len(hidden_shape) - 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(hidden_shape) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_952": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_1187": {
                "input_tensor": {
                    "value": "next_scores[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1215": {
                "shape": {
                    "value": "(shape_list(attention_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1233": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1279": {
                "shape": {
                    "value": "(num_pad_tokens,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_1657": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "hidden_shape[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_1175": {
                "input": {
                    "value": "input_ids[effective_beam_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_1231": {
                "tensor": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([beam_scores_begin, beam_scores_end], -1)",
                            "Call"
                        ],
                        [
                            "tf.zeros((batch_size, num_beams), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(beam_scores, (batch_size * num_beams,))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([x[0] for x in next_batch_beam], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_1285": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1286": {
                "shape": {
                    "value": "(sent_max_len,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_xlm.py": {
        "tensorflow": {
            "constant_50": {
                "variable": {
                    "value": "out[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.sin(position_enc[:, 0::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "out[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.cos(position_enc[:, 1::2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "variable"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1)), alen[tf.newaxis, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "tf.cast(attn_mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_75": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(slen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_equal_79": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alen[tf.newaxis, :, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assert_equal_87": {
                "x": {
                    "value": "shape_list(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_109": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_110": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out_lin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.k_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k_lin(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_mask",
                            "variable"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "get_masks(slen, lengths, self.causal, padding_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(bs, 1, qlen, klen) if len(shape_list(mask)) == 3 else (bs, 1, 1, klen)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_187": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_188": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lin2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_237": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_256": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_479": {
                "variable": {
                    "value": "inputs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_480": {
                "variable": {
                    "value": "attns_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_667": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_778": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_820": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_821": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_822": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lang_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_360": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(lengths)[0]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input)",
                            "Call"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "langs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_61": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_80": {
                "input": {
                    "value": "alen[tf.newaxis, tf.newaxis, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(bs, slen, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_189": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_355": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_378": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_equal_384": {
                "x": {
                    "value": "shape_list(langs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_666": {
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNormalization_272": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm1_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNormalization_281": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm2_._{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_375": {},
            "ones_like_670": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inputs, mask_token], axis=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_353": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_353": {
                "x": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_tf_xlnet.py": {
        "tensorflow": {
            "Activation_60": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "swish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swish",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_83": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[1], x_size[0], x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_138": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_170": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_182": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask], training=training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNormalization_292": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_293": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_296": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_413": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_417": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_437": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / self.d_model)",
                            "BinOp"
                        ],
                        [
                            "inv_freq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_438": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_448": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_859": {
                "variable": {
                    "value": "dummy_token",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_860": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_865": {
                "variable": {
                    "value": "perm_mask_seq_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, sequence_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_866": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_869": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, sequence_length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_870": {
                "variable": {
                    "value": "target_mapping_seq_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(effective_batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_871": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_seq_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_952": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1013": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1070": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1118": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_loss(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.logits_proj(output)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1119": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1120": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_148": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_149": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + self.r_s_bias, self.seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_207": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_214": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_229": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_264": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_265": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_269": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_420": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_433": {
                "input": {
                    "value": "new_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_out[-self.mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-self.mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_442": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "self.relative_positional_encoding(qlen, klen, bsz=bsz, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "self.dropout(pos_emb, training=training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_450": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, self.d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_463": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_464": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_485": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_589": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(data_mask)[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_590": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_597": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_601": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=dtype_float), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_602": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tile_613": {
                "variable": {
                    "value": "word_emb_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[shape_list(target_mapping)[0], bsz, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_625": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_628": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_629": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tanh_51": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_233": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_241": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_259": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_467": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_468": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_471": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_472": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_487": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_489": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_542": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_550": {
                "a": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[5] if len(inputs) > 5 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(token_type_ids, perm=(1, 0)) if token_type_ids is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_551": {
                "a": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[6] if len(inputs) > 6 else input_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('input_mask', input_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(input_mask, perm=(1, 0)) if input_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "1.0 - tf.cast(attention_mask, dtype=dtype_float)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_552": {
                "a": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_553": {
                "a": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else perm_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('perm_mask', perm_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(perm_mask, perm=(1, 2, 0)) if perm_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, sequence_length, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([perm_mask, perm_mask_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_554": {
                "a": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "tf.zeros((effective_batch_size, 1, sequence_length - 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, target_mapping_seq_end], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_682": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(attn_out)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "self.layer_1(output)",
                            "Call"
                        ],
                        [
                            "self.activation_function(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + inp)",
                            "Call"
                        ],
                        [
                            "self.dropout(output_g if output_g is not None else output_h, training=training)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_431": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_438": {
                "x": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_545": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[8] if len(inputs) > 8 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_577": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "eye_600": {
                "num_rows": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "logical_not_628": {
                "x": {
                    "value": "tf.equal(token_type_ids[:, None], cat_ids[None, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_601": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_628": {
                "x": {
                    "value": "token_type_ids[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_694": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_689": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_691": {
                "a": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_124": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_128": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ger_176": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_201": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_253": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer_norm_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "zero_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_312": {
                "variable": {
                    "value": "AC",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "BD",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_406": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_584": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_300": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "emb_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_581": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_763": {
                "variable": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_inner",
                            "Method Argument"
                        ],
                        [
                            "d_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_198": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_323": {
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_422": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_438": {
                "variable": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_641": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.size(1)",
                            "Call"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ],
                        [
                            "bsz",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_661": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_408": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_756": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_415": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_754": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_754": {
                "input": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_835": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_840": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_137": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_variable_141": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_path",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "tf_to_pt_map.items()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Parameter_208": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_260": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_288": {
                "variable": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_298": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "attn_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_430": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_583": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_585": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_586": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_618": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_619": {
                "variable": {
                    "value": "mask_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_643": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_644": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_654": {
                "variable": {
                    "value": "freq_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_934": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_945": {
                "variable": {
                    "value": "dummy_token",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_946": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_950": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, sequence_length, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_956": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1, sequence_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1090": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1195": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1304": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1417": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_267": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_268": {
                "variable": {
                    "value": "ef",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_317": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_320": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_323": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_327": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_342": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_377": {
                "variable": {
                    "value": "q_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_378": {
                "variable": {
                    "value": "k_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_379": {
                "variable": {
                    "value": "v_head_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                }
            },
            "einsum_382": {
                "variable": {
                    "value": "k_head_r",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_623": {
                "variable": {
                    "value": "mask_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_667": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_668": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_683": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klen",
                            "variable"
                        ],
                        [
                            "klen",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-qlen",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_838": {
                "variable": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ],
                        [
                            "seg_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1071": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1277": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1399": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1520": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1654": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1673": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.split(1, dim=-1)",
                            "Call"
                        ],
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1675": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1679": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1687": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.split(1, dim=-1)",
                            "Call"
                        ],
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1689": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1695": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_234": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_248": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "klen",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_346": {
                "variable": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_354": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_372": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_655": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_794": {
                "variable": {
                    "value": "mems_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_795": {
                "variable": {
                    "value": "data_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_807": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_831": {
                "variable": {
                    "value": "mem_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_832": {
                "variable": {
                    "value": "cat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1174": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1177": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1282": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1662": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_285": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_291": {
                "equation": {
                    "value": "bnij->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_637": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_644": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_805": {
                "n": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs_embeds.shape[0]",
                            "Subscript"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ],
                        [
                            "qlen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1283": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_275": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_277": {
                "equation": {
                    "value": "ijbn->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_807": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/optimization_tf.py": {
        "tensorflow": {
            "PolynomialDecay_62": {
                "variable": {
                    "value": "learning_rate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_train_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_118": {
                "variable": {
                    "value": "apply_state[weight_decay_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.weight_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adam_weight_decay_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_130": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(*grads_and_vars))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, clip_norm=clip_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "self._accum_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "global_step_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "has_strategy_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_replica_context_236": {
                "variable": {
                    "value": "replica_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "self.name or 'WarmUp'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_42": {
                "pred": {
                    "value": "global_step_float < warmup_steps_float",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.decay_schedule_fn(step)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'AdamWeightDecay'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_149": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_155": {
                "control_inputs": {
                    "value": "[decay]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_41": {
                "x": {
                    "value": "warmup_percent_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_step_float / warmup_steps_float",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "input": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._get_replica_gradients(), gradients)",
                            "Call"
                        ],
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_208": {
                "initial_value": {
                    "value": "tf.zeros_like(gradient)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_strategy_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self._get_replica_gradients(), gradients)",
                            "Call"
                        ],
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/pipelines.py": {
        "tensorflow": {
            "where_732": {
                "variable": {
                    "value": "masked_index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_ids == self.tokenizer.mask_token_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_734": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ],
                        [
                            "outputs[i, masked_index, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_735": {
                "variable": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "logits.softmax(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_405": {
                "device_name": {
                    "value": "'/CPU:0' if self.device == -1 else '/device:GPU:{}'.format(self.device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "constant_1065": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(values.tolist(), predictions.tolist())",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1306": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_1425": {
                "input": {
                    "value": "inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_353": {
                "type": {
                    "value": "'cpu' if device < 0 else 'cuda:{}'.format(device)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_409": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_843": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1069": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1071": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(values.tolist(), predictions.tolist())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_1950": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1953": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1956": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2501": {
                "variable": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1751": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_map.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_dict.items()",
                            "Call"
                        ],
                        [
                            "outputs.items()",
                            "Call"
                        ],
                        [
                            "batch_outputs.items()",
                            "Call"
                        ],
                        [
                            "encoding_dict.items()",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_2307": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_map.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_dict.items()",
                            "Call"
                        ],
                        [
                            "outputs.items()",
                            "Call"
                        ],
                        [
                            "batch_outputs.items()",
                            "Call"
                        ],
                        [
                            "encoding_dict.items()",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_1959": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1962": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1965": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2503": {
                "variable": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1759": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_map.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_dict.items()",
                            "Call"
                        ],
                        [
                            "outputs.items()",
                            "Call"
                        ],
                        [
                            "batch_outputs.items()",
                            "Call"
                        ],
                        [
                            "encoding_dict.items()",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_2309": {
                "variable": {
                    "value": "encoding_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_map.items()",
                            "Call"
                        ],
                        [
                            "special_tokens_dict.items()",
                            "Call"
                        ],
                        [
                            "outputs.items()",
                            "Call"
                        ],
                        [
                            "batch_outputs.items()",
                            "Call"
                        ],
                        [
                            "encoding_dict.items()",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/templates/adding_a_new_model/modeling_tf_xxx.py": {
        "tensorflow": {
            "cast_146": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_404": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_405": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_459": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_460": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_516": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_526": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_527": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_528": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(logits, 2, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_129": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_131": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/templates/adding_a_new_model/modeling_xxx.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_507": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_508": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_593": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_692": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_347": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_457": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_625": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_736": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_542": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_545": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_bert.py": {
        "tensorflow": {
            "tile_218": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_220": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_220": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_camembert.py": {
        "tensorflow": {
            "convert_to_tensor_35": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5, 121, 11, 660, 16, 730, 25543, 110, 83, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_40": {
                "variable": {
                    "value": "expected_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 10, 768)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_43": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_common.py": {
        "tensorflow": {
            "constant_541": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype if dtype is not None else tf.int32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "list_physical_devices_36": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "clipnorm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_239": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_240": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_551": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[8.2220991, -0.5620044, 5.23229752, 4.0386393, -6.8798378, -0.54785802, -3.2012153, 2.92777176, 1.88171953, 7.35341276, 8.43207833, -9.85711836, -5.96209236, -1.13039161, -7.1115294, -0.8369633, -5.3186408, 7.06427407, 0.81369344, -0.82023817, -5.9179796, 0.58813443, -6.99778438, 4.71551189, -0.18771637, 7.44020759, 9.38450987, 2.12662941, -9.32562038, 2.35652522], [0.58425518, 4.53139238, -5.57510464, -6.28030699, -7.19529503, -4.02122551, 1.39337037, -6.06707057, 1.59480517, -9.643119, 0.03907799, 0.67231762, -8.88206726, 6.27115922, 2.28520723, 4.82767506, 4.30421368, 8.8275313, 5.44029958, -4.4735794, 7.38579536, -2.91051663, 2.61946077, -2.5674762, -9.48959302, -4.02922645, -1.35416918, 9.67702323, -5.89478553, 1.85370467]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_621": {
                "variable": {
                    "value": "non_inf_expected_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_625": {
                "variable": {
                    "value": "non_inf_expected_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[8.222099, 7.3534126, 8.432078, 7.4402075, 9.38451, 6.271159, 8.827531, 5.4402995, 7.3857956, 9.677023]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_633": {
                "variable": {
                    "value": "non_inf_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_114": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "symbolic_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{name: tf.keras.Input(tensor.shape[1:], dtype=tensor.dtype) for (name, tensor) in inputs_dict.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "main_layer(symbolic_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_237": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_259": {
                "variable": {
                    "value": "extended_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_near_637": {
                "x": {
                    "value": "non_inf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[output != -float('inf')]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "non_inf_expected_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([8.222099, 7.3534126, 8.432078, 7.4402075, 9.38451, 6.271159, 8.827531, 5.4402995, 7.3857956, 9.677023], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_equal_638": {
                "x": {
                    "value": "non_inf_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32))), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_inf_expected_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_logical_devices_43": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_model_120": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'keras_model.h5')",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{main_layer_class.__name__: main_layer_class}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "where_634": {
                "condition": {
                    "value": "tf.not_equal(output, tf.constant(-float('inf'), dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_112": {
                "shape": {
                    "value": "tensor.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_233": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_234": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_256": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "input": {
                    "value": "ids_tensor((1, 1), self.model_tester.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_634": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(values, shape=shape, dtype=dtype if dtype is not None else tf.int32)",
                            "Call"
                        ],
                        [
                            "tf_top_k_top_p_filtering(logits, top_k=10, top_p=0.6, min_tokens_to_keep=4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(-float('inf'), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_634": {
                "value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_395": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_397": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "pt_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'pt_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "key.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_ctrl.py": {
        "tensorflow": {
            "convert_to_tensor_212": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[11859, 0, 1611, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_gpt2.py": {
        "tensorflow": {
            "convert_to_tensor_335": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[464, 3290]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_364": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[464, 1893]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "next_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[token_type_ids, next_token_types]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_203": {
                "variable": {
                    "value": "attn_mask_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "attn_mask_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length - half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_begin, attn_mask_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_220": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "random_other_next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor((self.batch_size, self.seq_length), config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 3290]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 1893]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_223": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_224": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask, tf.ones((shape_list(attn_mask)[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_258": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_259": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_260": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assert_near_194": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_near_236": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "broadcast_to_218": {
                "input": {
                    "value": "tf.expand_dims(vector_condition, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.seq_length, self.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_258": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 3290]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[464, 1893]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_260": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "vector_condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(self.seq_length) == self.seq_length - random_seq_idx_to_change",
                            "Compare"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_224": {
                "shape": {
                    "value": "(shape_list(attn_mask)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_openai_gpt.py": {
        "tensorflow": {
            "convert_to_tensor_247": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[481, 4735, 544]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_183": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([[481, 4735, 544]], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_183": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ],
                        [
                            "input_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "input": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_roberta.py": {
        "tensorflow": {
            "constant_245": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_259": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_271": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_t5.py": {
        "tensorflow": {
            "concat_169": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_189": {
                "variable": {
                    "value": "attn_mask_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "attn_mask_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length - half_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_begin, attn_mask_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.broadcast_to(tf.expand_dims(vector_condition, -1), (self.seq_length, self.batch_size)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "random_other_next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor((self.batch_size, self.seq_length), config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ],
                        [
                            "input_ids[:1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.where(condition, random_other_next_tokens, input_ids)",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ],
                        [
                            "tok.encode(model.config.prefix + original_input, return_tensors='tf')",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_209": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask, tf.ones((attn_mask.shape[0], 1), dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assert_near_180": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_near_224": {
                "x": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_all_133": {
                "input_tensor": {
                    "value": "tf.math.equal(decoder_past[0][0], encoder_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_to_204": {
                "input": {
                    "value": "tf.expand_dims(vector_condition, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.seq_length, self.batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_233": {
                "value": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_133": {
                "x": {
                    "value": "decoder_past[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(input_ids, decoder_attention_mask=input_mask, decoder_input_ids=input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_204": {
                "input": {
                    "value": "vector_condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(self.seq_length) == self.seq_length - random_seq_idx_to_change",
                            "Compare"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_210": {
                "shape": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "convert_to_tensor_221": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[33, 1297, 2, 1, 1009, 4, 1109, 11739, 4762, 358, 5, 25, 245, 22, 1706, 17, 20098, 5, 3215, 21, 37, 1110, 3, 13, 1041, 4, 24, 603, 490, 2, 71477, 20098, 104447, 2, 20961, 1, 2604, 4, 1, 329, 3, 6224, 831, 16002, 2, 8, 603, 78967, 29546, 23, 803, 20, 25, 416, 5, 8, 232, 4, 277, 6, 1855, 4601, 3, 29546, 54, 8, 3609, 5, 57211, 49, 4, 1, 277, 18, 8, 1755, 15691, 3, 341, 25, 416, 693, 42573, 71, 17, 401, 94, 31, 17919, 2, 29546, 7873, 18, 1, 435, 23, 11011, 755, 5, 5167, 3, 7983, 98, 84, 2, 29546, 3267, 8, 3609, 4, 1, 4865, 1075, 2, 6087, 71, 6, 346, 8, 5854, 3, 29546, 824, 1400, 1868, 2, 19, 160, 2, 311, 8, 5496, 2, 20920, 17, 25, 15097, 3, 24, 24, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_seed_117": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_xlm.py": {
        "tensorflow": {
            "convert_to_tensor_320": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[14, 447]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_tf_xlnet.py": {
        "tensorflow": {
            "convert_to_tensor_422": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[67, 2840, 19, 18, 1484, 20, 965, 29077, 8719, 1273, 21, 45, 273, 17, 10, 15048, 28, 27511, 21, 4185, 11, 41, 2444, 9, 32, 1025, 20, 8719, 26, 23, 673, 966, 19, 29077, 20643, 27511, 20822, 20643, 19, 17, 6616, 17511, 18, 8978, 20, 18, 777, 9, 19233, 1527, 17669, 19, 24, 673, 17, 28756, 150, 12943, 4354, 153, 27, 442, 37, 45, 668, 21, 24, 256, 20, 416, 22, 2771, 4901, 9, 12943, 4354, 153, 51, 24, 3004, 21, 28142, 23, 65, 20, 18, 416, 34, 24, 2958, 22947, 9, 1177, 45, 668, 3097, 13768, 23, 103, 28, 441, 148, 48, 20522, 19, 12943, 4354, 153, 12860, 34, 18, 326, 27, 17492, 684, 21, 6709, 9, 8585, 123, 266, 19, 12943, 4354, 153, 6872, 24, 3004, 20, 18, 9225, 2198, 19, 12717, 103, 22, 401, 24, 6348, 9, 12943, 4354, 153, 1068, 2768, 2286, 19, 33, 104, 19, 176, 24, 9313, 19, 20086, 28, 45, 10292, 9, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "perm_mask_last",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, self.seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "target_mapping_last",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_last]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_seed_172": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_optimization_tf.py": {
        "tensorflow": {
            "list_physical_devices_39": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_logical_devices_45": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MirroredStrategy_46": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "[device.name for device in devices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[4.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "gradient_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "[-2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "[-1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_28": {
                "value": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/bart-csqa.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/bart-gen.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/bart-ppl.py": {
        "torch": {
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/byte_level_bpe/gru_transformer.py": {
        "torch": {
            "GRU_27": {
                "variable": {
                    "value": "self.emb_ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_tokens.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "embed_tokens.embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb_ctx.forward(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb_ctx.forward(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/roberta/commonsense_qa/commonsense_qa_task.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/roberta/wsc/wsc_criterion.py": {
        "torch": {
            "log_softmax_49": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=self.get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_57": {
                "input": {
                    "value": "torch.cat([query_lprobs, cand_lprobs]).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "query_lprobs.new([0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[query_lprobs, cand_lprobs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/roberta/wsc/wsc_task.py": {
        "torch": {
            "zeros_like_98": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "toks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.binarize(prefix + leading_space + txt + trailing_space + suffix, append_eos=True)",
                            "Call"
                        ],
                        [
                            "self.binarize_with_mask(cand_span.text, prefix, suffix, leading_space, trailing_space)",
                            "Call"
                        ],
                        [
                            "full_cand[mask.bool()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "variable": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src_tokens=get_masked_input(tokens, mask))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/criterions/ASG_loss.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "self.asg.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "asg_transitions_init * torch.eye(num_labels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.linseg_progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0], dtype=torch.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.asg.forward(emissions, target.to(device), target_size.to(device))",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.tgt_dict)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/criterions/CTC_loss.py": {
        "torch": {
            "ctc_loss_143": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "log_probs": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.masked_select(pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "input_lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_padding_mask_to_lengths(net_output['encoder_padding_mask'], max_seq_len, bsz, device)",
                            "Call"
                        ],
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "target_lengths": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['target_lengths']",
                            "Subscript"
                        ],
                        [
                            "target_lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "blank": {
                    "value": "self.blank_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_padding_mask_to_lengths(net_output['encoder_padding_mask'], max_seq_len, bsz, device)",
                            "Call"
                        ],
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_173": {
                "input": {
                    "value": "sample['net_input']['src_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/criterions/cross_entropy_acc.py": {
        "torch": {
            "nll_loss_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ],
                        [
                            "self.compute_loss(model, net_output, target, reduction, log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction",
                            "Method Argument"
                        ],
                        [
                            "'sum'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_49": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask) == target.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target != self.padding_idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_64": {
                "input": {
                    "value": "sample['net_input']['src_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/data/collaters.py": {
        "torch": {
            "index_select_107": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames_lengths.sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s['data'][self.feature_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "fairseq_data_utils.collate_tokens([s['target'] for s in samples], self.pad_index, self.eos_index, left_pad=False, move_eos_to_beginning=False)",
                            "Call"
                        ],
                        [
                            "target.index_select(0, sort_order)",
                            "Call"
                        ],
                        [
                            "s['data'][self.label_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/data/data_utils.py": {
        "torch": {
            "max_42": {
                "variable": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_44": {
                "start": {
                    "value": "max_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ],
                        [
                            "max_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_96": {
                "input": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_lengths).to(lengths.device).view(1, max_lengths).expand(bsz, -1) >= lengths.view(bsz, 1).expand(-1, max_lengths)",
                            "Compare"
                        ],
                        [
                            "encoder_padding_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/infer.py": {
        "torch": {
            "flatten_198": {
                "variable": {
                    "value": "args.asg_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterions[0].asg.trans.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/models/vggtransformer.py": {
        "torch": {
            "Embedding_850": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_858": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_875": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_251": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_385": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_519": {
                "variable": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(src_lengths.float() / subsampling_factor).ceil().long()",
                            "Call"
                        ],
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_580": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_599": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_871": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.LayerNorm(embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_694": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_698": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_596": {
                "normalized_shape": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/models/w2l_conv_glu_enc.py": {
        "torch": {
            "ModuleList_100": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glu_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[layer_idx], training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[-1])",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[layer_idx], training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[-1])",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropouts[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_106": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ],
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "variable"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_enc_config",
                            "variable"
                        ],
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "glu_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[layer_idx], training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[-1])",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[layer_idx], training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropouts[-1])",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropouts[layer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_108": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_117": {
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_147": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/speech_recognition/tasks/speech_recognition.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/examples/speech_recognition/w2l_decoder.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/examples/translation_moe/src/logsumexp_moe.py": {
        "torch": {
            "logsumexp_20": {
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/translation_moe/src/mean_pool_gating_network.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_experts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_experts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~encoder_padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.encoder_out.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(encoder_out, dim=1) / ntokens.type_as(encoder_out)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(encoder_out, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_42": {
                "input": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.encoder_out.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ],
                        [
                            "encoder_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/translation_moe/src/translation_moe.py": {
        "torch": {
            "cat_148": {
                "variable": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lprob_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_lprob_y(encoder_out, prev_output_tokens_k)",
                            "Call"
                        ],
                        [
                            "torch.cat(lprob_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "prob_z_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprob_yz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "lprob_y",
                            "variable"
                        ],
                        [
                            "lprob_y + lprob_z.type_as(lprob_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/wav2vec/vq-wav2vec_featurize.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(fname)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "samples",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FilesDataset(fnames, self.args.labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_214": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda x, _: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_225": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wav2VecModel.build_model(cp['args'], None)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_162": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.feature_extractor.vars.view(self.model.feature_extractor.banks, self.model.feature_extractor.num_vars, -1).cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.var_file()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/examples/wav2vec/wav2vec_featurize.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(labels)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/fairseq_cli/eval_lm.py": {
        "torch": {
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_64": {
                "device": {
                    "value": "parsed_args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/fairseq_cli/generate.py": {
        "torch": {
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/fairseq_cli/interactive.py": {
        "torch": {
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/fairseq_cli/train.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_44": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/fairseq_cli/validate.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/scripts/average_checkpoints.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/setup.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/speech_recognition/asr_test_base.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "encoder_out[encoder_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*encoder_out_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_484": {
                "input": {
                    "value": "torch.div(net_output['encoder_out'], 1 - net_output['encoder_out'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_530": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_542": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(low=0, high=K, size=token_length, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_485": {
                "input": {
                    "value": "net_output['encoder_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - net_output['encoder_out']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_313": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_314": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_382": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_554": {
                "data": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/speech_recognition/test_collaters.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [pad_idx, pad_idx]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[eos_idx, 3, 2, pad_idx], [eos_idx, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[3, 2, eos_idx, pad_idx], [4, 2, 3, eos_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_average_checkpoints.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.FC2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.FC2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_0)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'model': m.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'm1.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm2.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm3.pt')",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_114": {
                "input": {
                    "value": "new_model['model']['embedding.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.embedding.weight + m2.embedding.weight + m3.embedding.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_123": {
                "input": {
                    "value": "new_model['model']['FC1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC1.weight + m2.FC1.weight + m3.FC1.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_132": {
                "input": {
                    "value": "new_model['model']['FC2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC2.weight + m2.FC2.weight + m3.FC2.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_backtranslation_dataset.py": {
        "torch": {
            "is_available_30": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "backtranslation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BacktranslationDataset(tgt_dataset=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), remove_eos_from_src=remove_eos_from_input_src), src_dict=self.tgt_dict, backtranslation_fn=lambda sample: generator.generate([self.model], sample), output_collater=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), append_eos_to_tgt=remove_eos_from_input_src, remove_eos_from_src=remove_eos_from_output_src).collater, cuda=self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "backtranslation_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_binaries.py": {
        "torch": {
            "rand_758": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_798": {
                "variable": {
                    "value": "random_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_801": {
                "variable": {
                    "value": "output_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_examples, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_726": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_759": {
                "input": {
                    "value": "26 * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_777": {
                "variable": {
                    "value": "src_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_778": {
                "variable": {
                    "value": "tgt_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * tgt_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_799": {
                "input": {
                    "value": "26 * random_data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_803": {
                "input": {
                    "value": "num_classes * torch.rand(num_examples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_777": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_778": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_803": {
                "*size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_bmuf.py": {
        "torch": {
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_66": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_60": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank in range(args.distributed_world_size)",
                            "Call"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(results, param.flatten().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_character_token_embedder.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/test_concat_dataset.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/test_convtbc.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "input_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "grad_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_tbc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_dictionary.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/test_export.py": {
        "torch": {
            "script_70": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_75": {
                "variable": {
                    "value": "module1",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_77": {
                "variable": {
                    "value": "module2",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module2)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_92": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_103": {
                "variable": {
                    "value": "scripted",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_label_smoothing.py": {
        "torch": {
            "unsqueeze_41": {
                "variable": {
                    "value": "self.args.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_lstm_jitable.py": {
        "torch": {
            "script_78": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_88": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_93": {
                "variable": {
                    "value": "seq_len_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_94": {
                "variable": {
                    "value": "num_samples_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_99": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_100": {
                "variable": {
                    "value": "(src_lengths, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, seq_len + 1, (num_samples,))",
                            "Call"
                        ],
                        [
                            "torch.sort(src_lengths, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_98": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_103": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_memory_efficient_fp16.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_63": {
                "obj": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_53": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_multi_corpus_sampled_dataset.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/test_multihead_attention.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[[0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[0, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_49": {
                "input": {
                    "value": "torch.eq(key_padding_mask, c[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_49": {
                "input": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiheadAttention._append_prev_key_padding_mask(c[0], c[1], batch_size=bsz, src_len=src_len, static_kv=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_noising.py": {
        "torch": {
            "DataLoader_440": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "language_pair_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LanguagePairDataset(src=noising_dataset, tgt=tgt, src_sizes=None, src_dict=src_dict)",
                            "Call"
                        ],
                        [
                            "TransformEosDataset(language_pair_dataset, src_dict.eos(), append_eos_to_tgt=append_eos_to_tgt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "language_pair_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_454": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_491": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_reproducibility.py": {
        "torch": {
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_sequence_generator.py": {
        "torch": {
            "randint_70": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_tokens, torch.LongTensor([[eos], [eos]]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_83": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_128": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2, no_repeat_ngram_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, normalize_scores=False)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([reshaping_model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_139": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2, no_repeat_ngram_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, normalize_scores=False)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([reshaping_model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_185": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_401": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_571": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_118": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "torch.quantization.quantize_dynamic(self.transformer_model, {torch.nn.Linear}, dtype=torch.qint8, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "script_151": {
                "obj": {
                    "value": "ensemble_models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EnsembleModel([model])",
                            "Call"
                        ]
                    ]
                }
            },
            "script_164": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_171": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_177": {
                "obj": {
                    "value": "search_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_108": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_sequence_scorer.py": {
        "torch": {
            "log_97": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_sparse_multihead_attention.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_27": {
                "input": {
                    "value": "torch.eq(bidirectional_attention_sparse_mask, bidirectional_sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_44": {
                "input": {
                    "value": "torch.eq(attention_sparse_mask, sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_27": {
                "input": {
                    "value": "bidirectional_attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional_attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_44": {
                "input": {
                    "value": "attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_token_block_dataset.py": {
        "torch": {
            "tensor_24": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/test_train.py": {
        "torch": {}
    },
    "methods/BART/fairseq_local/tests/test_utils.py": {
        "torch": {
            "Parameter_78": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_87": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(15,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_87": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_85": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_80": {
                "obj": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_83": {
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_88": {
                "obj": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BART/fairseq_local/tests/utils.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda samples: collate(samples, padding_idx, eos_idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rand_236": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_264": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tokens",
                            "variable"
                        ],
                        [
                            "F.pad(x, (0, padding_needed))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_needed)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/layoutlm/modeling_layoutlm.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.x_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.y_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.h_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.w_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_230": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_307": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_145": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_147": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_265": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_345": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_348": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/layoutlm/run_classification.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "all_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.bboxes for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_452": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_93": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "'_' + os.path.basename(args.output_dir)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_408": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_701": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_706": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_709": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_97": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_708": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_815": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_322": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_324": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_433": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_705": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__232": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/layoutlm/run_seq_labeling.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.boxes for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_450": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_414": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_675": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_679": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_682": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_97": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_315": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_317": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_678": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_681": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_771": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_438": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, labels, args.max_seq_length, tokenizer, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0, pad_token_label_id=pad_token_label_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__234": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__238": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/layoutlm/utils_classification.py": {
        "torch": {
            "manual_seed_375": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_377": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/minilm/examples/run_xnli.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_378": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_131": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_271": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_538": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_542": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_276": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_541": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_627": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__206": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__208": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/decode_seq2seq.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_135": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_202": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(model_recover_path, config=config, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_150": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/new_decode_seq2seq.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_135": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_203": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(model_recover_path, config=config, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_150": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/run_seq2seq.py": {
        "torch": {
            "DataParallel_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "prepare_for_training(args, model, checkpoint_state_dict, amp=amp)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "get_model_and_tokenizer(args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "prepare_for_training(args, model, checkpoint_state_dict, amp=amp)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "get_model_and_tokenizer(args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_80": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset, shuffle=False)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "per_node_train_batch_size // args.gradient_accumulation_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_336": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_337": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_340": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_339": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_357": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_157": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_158": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__198": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/s2s_ft/convert_state_dict.py": {
        "torch": {
            "load_36": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/s2s_ft/modeling.py": {
        "torch": {
            "Embedding_153": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_444": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_475": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_479": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.transform(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.linear(hidden_states, weight=self.decoder_weight, bias=self.bias)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.decoder_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_500": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_516": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "num_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(source_position_ids), target_span_ids, -target_span_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_ids, target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(source_ids) * self.source_type_id, torch.ones_like(target_ids) * self.target_type_id, torch.ones_like(pseudo_ids) * self.target_type_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_position_ids, target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_156": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_174": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_259": {
                "variable": {
                    "value": "query_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_260": {
                "variable": {
                    "value": "key_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.key(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_261": {
                "variable": {
                    "value": "value_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_396": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "kl_div_463": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.float().repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_463": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_512": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_230": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.multi_head_attention(mixed_query_layer, mixed_key_layer, mixed_value_layer, attention_mask)",
                            "Call"
                        ],
                        [
                            "(torch.cat(outputs, dim=1),)",
                            "Tuple"
                        ],
                        [
                            "(attention_output,) + self_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(layer_output,) + self_attention_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(hidden_states,)",
                            "Tuple"
                        ],
                        [
                            "outputs + (all_hidden_states,)",
                            "BinOp"
                        ],
                        [
                            "outputs + (all_attentions,)",
                            "BinOp"
                        ],
                        [
                            "(sequence_output,) + encoder_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "self.bert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, split_lengths=split_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_526": {
                "input": {
                    "value": "source_position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_mask_and_position_ids(num_source_tokens, source_len)",
                            "Call"
                        ],
                        [
                            "source_position_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_572": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_579": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "kwargs[state_dict]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_name_or_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_model_name_or_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_121": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_268": {
                "tensors": {
                    "value": "(key, _key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(value, _value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_548": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_549": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_550": {
                "input": {
                    "value": "pseudo_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_137": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_530": {
                "tensors": {
                    "value": "(source_mask, target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/s2s_ft/modeling_decoding.py": {
        "torch": {
            "full_45": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ger_245": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_260": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_276": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_338": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_413": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_442": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ],
                        [
                            "torch.cat((value_history, value_layer), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_459": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_461": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_503": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_524": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_567": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_606": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_607": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_647": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_710": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1021": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1027": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1038": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1066": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_1238": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "token_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1246": {
                "variable": {
                    "value": "target_pos_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_target_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1255": {
                "variable": {
                    "value": "golden_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask, torch.zeros_like(triangle_attention_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1257": {
                "variable": {
                    "value": "pseudo_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask - diagonal_attention_mask, diagonal_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1276": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_mask.unsqueeze(1).expand(-1, target_ids.size(1) * 2, -1), extend_target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1279": {
                "variable": {
                    "value": "target_input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1280": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids",
                            "Method Argument"
                        ],
                        [
                            "target_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1281": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_segment_ids, target_segment_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1283": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "target_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1285": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1326": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1345": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls2(sequence_output_masked_2, None)",
                            "Call"
                        ],
                        [
                            "self.cls2(sequence_output_masked_2, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1363": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1364": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "kl_div_64": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_265": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_287": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_291": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_346": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_348": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_386": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.intermediate_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, history_states=history_states, mask_qkv=mask_qkv, seg_ids=seg_ids)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, mask_qkv=mask_qkv, seg_ids=seg_ids, key_history=set_key, value_history=set_value)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform(self.type_converter(hidden_states))",
                            "Call"
                        ],
                        [
                            "hidden_states.view(num_batch, num_pos, self.relax_projection, -1)[torch.arange(0, num_batch).long(), :, task_idx, :]",
                            "Subscript"
                        ],
                        [
                            "F.linear(self.type_converter(hidden_states), self.type_converter(self.decoder.weight), self.type_converter(self.bias))",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states) + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pair_x, pair_y], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_392": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((history_states, hidden_states), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "key_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key_history, key_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(value_history, value_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_421": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_677": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_787": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_878": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_880": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1007": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1048": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1062": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1070": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1096": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1141": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1234": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_1427": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1456": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1510": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1516": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1597": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_91": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_224": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_431": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_647": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1135": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1260": {
                "tensors": {
                    "value": "(golden_attention_mask, pseudo_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1270": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1286": {
                "tensors": {
                    "value": "(target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1338": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1414": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1496": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1518": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1519": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "pos.size(0)",
                            "Call"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1520": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1522": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1524": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1527": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1528": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "div_1529": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1530": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1531": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1540": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1543": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1551": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1558": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1559": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_344": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1120": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1152": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_1173": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1255": {
                "input": {
                    "value": "triangle_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_pos_matrix.view(1, max_target_len, 1) >= target_pos_matrix.view(1, 1, max_target_len)",
                            "Compare"
                        ],
                        [
                            "triangle_attention_mask.type_as(target_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1305": {
                "input": {
                    "value": "prediction_scores_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(target_sequence_output[:, target_ids.size(1):, :], target_pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1305": {
                "index": {
                    "value": "target_ids.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1305": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1310": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1407": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1434": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1445": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1489": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1534": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1555": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1568": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1584": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_224": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_241": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_300": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_675": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1298": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1656": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1658": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).to(input_ids.device)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1726": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1439": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1451": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1576": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1592": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/s2s_ft/s2s_loader.py": {
        "torch": {
            "tril_85": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_25": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/s2s-ft/s2s_ft/utils.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_features_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_154": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_features_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_99": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/biunilm/decode_seq2seq.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_128": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_recover_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(args.model_recover_path.strip())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_134": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_185": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(args.bert_model, state_dict=model_recover, num_labels=cls_num_labels, num_rel=pair_num_relation, type_vocab_size=type_vocab_size, task_idx=3, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, not_predict_set=not_predict_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, ffn_type=args.ffn_type, num_qkv=args.num_qkv, seg_emb=args.seg_emb, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/biunilm/loader_utils.py": {
        "torch": {
            "stack_20": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_22": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/biunilm/run_seq2seq.py": {
        "torch": {
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_235": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_238": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "args.train_batch_size // dist.get_world_size()",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset, replacement=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "seq2seq_loader.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_396": {
                "variable": {
                    "value": "optim_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'optim.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_237": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_256": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_290": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_326": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'model.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_334": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_recover_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_473": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'model.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_476": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_optim_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'optim.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/biunilm/seq2seq_loader.py": {
        "torch": {
            "tril_119": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_327": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/nn/data_parallel.py": {
        "torch": {
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/pytorch_pretrained_bert/loss.py": {
        "torch": {
            "full_29": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kl_div_48": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/pytorch_pretrained_bert/modeling.py": {
        "torch": {
            "ger_193": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_208": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_210": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_221": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_280": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_367": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_420": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_482": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_514": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_554": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_616": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1145": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1151": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1162": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1190": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_1347": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1364": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls2(sequence_output_masked_2, None)",
                            "Call"
                        ],
                        [
                            "self.cls2(sequence_output_masked_2, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1381": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1382": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_1934": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1935": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_2009": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2010": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_2081": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2082": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_2167": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_232": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_346": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_583": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_767": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1008": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_1010": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1131": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1172": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1186": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1194": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1220": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1263": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1449": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1478": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1531": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1540": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1621": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1812": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1876": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2024": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2092": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2189": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_47": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_356": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_554": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1257": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1357": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1433": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1518": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1542": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1543": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.size(0)",
                            "Call"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1544": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1546": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1548": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1551": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1552": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "div_1553": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1554": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1555": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1564": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1567": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1575": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1582": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1583": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1946": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1243": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1274": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_1295": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1426": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1456": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1467": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1511": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1558": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1579": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1592": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1608": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1950": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_246": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_581": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1679": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1681": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1749": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1461": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1473": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1600": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1616": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/BERT-based/unilm/unilm-v1/src/pytorch_pretrained_bert/optimization.py": {
        "torch": {
            "cos_32": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__143": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__239": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/contrib/run_camembert.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(masked_input, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/contrib/run_openai_gpt.py": {
        "torch": {
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_161": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_209": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_210": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_213": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_214": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/contrib/run_swag.py": {
        "torch": {
            "tensor_266": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_272": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_274": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_284": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_318": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_322": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_624": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_628": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_233": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_287": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_429": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_429": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_627": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_694": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, args.max_seq_length, not evaluate)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__371": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__374": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/contrib/run_transfo_xl.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/distiller.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.batch_sequences",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_111": {
                "variable": {
                    "value": "self.ce_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "self.lm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdamW_145": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in student.named_parameters() if not any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': params.weight_decay}, {'params': [p for (n, p) in student.named_parameters() if any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "params.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multinomial_216": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prob / x_prob.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(self.mlm_mask_prop * lengths.sum().item())",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_239": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_token_ids_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_407": {
                "variable": {
                    "value": "s_logits_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.student(input_ids=input_ids, attention_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "self.student(input_ids=input_ids, attention_mask=None)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_409": {
                "variable": {
                    "value": "t_logits_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.teacher(input_ids=input_ids, attention_mask=attention_mask)",
                            "Call"
                        ],
                        [
                            "self.teacher(input_ids=input_ids, attention_mask=None)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_60": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_62": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchSampler_68": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_114": {
                "variable": {
                    "value": "self.mse_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_116": {
                "variable": {
                    "value": "self.cosine_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_185": {
                "variable": {
                    "value": "self.tensorboard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.dump_path, 'log', 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "padding_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 * (bs1 // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, padding_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_443": {
                "variable": {
                    "value": "s_hidden_states_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_445": {
                "variable": {
                    "value": "t_hidden_states_slct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_603": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mdl_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.dump_path, checkpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_170": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_209": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_274": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_306": {
                "n": {
                    "value": "bs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_415": {
                "input": {
                    "value": "s_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_416": {
                "input": {
                    "value": "t_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__495": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__497": {
                "parameters": {
                    "value": "self.student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_232": {
                "input": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * max_seq_len, dtype=torch.bool, device=token_ids.device)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/grouped_batch_sampler.py": {
        "torch": {}
    },
    "methods/T5/transformer_local/examples/distillation/lm_seqs_dataset.py": {
        "torch": {
            "tensor_164": {
                "variable": {
                    "value": "tk_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tk_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[list(t.astype(int)) + [pad_idx] * (max_seq_len_ - len(t)) for t in token_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "lg_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t[1] for t in batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/run_squad_w_distillation.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_320": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_98": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_142": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_146": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_325": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_447": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_722": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_726": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_101": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_101": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_725": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_829": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_233": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_481": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__260": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__262": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "input": {
                    "value": "start_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "start_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_239": {
                "input": {
                    "value": "end_logits_stu / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_240": {
                "input": {
                    "value": "end_logits_tea / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/scripts/extract.py": {
        "torch": {
            "save_102": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/scripts/extract_distilbert.py": {
        "torch": {
            "save_92": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/train.py": {
        "torch": {
            "from_numpy_271": {
                "variable": {
                    "value": "token_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "token_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.maximum(counts, 1) ** (-args.mlm_smoothing)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(token_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/distillation/utils.py": {
        "torch": {
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_115": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/glue/run_pl_glue.py": {
        "torch": {
            "load_80": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_90": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_examples_to_features(examples, self.tokenizer, max_length=args.max_seq_length, label_list=self.labels, output_mode=args.glue_output_mode)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/hans/test_hans.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "all_pair_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(f.pairID) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_365": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_97": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_132": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_136": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_254": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_329": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_522": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_526": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_91": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_100": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_100": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_259": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_525": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_611": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.pad_token_id, pad_token_segment_id=tokenizer.pad_token_type_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__188": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/mm-imdb/utils_mmimdb.py": {
        "torch": {
            "zeros_92": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "text_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "tgt_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['label'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "img_start_token",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_start_token'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "img_end_token",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_end_token'] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "POOLING_BREAKDOWN[args.num_image_embeds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(self.model(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, start_dim=2)",
                            "Call"
                        ],
                        [
                            "out.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/ner/run_ner.py": {
        "torch": {
            "CrossEntropyLoss_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/ner/run_pl_ner.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "dataset": {
                    "value": "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_label_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_88": {
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_examples_to_features(examples, self.labels, args.max_seq_length, self.tokenizer, cls_token_at_end=bool(self.config.model_type in ['xlnet']), cls_token=self.tokenizer.cls_token, cls_token_segment_id=2 if self.config.model_type in ['xlnet'] else 0, sep_token=self.tokenizer.sep_token, sep_token_extra=bool(self.config.model_type in ['roberta']), pad_on_left=bool(self.config.model_type in ['xlnet']), pad_token=self.tokenizer.pad_token_id, pad_token_segment_id=self.tokenizer.pad_token_type_id, pad_token_label_id=self.pad_token_label_id)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ],
                        [
                            "self._feature_file(mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/ner/utils_ner.py": {
        "torch": {
            "CrossEntropyLoss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_bertology.py": {
        "torch": {
            "zeros_75": {
                "variable": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "attn_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "head_ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_138": {
                "variable": {
                    "value": "head_ranks[head_importance.view(-1).sort(descending=True)[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_156": {
                "variable": {
                    "value": "new_head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False)",
                            "Call"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False, head_mask=new_head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_411": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "DefaultDataCollator().collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_hidden_layers",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.config.num_attention_heads",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_122": {
                "input": {
                    "value": "head_importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False)",
                            "Call"
                        ],
                        [
                            "compute_heads_importance(args, model, eval_dataloader, compute_entropy=False, head_mask=new_head_mask)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "device_345": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_349": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_395": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_409": {
                "variable": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(args.data_subset, len(eval_dataset))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_348": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_399": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_410": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_410": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GlueDataset(args, tokenizer=tokenizer, evaluate=True, local_rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "Subset(eval_dataset, list(range(min(args.data_subset, len(eval_dataset)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_122": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_count_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_generation.py": {
        "torch": {
            "device_191": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_squad.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_281": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_282": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_79": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_286": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_427": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_698": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_702": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_82": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_82": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_701": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_787": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_467": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_699": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__222": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__224": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_698": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_318": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_tpu_glue.py": {
        "torch": {
            "DataLoader_107": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_349": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_97": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "xm.xrt_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "xm.get_ordinal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_104": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tensorboard_logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_225": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tensorboard_logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.cache_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_96": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_attention_mask, all_token_type_ids, all_labels)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_335": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, max_length=args.max_seq_length, label_list=label_list, output_mode=output_mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.cache_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_448": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/run_xnli.py": {
        "torch": {
            "DataLoader_86": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_365": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_82": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_129": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_265": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_339": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_525": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_529": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_85": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_85": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_270": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_528": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_614": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_351": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, max_length=args.max_seq_length, label_list=label_list, output_mode=output_mode)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bart/evaluate_cnn.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bart/finetune.py": {
        "torch": {
            "stack_63": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizationDataset(self.tokenizer, type_path=type_path, **self.dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bart/finetune_csqa.py": {
        "torch": {
            "stack_63": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizationDataset(self.tokenizer, type_path=type_path, **self.dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bart/test_bart_examples.py": {
        "torch": {
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SummarizationDataset(tokenizer, data_dir=tmp_dir, type_path='train', max_source_length=20, max_target_length=trunc_target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bart/utils.py": {
        "torch": {
            "stack_50": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['source_ids'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['source_mask'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['target_ids'] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bertabs/convert_bertabs_original_pytorch_checkpoint.py": {
        "torch": {
            "load_89": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path_to_checkpoints",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "encoder_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(encoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "decoder_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample 3 \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(decoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_model - output_original_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_generator - output_original_generator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_150": {
                "variable": {
                    "value": "are_identical",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_converted_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_model(encoder_input_ids, decoder_input_ids, token_type_ids, encoder_attention_mask, decoder_attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "output_original_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original(src, tgt, segs, clss, mask_src, mask_tgt, mask_cls)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "new_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./bertabs-finetuned-cnndm-extractive-abstractive-summarization/pytorch_model.bin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "torch.abs(original.generator[0].weight - new_model.generator[0].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_122": {
                "input": {
                    "value": "original.generator[0].weight - new_model.generator[0].weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "output_converted_model - output_original_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "output_converted_generator - output_original_generator",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bertabs/modeling_bertabs.py": {
        "torch": {
            "Embedding_71": {
                "variable": {
                    "value": "tgt_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_85": {
                "variable": {
                    "value": "gen_func",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.dec_hidden_size, args.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_167": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_259": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_260": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_261": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_262": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_266": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_302": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_303": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_304": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gt_328": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_416": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_417": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_419": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_420": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_507": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(all_input, all_input, input_norm, mask=dec_mask, layer_cache=layer_cache, type='self')",
                            "Call"
                        ],
                        [
                            "self.drop(query) + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_644": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_645": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_647": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_648": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_822": {
                "variable": {
                    "value": "batch_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.size(0)",
                            "Call"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_823": {
                "variable": {
                    "value": "beam_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_824": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "all_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_521": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[:, :-1], attn_masked.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_529": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_894": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "args.dec_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_628": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_777": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_796": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_1002": {
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['encoder']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_1005": {
                "params": {
                    "value": "model.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['decoder']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_473": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_519": {
                "input": {
                    "value": "attn_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn[:, -1] * predefined_graph_1",
                            "BinOp"
                        ],
                        [
                            "attn_masked / (torch.sum(attn_masked, 2).unsqueeze(2) + 1e-09)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_519": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_628": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, -1).transpose(0, 1).repeat(count, 1).transpose(0, 1).contiguous().view(*out_size)",
                            "Call"
                        ],
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bertabs/run_summarization.py": {
        "torch": {
            "SequentialSampler_187": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "CNNDMDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "CNNDMDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "encoded_stories",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[truncate_or_pad(story, block_size, tokenizer.pad_token_id) for (story, _) in encoded_text]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_297": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bertabs/test_utils_summarization.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 23, 23, 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 2, 3, 4, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 101, 5, 6], [1, 101, 3, 4, 101, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/bertabs/utils_summarization.py": {
        "torch": {
            "ones_like_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "data": {
                    "value": "batch_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/summarization/t5/evaluate_cnn.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/transformer_base.py": {
        "torch": {
            "manual_seed_41": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/translation/t5/evaluate_wmt.py": {
        "torch": {
            "device_81": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/examples/utils_multiple_choice.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length), task))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format(mode.value, tokenizer.__class__.__name__, str(max_seq_length), task))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/activations.py": {
        "torch": {
            "sigmoid_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "script_44": {
                "variable": {
                    "value": "gelu_new",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "gelu_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu_new",
                            "Call"
                        ],
                        [
                            "torch.jit.script(gelu_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_22": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_albert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_bart_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_75": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "hub_interface",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "bart.large.cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "bart",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/fairseq",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eq_110": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bart.encode(SAMPLE_TEXT).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tokens2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BartTokenizer.from_pretrained(hf_checkpoint_name).encode(SAMPLE_TEXT, return_tensors='pt').unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_dialogpt_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dialogpt_path, f'{MODEL}_ft.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_19": {
                "obj": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_electra_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_gpt2_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_openai_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_pytorch_checkpoint_to_tf2.py": {
        "torch": {
            "load_371": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(aws_model_maps[pytorch_checkpoint_path], force_download=not use_cached_models)",
                            "Call"
                        ],
                        [
                            "pytorch_checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_roberta_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "max_absolute_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_147": {
                "variable": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "our_output - their_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_t5_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_xlm_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xlm_checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "two_levels_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/convert_xlnet_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/data_collator.py": {
        "torch": {
            "full_123": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_131": {
                "variable": {
                    "value": "masked_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_140": {
                "variable": {
                    "value": "random_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[getattr(f, k) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_109": {
                "sequences": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_135": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_139": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_135": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_139": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/datasets/glue.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_114": {
                "obj": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', tokenizer.__class__.__name__, str(args.max_seq_length), args.task_name))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/data/datasets/language_modeling.py": {
        "torch": {
            "tensor_74": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_bart.py": {
        "torch": {
            "triu_111": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(torch.zeros(tgt_len, tgt_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "lin_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 6, 10, 4, 2], [0, 8, 12, 2, pad_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.encoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_255": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config) for _ in range(config.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_286": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_ffn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_367": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_383": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_393": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_395": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_428": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(config) for _ in range(config.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_478": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_555": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_557": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_617": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(query) * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self._shape(q, tgt_len, bsz)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_634": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_635": {
                "variable": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(reshaped, float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_638": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self._shape(v, -1, bsz)",
                            "Call"
                        ],
                        [
                            "self._use_saved_state(k, v, saved_state, key_padding_mask, static_kv, bsz)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "variable"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_712": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_713": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooler_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_714": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_719": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, key_padding_mask=encoder_padding_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "inputs_embeds + embed_pos",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "encoder_layer(x, attention_mask)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, layer_state=layer_state, key_padding_mask=decoder_padding_mask, attn_mask=causal_mask, need_weights=self.output_attentions)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn(query=x, key=encoder_hidden_states, key_padding_mask=encoder_attn_mask, layer_state=layer_state)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.encoder_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(input_ids) * self.embed_scale",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "decoder_layer(x, encoder_hidden_states, encoder_attn_mask=encoder_padding_mask, decoder_padding_mask=decoder_padding_mask, layer_state=layer_state, causal_mask=decoder_causal_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_753": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_760": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_788": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.pad_token_id",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_926": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.model.shared.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_929": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_1060": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, self.config.num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_658": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_688": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_691": {
                "variable": {
                    "value": "filler",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_697": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler, key_padding_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_1053": {
                "input": {
                    "value": "eos_mask.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input_ids.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input_ids.size()",
                            "Call"
                        ],
                        [
                            "query.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_ctrl.py": {
        "torch": {
            "sin_49": {
                "variable": {
                    "value": "sines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sines, cosines]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / np.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask[ns - nd:ns, :ns] * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((past_value, v), dim=-2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "torch.nn.Linear(d_model_size, dff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_145": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_274": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_277": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop, config.output_attentions) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_283": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_413": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(seq_len + past_length, seq_len + past_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2 * (i // 2) / d_model_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dff",
                            "Method Argument"
                        ],
                        [
                            "dff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ],
                        [
                            "d_model_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_376": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_563": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_413": {
                "*size": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len + past_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_distilbert.py": {
        "torch": {
            "Embedding_64": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_225": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_485": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_490": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_564": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_565": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_566": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_645": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_746": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_460": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_726": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_801": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_180": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_623": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_626": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_806": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_807": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_encoder_decoder.py": {
        "torch": {}
    },
    "methods/T5/transformer_local/src/transformers/modeling_flaubert.py": {
        "torch": {
            "dropout_226": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor_normalized)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_192": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_mmbt.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.proj_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.modal_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "embedding_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modal_embeddings, txt_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_317": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeds.unsqueeze(1), token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embeddings, end_token_embeds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_modal.size(0), seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_236": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_244": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device), encoder_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_360": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_363": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "input_modal_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(names, init_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_143": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "index_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_235": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_237": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_335": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_336": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_337": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_338": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_475": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_573": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_407": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_552": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_668": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_674": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_127": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_172": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_149": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_ctx",
                            "Method Argument"
                        ],
                        [
                            "n_ctx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_roberta.py": {
        "torch": {
            "Embedding_51": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_477": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_576": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_597": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_240": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_455": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_547": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_691": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_353": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_552": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_51": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_74": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_77": {
                "variable": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[..., :-1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden.view(-1, hidden.size(-1))",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_78": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_140": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_232": {
                "variable": {
                    "value": "head_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[..., 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_208": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "d_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_token",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "weight_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "bias_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_244": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_115": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_utils.py": {
        "torch": {
            "Linear_2046": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_377": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "new_num_tokens",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1292": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1530": {
                "variable": {
                    "value": "all_but_token_ids_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x for x in range(self.config.vocab_size) if x not in token_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1619": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_1620": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1694": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1696": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1697": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1701": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1711": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1736": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1737": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1738": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1739": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1782": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1783": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1784": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_1967": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1978": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1982": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_313": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_978": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ],
                        [
                            "bos_token_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1056": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "decoder_start_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_start_token_id if decoder_start_token_id is not None else self.config.decoder_start_token_id",
                            "IfExp"
                        ],
                        [
                            "bos_token_id",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "decoder_start_token_id",
                            "Method Argument"
                        ],
                        [
                            "decoder_start_token_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1070": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1220": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1325": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1455": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_tokens.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1522": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1890": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1909": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1911": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1915": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1923": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1925": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1931": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1973": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_1980": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1984": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_2028": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_446": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_621": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_1207": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1208": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1208": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1211": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1236": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1367": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1368": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1370": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ],
                        [
                            "torch.topk(next_scores, 2 * num_beams, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_1372": {
                "variable": {
                    "value": "(next_scores, next_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "torch.sort(next_scores, descending=True, dim=1)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.topk(next_scores, 2 * num_beams, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1373": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ],
                        [
                            "torch.topk(next_scores, 2 * num_beams, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(next_scores, descending=True, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_1383": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ],
                        [
                            "torch.sort(next_scores, descending=True, dim=1)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.topk(next_scores, 2 * num_beams, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1462": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1620": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(logits, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1697": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1763": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1817": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1898": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1976": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Call"
                        ]
                    ]
                }
            },
            "all_1478": {
                "input": {
                    "value": "next_scores[batch_idx, :num_beams] == beam_scores.view(batch_size, num_beams)[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "topk_1615": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_like_2001": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/modeling_xlm.py": {
        "torch": {
            "arange_63": {
                "variable": {
                    "value": "alen",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "inputs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "attns_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_349": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_355": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_360": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_361": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_504": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_618": {
                "variable": {
                    "value": "mask_token",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mask_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.mask_token_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, mask_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_804": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1040": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1041": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "langs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_353": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_470": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "slen",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_519": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_567": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_569": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "config.emb_dim",
                            "Attribute"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_like_621": {
                "variable": {
                    "value": "langs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([input_ids, mask_token], dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "lang_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.lang_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_901": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1108": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_585": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.n_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_784": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_787": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1113": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mask.view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(loss_fct.ignore_index).type_as(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_368": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_373": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1114": {
                "data": {
                    "value": "loss_fct.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/optimization.py": {
        "torch": {
            "LambdaLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_44": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_59": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_74": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LambdaLR_93": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ],
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_668": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_743": {
                "variable": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_209": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "vocab_path",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_245": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_765": {
                "obj": {
                    "value": "corpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/trainer.py": {
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_146": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.args.logging_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(self.train_dataset) if self.args.local_rank == -1 else DistributedSampler(self.train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "dataset": {
                    "value": "eval_dataset if eval_dataset is not None else self.eval_dataset",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.data_collator.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(self.model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_254": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=self.args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.args.local_rank], output_device=self.args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(self.model)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_432": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_511": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_160": {
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_160": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_238": {
                "f": {
                    "value": "os.path.join(model_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_239": {
                "f": {
                    "value": "os.path.join(model_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__322": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__324": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_365": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/src/transformers/training_args.py": {
        "torch": {
            "device_99": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_105": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/templates/adding_a_new_example_script/run_xxx.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_122": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_337": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_366": {
                "variable": {
                    "value": "all_example_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_367": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_373": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_582": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_586": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_231": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_231": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_585": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_672": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__177": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/templates/adding_a_new_model/convert_xxx_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pytorch_dump_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_activations.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_18": {
                "input": {
                    "value": "_gelu_python(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_builtin(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_19": {
                "input": {
                    "value": "_gelu_python(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "gelu_new(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_bart.py": {
        "torch": {
            "zeros_like_159": {
                "variable": {
                    "value": "useless_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_attn_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prepare_bart_decoder_inputs(config, inputs_dict['input_ids'])",
                            "Call"
                        ],
                        [
                            "_prepare_bart_decoder_inputs(config, input_ids, decoder_input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[9.0078, 10.1113, 14.4787]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[71, 82, 18, 33, 46, 91, 2], [68, 34, 26, 58, 30, 82, 2], [5, 97, 17, 39, 94, 40, 2], [76, 83, 94, 25, 70, 78, 2], [87, 59, 41, 35, 48, 66, 2], [55, 13, 16, 58, 5, 2, 1], [64, 27, 31, 51, 12, 75, 2], [52, 64, 86, 17, 83, 39, 2], [48, 61, 9, 24, 71, 82, 2], [26, 1, 60, 48, 22, 13, 2], [21, 5, 62, 28, 14, 76, 2], [45, 98, 37, 86, 59, 48, 2], [70, 70, 50, 9, 28, 0, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_382": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_383": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_389": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_420": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "variable": {
                    "value": "expected_causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, ignore, ignore], [0, 0, ignore], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_512": {
                "data": {
                    "value": "tok_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tok_lst",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_529": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_549": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_501": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "atol": {
                    "value": "atol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_243": {
                "input": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([9.0078, 10.1113, 14.4787])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]], device=torch_device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[0.1907, 1.4342, -1.0289]]).to(torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[0][0][:3]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "TOLERANCE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "eq_426": {
                "input": {
                    "value": "shifted[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_433": {},
            "Tensor_434": {},
            "eq_477": {
                "input": {
                    "value": "expected_causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, ignore, ignore], [0, 0, ignore], [0, 0, 0]]).to(input_ids.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prepare_bart_decoder_inputs(config, inputs_dict['input_ids'])",
                            "Call"
                        ],
                        [
                            "_prepare_bart_decoder_inputs(config, input_ids, decoder_input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_487": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_embs(model)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_embs(model)",
                            "Call"
                        ],
                        [
                            "model(**inputs_dict)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_493": {
                "input": {
                    "value": "input_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_embs(model)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_embs(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_532": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([9.0078, 10.1113, 14.4787])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]], device=torch_device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[0.1907, 1.4342, -1.0289]]).to(torch_device)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "TOLERANCE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "no_grad_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "std_139": {
                "input": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_camembert.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 121, 11, 660, 16, 730, 25543, 110, 83, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[-0.0254, 0.0235, 0.1027], [0.0606, -0.1811, -0.0418], [-0.1561, -0.1127, 0.2687]]], device=torch_device, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_common.py": {
        "torch": {
            "tensor_747": {
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_763": {
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_795": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[8.2220991, -0.5620044, 5.23229752, 4.0386393, -6.8798378, -0.54785802, -3.2012153, 2.92777176, 1.88171953, 7.35341276, 8.43207833, -9.85711836, -5.96209236, -1.13039161, -7.1115294, -0.8369633, -5.3186408, 7.06427407, 0.81369344, -0.82023817, -5.9179796, 0.58813443, -6.99778438, 4.71551189, -0.18771637, 7.44020759, 9.38450987, 2.12662941, -9.32562038, 2.35652522], [0.58425518, 4.53139238, -5.57510464, -6.28030699, -7.19529503, -4.02122551, 1.39337037, -6.06707057, 1.59480517, -9.643119, 0.03907799, 0.67231762, -8.88206726, 6.27115922, 2.28520723, 4.82767506, 4.30421368, 8.8275313, 5.44029958, -4.4735794, 7.38579536, -2.91051663, 2.61946077, -2.5674762, -9.48959302, -4.02922645, -1.35416918, 9.67702323, -5.89478553, 1.85370467]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_866": {
                "variable": {
                    "value": "non_inf_expected_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_872": {
                "variable": {
                    "value": "non_inf_expected_output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8.2221, 7.3534, 8.4321, 7.4402, 9.3845, 6.2712, 8.8275, 5.4403, 7.3858, 9.677]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_266": {
                "variable": {
                    "value": "head_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model_tester.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_tester.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_212": {
                "variable": {
                    "value": "traced_gpt2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(tmpdirname)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name, output_loading_info=True)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_loading_info=True)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "allclose_893": {
                "input": {
                    "value": "non_inf_expected_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([8.2221, 7.3534, 8.4321, 7.4402, 9.3845, 6.2712, 8.8275, 5.4403, 7.3858, 9.677], dtype=torch.float, device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "non_inf_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[output != -float('inf')].to(device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_894": {
                "input": {
                    "value": "torch.eq(non_inf_expected_idx, non_inf_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_225": {
                "variable": {
                    "value": "loaded_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_525": {
                "num_embeddings": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_894": {
                "input": {
                    "value": "non_inf_expected_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0], [0, 9], [0, 10], [0, 25], [0, 26], [1, 13], [1, 17], [1, 18], [1, 20], [1, 27]], dtype=torch.long, device=torch_device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "non_inf_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(output != -float('inf')).nonzero().to(device=torch_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "traced_gpt2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_288": {
                "input": {
                    "value": "torch.isnan(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_291": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions",
                            "variable"
                        ]
                    ]
                }
            },
            "isnan_288": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attentions",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_ctrl.py": {
        "torch": {
            "tensor_222": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[11859, 0, 1611, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_gpt2.py": {
        "torch": {
            "tensor_346": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[464, 3290]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[464, 1893]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "next_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_type_ids, next_token_types]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_208": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_198": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_239": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_226": {
                "*size": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_openai.py": {
        "torch": {
            "tensor_230": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[481, 4735, 544]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_roberta.py": {
        "torch": {
            "as_tensor_290": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12, 31, 13, model.padding_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_291": {
                "variable": {
                    "value": "expected_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_309": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_316": {
                "variable": {
                    "value": "expected_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[expected_single_positions, expected_single_positions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_297": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_319": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_340": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_357": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[33.8802, -4.3103, 22.7761], [4.6539, -2.8098, 13.6253], [1.8228, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.054, -0.0175], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_373": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.9469, 0.3913, 0.5118]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eq_297": {
                "input": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_position_ids_from_input_ids(input_ids, model.padding_idx)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_319": {
                "input": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_position_ids_from_input_ids(input_ids, model.padding_idx)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_t5.py": {
        "torch": {
            "tril_142": {
                "variable": {
                    "value": "triangular_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_labels.new_ones(lm_labels.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_142": {
                "variable": {
                    "value": "triangular_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_257": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "next_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_193": {
                "input": {
                    "value": "decoder_past[0][0] == encoder_output",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_247": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_291": {
                "input": {
                    "value": "output_from_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_past[:, 0, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_from_no_past_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ],
                        [
                            "output_from_no_past[:, -1, random_slice_idx].detach()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_305": {
                "input": {
                    "value": "output_with_past_cache == output_without_past_cache",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "(attn_mask.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_transfo_xl.py": {
        "torch": {
            "tensor_221": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[33, 1297, 2, 1, 1009, 4, 1109, 11739, 4762, 358, 5, 25, 245, 22, 1706, 17, 20098, 5, 3215, 21, 37, 1110, 3, 13, 1041, 4, 24, 603, 490, 2, 71477, 20098, 104447, 2, 20961, 1, 2604, 4, 1, 329, 3, 6224, 831, 16002, 2, 8, 603, 78967, 29546, 23, 803, 20, 25, 416, 5, 8, 232, 4, 277, 6, 1855, 4601, 3, 29546, 54, 8, 3609, 5, 57211, 49, 4, 1, 277, 18, 8, 1755, 15691, 3, 341, 25, 416, 693, 42573, 71, 17, 401, 94, 31, 17919, 2, 29546, 7873, 18, 1, 435, 23, 11011, 755, 5, 5167, 3, 7983, 98, 84, 2, 29546, 3267, 8, 3609, 4, 1, 4865, 1075, 2, 6087, 71, 6, 346, 8, 5854, 3, 29546, 824, 1400, 1868, 2, 19, 160, 2, 311, 8, 5496, 2, 20920, 17, 25, 15097, 3, 24, 24, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_xlm.py": {
        "torch": {
            "tensor_437": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[14, 447]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_xlm_roberta.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 581, 10269, 83, 99942, 136, 60742, 23, 70, 80583, 18276, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "expected_output_values_last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 581, 10269, 83, 99942, 136, 60742, 23, 70, 80583, 18276, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "expected_output_values_last_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_47": {
                "input": {
                    "value": "output[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_output_values_last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_66": {
                "input": {
                    "value": "output[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_output_values_last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-0.0101, 0.1218, -0.0803, 0.0801, 0.1327, 0.0776, -0.1215, 0.2383, 0.3338, 0.3106, 0.03, 0.0252]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-0.0699, -0.0318, 0.0705, -0.1241, 0.0999, -0.052, 0.1004, -0.1838, -0.4704, 0.1437, 0.0821, 0.0126]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_modeling_xlnet.py": {
        "torch": {
            "tensor_520": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[67, 2840, 19, 18, 1484, 20, 965, 29077, 8719, 1273, 21, 45, 273, 17, 10, 15048, 28, 27511, 21, 4185, 11, 41, 2444, 9, 32, 1025, 20, 8719, 26, 23, 673, 966, 19, 29077, 20643, 27511, 20822, 20643, 19, 17, 6616, 17511, 18, 8978, 20, 18, 777, 9, 19233, 1527, 17669, 19, 24, 673, 17, 28756, 150, 12943, 4354, 153, 27, 442, 37, 45, 668, 21, 24, 256, 20, 416, 22, 2771, 4901, 9, 12943, 4354, 153, 51, 24, 3004, 21, 28142, 23, 65, 20, 18, 416, 34, 24, 2958, 22947, 9, 1177, 45, 668, 3097, 13768, 23, 103, 28, 441, 148, 48, 20522, 19, 12943, 4354, 153, 12860, 34, 18, 326, 27, 17492, 684, 21, 6709, 9, 8585, 123, 266, 19, 12943, 4354, 153, 6872, 24, 3004, 20, 18, 9225, 2198, 19, 12717, 103, 22, 401, 24, 6348, 9, 12943, 4354, 153, 1068, 2768, 2286, 19, 33, 104, 19, 176, 24, 9313, 19, 20086, 28, 45, 10292, 9, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "perm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "target_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_optimization.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/T5/transformer_local/tests/test_trainer.py": {
        "torch": {}
    },
    "methods/UniLM_v2/unilm/layoutlm/modeling_layoutlm.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.x_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.y_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.h_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.w_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_2d_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_230": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_307": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_145": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_147": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_265": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_345": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_348": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/layoutlm/run_classification.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "all_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.bboxes for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_452": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_93": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "'_' + os.path.basename(args.output_dir)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_408": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_701": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_706": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_709": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_97": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_708": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_815": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_322": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_324": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_433": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_705": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__232": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/layoutlm/run_seq_labeling.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.boxes for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_450": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_414": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_675": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_679": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_682": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_97": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_315": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_317": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_678": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and (not args.no_cuda) else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_681": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_771": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_438": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, labels, args.max_seq_length, tokenizer, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0, pad_token_label_id=pad_token_label_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__234": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__238": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/layoutlm/utils_classification.py": {
        "torch": {
            "manual_seed_375": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_377": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/minilm/examples/run_xnli.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_378": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_84": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_131": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_271": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_538": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_542": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_276": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_541": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_627": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__206": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__208": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/decode_seq2seq.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_135": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_202": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(model_recover_path, config=config, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_150": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/new_decode_seq2seq.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_135": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_203": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(model_recover_path, config=config, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_150": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/run_seq2seq.py": {
        "torch": {
            "DataParallel_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "prepare_for_training(args, model, checkpoint_state_dict, amp=amp)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "get_model_and_tokenizer(args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "prepare_for_training(args, model, checkpoint_state_dict, amp=amp)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "get_model_and_tokenizer(args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_80": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset, shuffle=False)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "per_node_train_batch_size // args.gradient_accumulation_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_336": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_337": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_340": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_339": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_357": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_157": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_158": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__198": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/s2s_ft/convert_state_dict.py": {
        "torch": {
            "load_36": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/s2s_ft/modeling.py": {
        "torch": {
            "Embedding_153": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_444": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_475": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_479": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.transform(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.linear(hidden_states, weight=self.decoder_weight, bias=self.bias)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.decoder_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_500": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_516": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "num_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(source_position_ids), target_span_ids, -target_span_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_ids, target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(source_ids) * self.source_type_id, torch.ones_like(target_ids) * self.target_type_id, torch.ones_like(pseudo_ids) * self.target_type_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_position_ids, target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_156": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_174": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_259": {
                "variable": {
                    "value": "query_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_260": {
                "variable": {
                    "value": "key_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.key(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_261": {
                "variable": {
                    "value": "value_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_396": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "kl_div_463": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.float().repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_463": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_512": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_230": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.multi_head_attention(mixed_query_layer, mixed_key_layer, mixed_value_layer, attention_mask)",
                            "Call"
                        ],
                        [
                            "(torch.cat(outputs, dim=1),)",
                            "Tuple"
                        ],
                        [
                            "(attention_output,) + self_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(layer_output,) + self_attention_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(hidden_states,)",
                            "Tuple"
                        ],
                        [
                            "outputs + (all_hidden_states,)",
                            "BinOp"
                        ],
                        [
                            "outputs + (all_attentions,)",
                            "BinOp"
                        ],
                        [
                            "(sequence_output,) + encoder_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "self.bert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, split_lengths=split_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_526": {
                "input": {
                    "value": "source_position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_mask_and_position_ids(num_source_tokens, source_len)",
                            "Call"
                        ],
                        [
                            "source_position_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_572": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_579": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "kwargs[state_dict]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_name_or_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_model_name_or_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_121": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_268": {
                "tensors": {
                    "value": "(key, _key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(value, _value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_548": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_549": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_550": {
                "input": {
                    "value": "pseudo_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_137": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_530": {
                "tensors": {
                    "value": "(source_mask, target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/s2s_ft/modeling_decoding.py": {
        "torch": {
            "full_45": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ger_245": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_260": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_276": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_338": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_413": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_442": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ],
                        [
                            "torch.cat((value_history, value_layer), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_459": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_461": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_503": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_524": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_567": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_606": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_607": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_647": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_710": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1021": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1027": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1038": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1066": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_1238": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "token_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1246": {
                "variable": {
                    "value": "target_pos_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_target_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1255": {
                "variable": {
                    "value": "golden_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask, torch.zeros_like(triangle_attention_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1257": {
                "variable": {
                    "value": "pseudo_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask - diagonal_attention_mask, diagonal_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1276": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_mask.unsqueeze(1).expand(-1, target_ids.size(1) * 2, -1), extend_target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1279": {
                "variable": {
                    "value": "target_input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1280": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids",
                            "Method Argument"
                        ],
                        [
                            "target_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1281": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_segment_ids, target_segment_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1283": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "target_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1285": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1326": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1345": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls2(sequence_output_masked_2, None)",
                            "Call"
                        ],
                        [
                            "self.cls2(sequence_output_masked_2, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1363": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1364": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "kl_div_64": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_265": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_287": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_291": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_346": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_348": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_386": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.intermediate_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, history_states=history_states, mask_qkv=mask_qkv, seg_ids=seg_ids)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, mask_qkv=mask_qkv, seg_ids=seg_ids, key_history=set_key, value_history=set_value)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform(self.type_converter(hidden_states))",
                            "Call"
                        ],
                        [
                            "hidden_states.view(num_batch, num_pos, self.relax_projection, -1)[torch.arange(0, num_batch).long(), :, task_idx, :]",
                            "Subscript"
                        ],
                        [
                            "F.linear(self.type_converter(hidden_states), self.type_converter(self.decoder.weight), self.type_converter(self.bias))",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states) + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pair_x, pair_y], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_392": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((history_states, hidden_states), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "key_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key_history, key_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(value_history, value_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_421": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_677": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_787": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_878": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_880": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1007": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1048": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1062": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1070": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1096": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1141": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1234": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_1427": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1456": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1510": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1516": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1597": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_91": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_224": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_431": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_647": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1135": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1260": {
                "tensors": {
                    "value": "(golden_attention_mask, pseudo_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1270": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1286": {
                "tensors": {
                    "value": "(target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1338": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1414": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1496": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1518": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1519": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "pos.size(0)",
                            "Call"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1520": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1522": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1524": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1527": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1528": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "div_1529": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1530": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1531": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1540": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1543": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1551": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1558": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1559": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_344": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1120": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1152": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_1173": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1255": {
                "input": {
                    "value": "triangle_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_pos_matrix.view(1, max_target_len, 1) >= target_pos_matrix.view(1, 1, max_target_len)",
                            "Compare"
                        ],
                        [
                            "triangle_attention_mask.type_as(target_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1305": {
                "input": {
                    "value": "prediction_scores_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(target_sequence_output[:, target_ids.size(1):, :], target_pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1305": {
                "index": {
                    "value": "target_ids.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1305": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1310": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1407": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1434": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1445": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1489": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1534": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1555": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1568": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1584": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_224": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_241": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_300": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_675": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1298": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1656": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1658": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).to(input_ids.device)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1726": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1439": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1451": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1576": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1592": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/s2s_ft/s2s_loader.py": {
        "torch": {
            "tril_85": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_25": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/s2s-ft/s2s_ft/utils.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_features_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_154": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_features_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_99": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/biunilm/decode_seq2seq.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_128": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_recover_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(args.model_recover_path.strip())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_134": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_185": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(args.bert_model, state_dict=model_recover, num_labels=cls_num_labels, num_rel=pair_num_relation, type_vocab_size=type_vocab_size, task_idx=3, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, not_predict_set=not_predict_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, ffn_type=args.ffn_type, num_qkv=args.num_qkv, seg_emb=args.seg_emb, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/biunilm/loader_utils.py": {
        "torch": {
            "stack_20": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_22": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/biunilm/run_seq2seq.py": {
        "torch": {
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_235": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_238": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "args.train_batch_size // dist.get_world_size()",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset, replacement=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "seq2seq_loader.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_396": {
                "variable": {
                    "value": "optim_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'optim.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_237": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_256": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_290": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_326": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'model.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_334": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_recover_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_473": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'model.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_476": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_optim_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'optim.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/biunilm/seq2seq_loader.py": {
        "torch": {
            "tril_119": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_327": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/nn/data_parallel.py": {
        "torch": {
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/pytorch_pretrained_bert/loss.py": {
        "torch": {
            "full_29": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kl_div_48": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/pytorch_pretrained_bert/modeling.py": {
        "torch": {
            "ger_193": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_208": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_210": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_221": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_280": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_367": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_418": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_420": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_482": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_514": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_554": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_604": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_616": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1145": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1151": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1162": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1190": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_1347": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1364": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls2(sequence_output_masked_2, None)",
                            "Call"
                        ],
                        [
                            "self.cls2(sequence_output_masked_2, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1381": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1382": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_1934": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1935": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_2009": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2010": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_2081": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2082": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_2167": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_232": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_346": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_583": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_767": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1008": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_1010": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1131": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1172": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1186": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1194": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1220": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1263": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1449": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1478": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1531": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1540": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1621": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1812": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1876": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2024": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2092": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2189": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_47": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_356": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_554": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1257": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1357": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1433": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1518": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1542": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1543": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.size(0)",
                            "Call"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1544": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1546": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1548": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1551": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1552": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "div_1553": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1554": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1555": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1564": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1567": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1575": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1582": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1583": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1946": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1243": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1274": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_1295": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1426": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1456": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1467": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1511": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1558": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1579": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1592": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1608": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1950": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_246": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_581": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1679": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1681": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1749": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1461": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1473": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1600": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1616": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/UniLM_v2/unilm/unilm-v1/src/pytorch_pretrained_bert/optimization.py": {
        "torch": {
            "cos_32": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__143": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__239": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/eval_lm.py": {
        "torch": {
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/generate.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/generate_backup.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/interactive.py": {
        "torch": {
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/interactive_with_constraints.py": {
        "torch": {
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/scripts/average_checkpoints.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/scripts/wav2vec_featurize.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(labels)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/setup.py": {
        "torch": {}
    },
    "methods/const-levt/constrained-levt/train.py": {
        "torch": {
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_42": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/const-levt/constrained-levt/validate.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/eval_lm.py": {
        "torch": {
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/fairseq_cli/eval_lm.py": {
        "torch": {
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/fairseq_cli/generate.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/fairseq_cli/interactive.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/fairseq_cli/setup.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/fairseq_cli/train.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/generate.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/interactive.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/scripts/average_checkpoints.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state",
                            "variable"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/scripts/wav2vec_featurize.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(labels)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/setup.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/speech_recognition/asr_test_base.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "encoder_out[encoder_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*encoder_out_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_484": {
                "input": {
                    "value": "torch.div(net_output['encoder_out'], 1 - net_output['encoder_out'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_541": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(low=0, high=K, size=token_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_485": {
                "input": {
                    "value": "net_output['encoder_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - net_output['encoder_out']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_313": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_314": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_382": {
                "obj": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_549": {
                "data": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/speech_recognition/test_collaters.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [pad_idx, pad_idx]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[eos_idx, 3, 2, pad_idx], [eos_idx, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[3, 2, eos_idx, pad_idx], [4, 2, 3, eos_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_average_checkpoints.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.FC2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.FC2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_0)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkstemp()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'model': m.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'm1.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm2.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm3.pt')",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_114": {
                "input": {
                    "value": "new_model['model']['embedding.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.embedding.weight + m2.embedding.weight + m3.embedding.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_123": {
                "input": {
                    "value": "new_model['model']['FC1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC1.weight + m2.FC1.weight + m3.FC1.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_132": {
                "input": {
                    "value": "new_model['model']['FC2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC2.weight + m2.FC2.weight + m3.FC2.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_backtranslation_dataset.py": {
        "torch": {
            "is_available_30": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "backtranslation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BacktranslationDataset(tgt_dataset=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), remove_eos_from_src=remove_eos_from_input_src), src_dict=self.tgt_dict, backtranslation_fn=lambda sample: generator.generate([self.model], sample), output_collater=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), append_eos_to_tgt=remove_eos_from_input_src, remove_eos_from_src=remove_eos_from_output_src).collater, cuda=self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "backtranslation_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_binaries.py": {
        "torch": {
            "rand_555": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_556": {
                "input": {
                    "value": "26 * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_574": {
                "variable": {
                    "value": "src_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_575": {
                "variable": {
                    "value": "tgt_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * tgt_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_574": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_575": {
                "*size": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_bmuf.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank in range(args.distributed_world_size)",
                            "Call"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(results, param.flatten().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_character_token_embedder.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/test_concat_dataset.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/test_convtbc.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "conv1d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "input_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "grad_tbc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_tbc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_dictionary.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/test_label_smoothing.py": {
        "torch": {
            "unsqueeze_41": {
                "variable": {
                    "value": "self.args.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_memory_efficient_fp16.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_55": {
                "obj": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_45": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_multi_corpus_sampled_dataset.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/test_multihead_attention.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[[0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[0, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_49": {
                "input": {
                    "value": "torch.eq(key_padding_mask, c[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_49": {
                "input": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiheadAttention._append_prev_key_padding_mask(c[0], c[1], batch_size=bsz, src_len=src_len, static_kv=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_noising.py": {
        "torch": {
            "DataLoader_440": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "language_pair_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LanguagePairDataset(src=noising_dataset, tgt=tgt, src_sizes=None, src_dict=src_dict)",
                            "Call"
                        ],
                        [
                            "TransformEosDataset(language_pair_dataset, src_dict.eos(), append_eos_to_tgt=append_eos_to_tgt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "language_pair_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_454": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_491": {
                "variable": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=True)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "self._get_test_data_with_bpe_cont_marker(append_eos=False)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_sequence_generator.py": {
        "torch": {
            "log_22": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_354": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_sequence_scorer.py": {
        "torch": {
            "log_97": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_sparse_multihead_attention.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_27": {
                "input": {
                    "value": "torch.eq(bidirectional_attention_sparse_mask, bidirectional_sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_44": {
                "input": {
                    "value": "torch.eq(attention_sparse_mask, sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_27": {
                "input": {
                    "value": "bidirectional_attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional_attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bidirectional_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_44": {
                "input": {
                    "value": "attention_sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sparse_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_token_block_dataset.py": {
        "torch": {
            "tensor_24": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/tests/test_train.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/test_utils.py": {
        "torch": {}
    },
    "methods/fairseq_based/fairseq_local/tests/utils.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda samples: collate(samples, padding_idx, eos_idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rand_220": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/train.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/fairseq_based/fairseq_local/validate.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/bin/preprocess.py": {
        "torch": {
            "save_219": {
                "obj": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_fields_vocab(fields, counters, opt.data_type, opt.share_vocab, opt.vocab_size_multiple, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab_size, opt.tgt_words_min_frequency)",
                            "Call"
                        ],
                        [
                            "existing_fields",
                            "variable"
                        ],
                        [
                            "inputters.build_vocab(train_dataset, fields, opt.data_type, opt.share_vocab, opt.src_vocab, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab, opt.tgt_vocab_size, opt.tgt_words_min_frequency, vocab_size_multiple=opt.vocab_size_multiple)",
                            "Call"
                        ],
                        [
                            "inputters.get_fields(opt.data_type, src_nfeats, tgt_nfeats, dynamic_dict=opt.dynamic_dict, src_truncate=opt.src_seq_length_trunc, tgt_truncate=opt.tgt_seq_length_trunc)",
                            "Call"
                        ],
                        [
                            "fields",
                            "Method Argument"
                        ],
                        [
                            "fields",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "vocab_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ],
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_235": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_fields_vocab(fields, counters, opt.data_type, opt.share_vocab, opt.vocab_size_multiple, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab_size, opt.tgt_words_min_frequency)",
                            "Call"
                        ],
                        [
                            "existing_fields",
                            "variable"
                        ],
                        [
                            "inputters.build_vocab(train_dataset, fields, opt.data_type, opt.share_vocab, opt.src_vocab, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab, opt.tgt_vocab_size, opt.tgt_words_min_frequency, vocab_size_multiple=opt.vocab_size_multiple)",
                            "Call"
                        ],
                        [
                            "inputters.get_fields(opt.data_type, src_nfeats, tgt_nfeats, dynamic_dict=opt.dynamic_dict, src_truncate=opt.src_seq_length_trunc, tgt_truncate=opt.tgt_seq_length_trunc)",
                            "Call"
                        ],
                        [
                            "fields",
                            "Method Argument"
                        ],
                        [
                            "fields",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "vocab_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ],
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_115": {
                "variable": {
                    "value": "existing_fields",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.src_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/bin/train.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_123": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_121": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_124": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_126": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_118": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id in range(nb_gpu)",
                            "Call"
                        ],
                        [
                            "cycle(enumerate(queues))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/decoders/cnn_decoder.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GatedConv(hidden_size, cnn_kernel_width, dropout, True) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvMultiStepAttention(hidden_size) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cnn_kernel_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.state['previous_input'], tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "new_target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/decoders/decoder.py": {
        "torch": {
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_230": {
                "variable": {
                    "value": "dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_forward_pass(tgt, memory_bank, memory_lengths=memory_lengths)",
                            "Call"
                        ],
                        [
                            "torch.stack(dec_outs)",
                            "Call"
                        ],
                        [
                            "rnn_output",
                            "variable"
                        ],
                        [
                            "self.attn(rnn_output.transpose(0, 1).contiguous(), memory_bank.transpose(0, 1), memory_lengths=memory_lengths)",
                            "Call"
                        ],
                        [
                            "self.context_gate(emb.view(-1, emb.size(2)), rnn_output.view(-1, rnn_output.size(2)), dec_outs.view(-1, dec_outs.size(2)))",
                            "Call"
                        ],
                        [
                            "dec_outs.view(tgt_len, tgt_batch, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "self.dropout(dec_outs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dec_outs + [decoder_output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_389": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t.squeeze(0), input_feed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0:hidden.size(0):2], hidden[1:hidden.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/decoders/ensemble.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.model_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_encoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_encoders",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "model_decoders",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_decoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList(model_decoders)",
                            "Call"
                        ],
                        [
                            "model_decoders",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.model_generators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_generators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_generators",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_101": {
                "variable": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mg(h) if attn is None else mg(h, attn, src_map) for (h, mg) in zip(hidden, self.model_generators)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_71": {
                "variable": {
                    "value": "result[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[key] for attn in attns if attn[key] is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_71": {
                "variable": {
                    "value": "result[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "torch.exp(distributions).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_106": {
                "input": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([mg(h) if attn is None else mg(h, attn, src_map) for (h, mg) in zip(hidden, self.model_generators)])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_106": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/decoders/transformer.py": {
        "torch": {
            "LayerNorm_43": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_44": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout, attention_dropout, self_attn_type=self_attn_type, max_relative_positions=max_relative_positions, aan_useffn=aan_useffn) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_158": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_66": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[tgt_len, tgt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_76": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + future_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "layer_cache[prev_g]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "memory_bank.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/audio_encoder.py": {
        "torch": {
            "Linear_60": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_rnn_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dec_rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_rnn_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.batchnorm_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_rnn_size",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_69": {
                "variable": {
                    "value": "self.pool_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "enc_pooling[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_rnn_size",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_81": {
                "kernel_size": {
                    "value": "enc_pooling[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/cnn_encoder.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/encoder.py": {
        "torch": {}
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/image_encoder.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "image_chanel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout[0] if type(dropout) is list else dropout",
                            "IfExp"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.pos_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(src[:, :, :, :] - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_82": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_89": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.layer3(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_101": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.layer5(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_109": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.layer6(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "row_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "with_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_emb.view(1, pos_emb.size(0), pos_emb.size(1)), inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/mean_encoder.py": {
        "torch": {
            "bmm_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/rnn_encoder.py": {
        "torch": {
            "ModuleList_95": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.total_hidden_dim, self.total_hidden_dim, bias=True) for _ in range(number_of_states)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_108": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(states.view(-1, self.total_hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/encoders/transformer.py": {
        "torch": {
            "LayerNorm_34": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(d_model, heads, d_ff, dropout, attention_dropout, max_relative_positions=max_relative_positions) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_101": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/audio_dataset.py": {
        "torch": {
            "full_175": {
                "variable": {
                    "value": "sounds",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(minibatch), 1, nfft, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(1) for x in minibatch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/dataset_base.py": {
        "torch": {
            "save_154": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/image_dataset.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(2) for t in data])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/inputter.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ],
                        [
                            "_load_vocab(src_vocab_path, 'src', counters, src_words_min_frequency)",
                            "Call"
                        ],
                        [
                            "src_vocab_size",
                            "Method Argument"
                        ],
                        [
                            "src_vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path in enumerate(train_dataset_files)",
                            "Call"
                        ],
                        [
                            "paths",
                            "variable"
                        ],
                        [
                            "paths",
                            "variable"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_636": {
                "variable": {
                    "value": "temp_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.iterables[0]._paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_701": {
                "variable": {
                    "value": "cur_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path in enumerate(train_dataset_files)",
                            "Call"
                        ],
                        [
                            "paths",
                            "variable"
                        ],
                        [
                            "paths",
                            "variable"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_384": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src_vocab_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_vocab_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/text_dataset.py": {
        "torch": {
            "stack_130": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[base_data] + feats",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/inputters/vec_dataset.py": {
        "torch": {
            "full_104": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(minibatch), max_len, nfeats, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0) for x in minibatch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VecSeqField(pad_index=0, include_lengths=True)",
                            "Call"
                        ],
                        [
                            "np.load(vec_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/model_builder.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.models[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_167": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_opt.dec_rnn_size, len(fields['tgt'].base_field.vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogSoftmax_179": {
                "variable": {
                    "value": "gen_func",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_171": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "model_opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(fields['tgt'].base_field.vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/average_attn.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.gating_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_46": {
                "variable": {
                    "value": "triangle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(inputs_len, inputs_len, dtype=torch.float, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_107": {
                "variable": {
                    "value": "(input_gate, forget_gate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gating_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gating_layer(torch.cat((inputs, average_outputs), -1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(input_gate) * inputs + torch.sigmoid(forget_gate) * average_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "inputs_len",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "inputs_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_48": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ],
                        [
                            "inputs_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_49": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inputs_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "input": {
                    "value": "mask.to(inputs.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(inputs, average_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "input": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(gating_outputs, 2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(gating_outputs, 2, dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/conv_multi_step_attention.py": {
        "torch": {
            "transpose_16": {
                "input": {
                    "value": "h.view(batch, length, hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "variable": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_out_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out_top",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(target, encoder_out_top)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pre_attn, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(encoder_out_combine, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(context_output, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "input": {
                    "value": "encoder_out_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out_combine",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, torch.transpose(encoder_out_combine, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(context_output, 3), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/copy_generator.py": {
        "torch": {
            "Linear_91": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_copy(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_125": {
                "variable": {
                    "value": "out_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_copy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_126": {
                "variable": {
                    "value": "mul_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.linear_copy(hidden))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_attn.view(-1, batch, slen).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "align == self.unk_index",
                            "Compare"
                        ],
                        [
                            "non_copy | (target != self.unk_index)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "copy_tok_probs + vocab_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "copy_tok_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.gather(1, copy_ix).squeeze(1)",
                            "Call"
                        ],
                        [
                            "copy_tok_probs + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_257": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-probs.log()",
                            "UnaryOp"
                        ],
                        [
                            "self.criterion(scores, align, target)",
                            "Call"
                        ],
                        [
                            "loss + coverage_loss",
                            "BinOp"
                        ],
                        [
                            "loss.view(-1, batch.batch_size).sum(0)",
                            "Call"
                        ],
                        [
                            "torch.div(loss, tgt_lens).sum()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tgt_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.tgt[:, :, 0].ne(self.padding_idx).sum(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_257": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/embeddings.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_27": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_30": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_31": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vec_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.make_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, word_vec_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_250": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_171": {
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_28": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(emb_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_vec_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vec_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/gate.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings_size + decoder_size + attention_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.source_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ],
                        [
                            "attention_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.target_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_size + decoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_emb, dec_state, attn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_72": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_87": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "(prev_emb, dec_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/global_attention.py": {
        "torch": {
            "Linear_92": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "bmm_194": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(align.view(batch * target_l, source_l), -1)",
                            "Call"
                        ],
                        [
                            "sparsemax(align.view(batch * target_l, source_l), -1)",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, target_l, source_l)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(memory_bank)",
                            "Call"
                        ],
                        [
                            "memory_bank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "concat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear_cover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "wquh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wq + uh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "variable": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(memory_bank)",
                            "Call"
                        ],
                        [
                            "memory_bank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align.view(batch * target_l, source_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_200": {
                "variable": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_out(concat_c).view(batch, target_l, dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(attn_h)",
                            "Call"
                        ],
                        [
                            "attn_h.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_h.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "memory_bank.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "input": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ],
                        [
                            "h_t",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/multi_headed_attn.py": {
        "torch": {
            "Linear_60": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_66": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "query_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "context_original",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "self.linear_values(query)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'], value), dim=2)",
                            "Call"
                        ],
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "layer_cache['memory_values']",
                            "Subscript"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.relative_positions_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_relative_positions * 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'], key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'], value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/position_ffn.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_20": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/sparse_activations.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_32": {
                "variable": {
                    "value": "(input_srt, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_val",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.dim",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_73": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_input - v_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.clone()",
                            "Call"
                        ],
                        [
                            "torch.where(output != 0, grad_input - v_hat, grad_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_97": {
                "input": {
                    "value": "sparsemax(input, self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/sparse_losses.py": {
        "torch": {
            "where_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input > tau_z",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "input ** 2 - tau_z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_36": {
                "variable": {
                    "value": "sparsemax_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - tau_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparsemax_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(input - tau_z, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_31": {
                "input": {
                    "value": "x / 2 - z_k + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/structured_attention.py": {
        "torch": {
            "eye_22": {
                "n": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ne_22": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_23": {
                "input": {
                    "value": "lap.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_37": {
                "input": {
                    "value": "roots_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[b].diag().exp().mul(inv_laplacian.transpose(0, 1)[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/util_class.py": {
        "torch": {
            "cat_30": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(x) for (f, x) in zip(self, inputs_)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/modules/weight_norm.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(namespace, var_name)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_158": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(v.size()) - 2)).expand_as(v) * v",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(v.size()) - 2)).expand_as(v) * v",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_80": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_95": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(namespace, var_name)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ],
                        [
                            "get_vars_maybe_avg(self, ['V', 'g', 'b'], self.training, polyak_decay=self.polyak_decay)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_208": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_238": {
                "input": {
                    "value": "v.transpose(0, 1).contiguous().view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_238": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_127": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_202": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_attention.py": {
        "torch": {
            "randn_25": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_lengths.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "source_lengths.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_lengths.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_audio_dataset.py": {
        "torch": {
            "randint_35": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "params['max_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(params['batch_size'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_47": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_len']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_50": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, 1, nfeats, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "init_case['pad_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "fake_input[b, :, :, :lengths[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, nfeats, lengths[b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_192": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "int(50000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "int(1500000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "(params['nfeats'], lengths[b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, params['max_len'], (params['batch_size'],)).tolist()",
                            "Call"
                        ],
                        [
                            "torch.randint(1, max_len, (bs,))",
                            "Call"
                        ],
                        [
                            "self.pad_inputs(params)",
                            "Call"
                        ],
                        [
                            "self.pad_inputs(params)",
                            "Call"
                        ],
                        [
                            "self.pad_inputs(params)",
                            "Call"
                        ],
                        [
                            "self.numericalize_inputs(init_case, params)",
                            "Call"
                        ],
                        [
                            "self.pad_inputs(params)",
                            "Call"
                        ],
                        [
                            "self.pad_inputs(params)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int)",
                            "Call"
                        ],
                        [
                            "torch.randint(int(50000.0), int(1500000.0), (cls._N_EXAMPLES,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "(cls._N_CHANNELS, lengths[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "float(init_case['pad_index'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_beam.py": {
        "torch": {
            "log_softmax_133": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_183": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_245": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 4, 5, 3, 2, 1]], dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_258": {
                "variable": {
                    "value": "scores_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_289": {
                "variable": {
                    "value": "scores_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_324": {
                "variable": {
                    "value": "scores_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_30": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "full_56": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_68": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "full_93": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "full_144": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_161": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "full_194": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_219": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "[[0, 0, 0, 4, 5, 3, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_248": {
                "*size": {
                    "value": "self.BEAM_SZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_266": {
                "*size": {
                    "value": "self.BEAM_SZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_297": {
                "*size": {
                    "value": "self.BEAM_SZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "data": {
                    "value": "[[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_332": {
                "*size": {
                    "value": "self.BEAM_SZ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[0] + [-float('inf')] * (beam_sz - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[self.BLOCKED_SCORE] * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[self.BLOCKED_SCORE] * (beam_sz - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[self.BLOCKED_SCORE] * (beam_sz - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_beam_search.py": {
        "torch": {
            "log_softmax_223": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_280": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_284": {
                "variable": {
                    "value": "inp_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_371": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 4, 5, 3, 2, 1]], dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_389": {
                "variable": {
                    "value": "scores_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_421": {
                "variable": {
                    "value": "scores_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_460": {
                "variable": {
                    "value": "scores_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_172": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_234": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_260": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_292": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_318": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_367": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.BATCH_SZ * self.BEAM_SZ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "(1, cov.shape[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_45": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_75": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_122": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_135": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_180": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_198": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_229": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_231": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_280": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_287": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "data": {
                    "value": "[[0, 0, 0, 4, 5, 3, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_460": {
                "data": {
                    "value": "[[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_498": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_500": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.BATCH_SZ,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_516": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_518": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.BATCH_SZ,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_42": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "expected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + [-float('inf')] * (beam_sz - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_70": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_72": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_119": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_174": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_copy_generator.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], init_case['input_size'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], params['max_seq_len'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "src_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['max_seq_len'], params['batch_size'], params['n_extra_words'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], init_case['vocab_size'] + n_unique_src_words)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((params['batch_size'] * params['tgt_max_len'], init_case['vocab_size'] + n_unique_src_words))",
                            "Call"
                        ],
                        [
                            "softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dummy_inputs(params, init_case)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_99": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_unique_src_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "int"
                        ]
                    ]
                },
                "size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_101": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "init_case['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "dummy_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_embeddings.py": {
        "torch": {
            "randint_70": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_seq_len']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_seq_len, batch_size, len(voc_sizes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_76": {
                "variable": {
                    "value": "inps[:len_, b, f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "voc_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(len_,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "dummy_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_image_dataset.py": {
        "torch": {
            "randint_50": {
                "variable": {
                    "value": "cls.n_rows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "314",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_51": {
                "variable": {
                    "value": "cls.n_cols",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "314",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_models.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "test_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_44": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Method Argument"
                        ],
                        [
                            "15",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "17",
                            "Method Argument"
                        ],
                        [
                            "17",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_45": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nfft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(sample_rate * window_size / 2) + 1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "37",
                            "Method Argument"
                        ],
                        [
                            "37",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_54": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "test_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "test_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.enc_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "test_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_src, test_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "compare_to",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.src_word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "compare_to",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.src_word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_random_sampling.py": {
        "torch": {
            "log_softmax_118": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_122": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_24": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_49": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_91": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_128": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_157": {
                "variable": {
                    "value": "valid_score_dist_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "variable": {
                    "value": "valid_score_dist_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_162": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_169": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_178": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_192": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 1, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_199": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_209": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 2, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_214": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_229": {
                "variable": {
                    "value": "valid_score_dist_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "valid_score_dist_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_234": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_21": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "expected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_sz, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_47": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_87": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_89": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "[6.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_124": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_242": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_251": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_271": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 1, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_278": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_294": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samp.alive_seq.shape[0], n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_299": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 3, 13]",
                            "List"
                        ],
                        [
                            "[1, 3, 17]",
                            "List"
                        ],
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "[6.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_164": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "[6.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_236": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_structured_attention.py": {
        "torch": {
            "rand_10": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/tests/test_translation_server.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_57": {
                "device": {
                    "value": "torch.device('cuda', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "torch.device('cuda', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_91": {
                "device": {
                    "value": "torch.device('cuda', 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/train_single.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_38": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id",
                            "Method Argument"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/trainer.py": {
        "torch": {
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/beam.py": {
        "torch": {
            "stack_193": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_286": {
                "input": {
                    "value": "beam.attn[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_286": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/beam_search.py": {
        "torch": {
            "zeros_75": {
                "variable": {
                    "value": "self.top_beam_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_81": {
                "variable": {
                    "value": "self.best_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-10000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_84": {
                "variable": {
                    "value": "self._batch_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_85": {
                "variable": {
                    "value": "self._beam_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_95": {
                "variable": {
                    "value": "self.topk_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_97": {
                "variable": {
                    "value": "self.topk_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_99": {
                "variable": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mb_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_seq.index_select(0, self.select_indices), self.topk_ids.view(_B * self.beam_size, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "non_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "non_finished_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "topk_155": {
                "input": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "curr_scores.reshape(_B, self.beam_size * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.topk_scores, self.topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_161": {
                "input": {
                    "value": "self.topk_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_scorer.length_penalty(step + 1, alpha=self.global_scorer.alpha)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_164": {
                "input": {
                    "value": "self.topk_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "self.alive_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_attn, current_attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_180": {
                "variable": {
                    "value": "self._prev_penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/decode_strategy.py": {
        "torch": {
            "full_71": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * parallel_paths, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.bos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "self.is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, parallel_paths]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/penalties.py": {
        "torch": {
            "max_76": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_76": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_71": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/random_sampling.py": {
        "torch": {
            "div_40": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "sampling_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_temp",
                            "Method Argument"
                        ],
                        [
                            "sampling_temp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Multinomial_52": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "total_count": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "self.select_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_101": {
                "variable": {
                    "value": "self.original_batch_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_seq, topk_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_43": {
                "variable": {
                    "value": "(top_values, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "keep_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_topk",
                            "Method Argument"
                        ],
                        [
                            "keep_topk",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_49": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "kth_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_values[:, -1].view([-1, 1])",
                            "Call"
                        ],
                        [
                            "kth_best.repeat([1, logits.shape[1]]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "self.alive_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_attn, attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/translation.py": {
        "torch": {
            "sort_74": {
                "variable": {
                    "value": "(inds, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/translation_server.py": {
        "torch": {
            "set_device_524": {
                "device": {
                    "value": "self.opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/translate/translator.py": {
        "torch": {
            "Tensor_555": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_782": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.current_predictions for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_802": {
                "variable": {
                    "value": "select_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "select_indices_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_148": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self._gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_149": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/cnn_factory.py": {
        "torch": {
            "unsqueeze_15": {
                "input": {
                    "value": "torch.transpose(x, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + conv(x)",
                            "BinOp"
                        ],
                        [
                            "x * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_var.split(int(x_var.size(1) / 2), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/distributed.py": {
        "torch": {}
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/loss.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if onmt.utils.misc.use_gpu(opt) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_205": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_271": {
                "variable": {
                    "value": "covloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "std_attn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_271": {
                "variable": {
                    "value": "covloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_220": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "backward_338": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_field.vocab.stoi[tgt_field.pad_token]",
                            "Subscript"
                        ],
                        [
                            "padding_idx",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_284": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_335": {
                "tensor": {
                    "value": "state[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "shard_size",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/misc.py": {
        "torch": {
            "clamp_99": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-length + 1, 1, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range_mat - range_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_positions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_relative_positions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_37": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_37": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "range_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/optimizers.py": {
        "torch": {
            "SGD_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "opt.adagrad_accumulator_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_418": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__359": {
                "parameters": {
                    "value": "group['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_508": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg_sq_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_C']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "exp_avg_sq_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_R']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_518": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg']",
                            "Subscript"
                        ],
                        [
                            "state['exp_avg']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - beta1_t ** state['step']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_523": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(exp_avg_sq_c, exp_avg_sq_r).div_(torch.sum(exp_avg_sq_r))",
                            "Call"
                        ],
                        [
                            "exp_avg_sq",
                            "variable"
                        ],
                        [
                            "exp_avg_sq_hat",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - beta2_t ** state['step']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_526": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "variable"
                        ],
                        [
                            "torch.div(exp_avg, 1 - beta1_t ** state['step'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_663": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_665": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ],
                        [
                            "self._experimental_reshape(p.data.size())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "state[exp_avg_sq_R]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "variable": {
                    "value": "state[exp_avg_sq_C]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ],
                        [
                            "self._experimental_reshape(p.data.size())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_464": {
                "variable": {
                    "value": "state[exp_avg_sq_hat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ],
                        [
                            "self._experimental_reshape(p.data.size())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_521": {
                "input": {
                    "value": "exp_avg_sq_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_hat']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "exp_avg_sq_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_hat']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_672": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_501": {
                "input": {
                    "value": "torch.mul(grad, grad).add_(group['eps1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_505": {
                "input": {
                    "value": "torch.mul(grad, grad).add_(group['eps1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_509": {
                "input": {
                    "value": "exp_avg_sq_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_R']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_501": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "zip(group['params'], grads_this_group, output_params_this_group)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "zip(group['params'], grads_this_group, output_params_this_group)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mul_505": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "zip(group['params'], grads_this_group, output_params_this_group)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "zip(group['params'], grads_this_group, output_params_this_group)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_70": {
                "params": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseAdam_75": {
                "params": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/parse.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/report_manager.py": {
        "torch": {
            "SummaryWriter_19": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tensorboard_log_dir",
                            "Attribute"
                        ],
                        [
                            "tensorboard_log_dir + datetime.now().strftime('/%b-%d_%H-%M-%S')",
                            "BinOp"
                        ]
                    ]
                },
                "comment": {
                    "value": "Unmt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/rnn_factory.py": {
        "torch": {}
    },
    "methods/opennmt_based/OpenNMT-py/onmt/utils/statistics.py": {
        "torch": {}
    },
    "methods/opennmt_based/OpenNMT-py/tools/average_models.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file in enumerate(model_files)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_42": {
                "obj": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'vocab': vocab, 'opt': opt, 'optim': None, 'generator': avg_generator, 'model': avg_model}",
                            "Dict"
                        ],
                        [
                            "average_models(opt.models)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/tools/create_vocabulary.py": {
        "torch": {
            "load_90": {
                "variable": {
                    "value": "vocabs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.file[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/tools/embeddings_to_torch.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(vocab), dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "tensor[vocab.stoi[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "convert_to_torch_tensor(src_vectors, enc_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.output_file + '.enc.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "convert_to_torch_tensor(tgt_vectors, dec_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dec_output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.output_file + '.dec.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/tools/extract_embeddings.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_39": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/tools/release_model.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_16": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(opt.model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/opennmt_based/OpenNMT-py/tools/vid_feature_extractor.py": {
        "torch": {
            "stack_68": {
                "variable": {
                    "value": "batch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "self.feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.feats, feats[start:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_198": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(feat_queues, range(world_size))",
                            "Call"
                        ],
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_199": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_207": {
                "obj": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fe(images)",
                            "Call"
                        ],
                        [
                            "feats.to('cpu')",
                            "Call"
                        ],
                        [
                            "[f.to('cpu') for f in feats]",
                            "ListComp"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "all_last_seq_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.feats, these_finished_seq_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/biunilm/decode_seq2seq.py": {
        "torch": {
            "device_124": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_recover_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(args.model_recover_path.strip())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(args.bert_model, state_dict=model_recover, num_labels=cls_num_labels, num_rel=pair_num_relation, type_vocab_size=type_vocab_size, task_idx=3, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, ffn_type=args.ffn_type, num_qkv=args.num_qkv, seg_emb=args.seg_emb, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/biunilm/loader_utils.py": {
        "torch": {
            "stack_20": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_22": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/biunilm/run_seq2seq.py": {
        "torch": {
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_235": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_238": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "args.train_batch_size // dist.get_world_size()",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset, replacement=False)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "seq2seq_loader.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_395": {
                "variable": {
                    "value": "optim_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'optim.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_237": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_256": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_290": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_loader.Seq2SeqDataset(fn_src, fn_tgt, args.train_batch_size, data_tokenizer, args.max_seq_length, file_oracle=file_oracle, bi_uni_pipeline=bi_uni_pipeline)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_326": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'model.{0}.bin'.format(recover_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_334": {
                "variable": {
                    "value": "model_recover",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_recover_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_473": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'model.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_476": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_optim_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'optim.{0}.bin'.format(i_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/biunilm/seq2seq_loader.py": {
        "torch": {
            "tril_119": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_327": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/nn/data_parallel.py": {
        "torch": {
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/pytorch_pretrained_bert/loss.py": {
        "torch": {
            "full_29": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kl_div_48": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/pytorch_pretrained_bert/modeling.py": {
        "torch": {
            "ger_193": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_208": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_210": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_221": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_280": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_369": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_382": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_422": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_443": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_484": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_515": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_516": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_535": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_552": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_556": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_606": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_618": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1151": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1157": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1168": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1196": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_1353": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1370": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls2(sequence_output_masked_2, None)",
                            "Call"
                        ],
                        [
                            "self.cls2(sequence_output_masked_2, None, task_idx=task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1387": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1388": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_1933": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1934": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_2008": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2009": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_2080": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_2081": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_2166": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_232": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_325": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.intermediate_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, mask_qkv=mask_qkv, seg_ids=seg_ids)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, history_states=history_states, mask_qkv=mask_qkv, seg_ids=seg_ids)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform(self.type_converter(hidden_states))",
                            "Call"
                        ],
                        [
                            "hidden_states.view(num_batch, num_pos, self.relax_projection, -1)[torch.arange(0, num_batch).long(), :, task_idx, :]",
                            "Subscript"
                        ],
                        [
                            "F.linear(self.type_converter(hidden_states), self.type_converter(self.decoder.weight), self.type_converter(self.bias))",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states) + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pair_x, pair_y], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_331": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((history_states, hidden_states), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_348": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_585": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_773": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1014": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_1016": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1137": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1178": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1192": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1200": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1226": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1269": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1451": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1480": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1533": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output_masked, pooled_output, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(last_hidden, None, task_idx=task_idx)",
                            "Call"
                        ],
                        [
                            "self.cls(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1539": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1620": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1811": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1875": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2023": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2091": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_2188": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_47": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_358": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1263": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1363": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "variable"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1438": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1520": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1541": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1542": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.size(0)",
                            "Call"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1543": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1545": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1547": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1550": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1551": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "div_1552": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1553": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1554": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1566": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1574": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1581": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1582": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1945": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1249": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1280": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_1301": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1431": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1458": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1469": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1513": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1557": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.topk(kk_scores, k=K)",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1578": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1591": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1607": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_1949": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demb",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_246": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_583": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1678": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1680": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1748": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1463": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1475": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1599": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1615": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/unilm_based/unilm/src/pytorch_pretrained_bert/optimization.py": {
        "torch": {
            "cos_32": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__143": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__239": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "zip(group['params'], name)",
                            "Call"
                        ],
                        [
                            "p in enumerate(group['params'])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}