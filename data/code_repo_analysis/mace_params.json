{
    "_data_main/fair_compas_data.py": {
        "sklearn": {
            "scale_104": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[attr]",
                            "Subscript"
                        ],
                        [
                            "[float(v) for v in vals]",
                            "ListComp"
                        ],
                        [
                            "preprocessing.scale(vals)",
                            "Call"
                        ],
                        [
                            "np.reshape(vals, (len(y), -1))",
                            "Call"
                        ],
                        [
                            "lb.transform(vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "LabelBinarizer_108": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "_data_main/process_test_data.py": {
        "sklearn": {}
    },
    "_data_main/process_twomoon_data.py": {
        "sklearn": {
            "make_moons_18": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "25000",
                            "int"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generateFTExplanations.py": {
        "sklearn": {}
    },
    "generateSATExplanations.py": {
        "sklearn": {}
    },
    "loadData.py": {
        "sklearn": {
            "train_test_split_481": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "all_true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "54321",
                            "int"
                        ]
                    ]
                }
            },
            "train_test_split_500": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "all_true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "54321",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "loadModel.py": {
        "sklearn": {
            "DecisionTreeClassifier_64": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_66": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_86": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "y_train.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogisticRegression_70": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPClassifier_72": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "accuracy_score_80": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "y_train.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_81": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "y_test.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_82": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "y_train.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_83": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "dataset_obj.getTrainTestSplit()",
                            "Call"
                        ],
                        [
                            "y_test.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modelConversion.py": {
        "sklearn": {}
    },
    "treeUtils.py": {
        "sklearn": {
            "export_graphviz_111": {
                "variable": {
                    "value": "dot_data",
                    "type": "variable",
                    "possible_values": []
                },
                "decision_tree": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_file": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "feature_names": {
                    "value": "feature_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_names",
                            "Method Argument"
                        ]
                    ]
                },
                "class_names": {
                    "value": "['0', '1']",
                    "type": "List",
                    "possible_values": []
                },
                "filled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "rounded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "special_characters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}