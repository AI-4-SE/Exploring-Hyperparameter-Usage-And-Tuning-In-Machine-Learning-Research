{
    "anomaly.py": {
        "tensorflow": {
            "Adam_22": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CheckpointManager_28": {
                "variable": {
                    "value": "manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_ckpt()",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(step=tf.Variable(1), optimizer=optimizer, net=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'output/MemCAE/cat/checkpoints'",
                            "str"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Checkpoint_27": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "tf.Variable(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(0.001)",
                            "Call"
                        ]
                    ]
                },
                "net": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MemCAE(latent_dim, False, input_image_size, batch_size, 500, optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ae.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Input(shape=input_shape), tf.keras.layers.Reshape(target_shape=(np.prod(input_shape),)), tf.keras.layers.Dense(latent_dim, activation='relu'), tf.keras.layers.Dense(latent_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Input(shape=(latent_dim,)), tf.keras.layers.Dense(latent_dim, activation='relu'), tf.keras.layers.Dense(units=256 * 256 * 3), tf.keras.layers.Reshape(target_shape=input_shape)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_51": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "logpx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_35": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_14": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_15": {
                "target_shape": {
                    "value": "(np.prod(input_shape),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_24": {
                "shape": {
                    "value": "(latent_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "256 * 256 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Reshape_27": {
                "target_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/cae.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=input_shape), tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=128, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=256, kernel_size=4, strides=2, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(latent_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(latent_dim,)), tf.keras.layers.Dense(units=16 * 16 * 32, activation=tf.nn.relu), tf.keras.layers.Reshape(target_shape=(16, 16, 32)), tf.keras.layers.Conv2DTranspose(filters=256, kernel_size=4, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=128, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=64, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=3, kernel_size=3, strides=1, padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_73": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "logpx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_57": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputLayer_14": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_19": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InputLayer_32": {
                "input_shape": {
                    "value": "(latent_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_33": {
                "units": {
                    "value": "16 * 16 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_34": {
                "target_shape": {
                    "value": "(16, 16, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_35": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_38": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_41": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_44": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_48": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/cvae.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=input_shape), tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=128, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=256, kernel_size=4, strides=2, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(latent_dim + latent_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(latent_dim,)), tf.keras.layers.Dense(units=16 * 16 * 32, activation=tf.nn.relu), tf.keras.layers.Reshape(target_shape=(16, 16, 32)), tf.keras.layers.Conv2DTranspose(filters=256, kernel_size=4, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=128, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=64, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=3, kernel_size=3, strides=1, padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_65": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_76": {
                "variable": {
                    "value": "log2pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_85": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_57": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "-0.5 * ((sample - mean) ** 2.0 * tf.exp(-logvar) + logvar + log2pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "raxis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "logpx_z + logpz - logqz_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InputLayer_14": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_19": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "latent_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InputLayer_32": {
                "input_shape": {
                    "value": "(latent_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_33": {
                "units": {
                    "value": "16 * 16 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_34": {
                "target_shape": {
                    "value": "(16, 16, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_35": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_38": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_41": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_44": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_48": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_66": {
                "x": {
                    "value": "logvar * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "x": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/memcae.py": {
        "tensorflow": {
            "run_functions_eagerly_2": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomUniform_18": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Checkpoint_25": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "tf.Variable(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "net": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_39": {
                "variable": {
                    "value": "act1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_normalization(x=conv1, name='bn1')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "act2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_normalization(x=conv2, name='bn2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_51": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_normalization(x=conv3, name='bn3')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "cosim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cosine_sim(x1=z, x2=w_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_67": {
                "variable": {
                    "value": "renorm",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "memory_addr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "addr_num / addr_denum",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "z_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "renorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(memory_addr, 1e-12, 1 - 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_weight(vshape=[1, 1, self.mem_size, c], bias=False, name='memory')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "actt1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bnt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_normalization(x=convt1, name='bnt1')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_82": {
                "variable": {
                    "value": "actt2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bnt2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_normalization(x=convt2, name='bnt2')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_88": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "convt3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d_tr(inputs=actt2, stride=2, padding='SAME', output_shape=[self.batch_size, h, w, c], variables=self.get_weight(vshape=[3, 3, c, 16], transpose=True, name='decode3'))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "mem_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-w_hat * tf.math.log(w_hat + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - x_hat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x2, perm=[0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_num",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(x2, perm=[0, 1, 3, 2]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_denum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_116": {
                "variable": {
                    "value": "bnlayer",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "beta_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "gamma_initializer": {
                    "value": "ones",
                    "type": "str",
                    "possible_values": []
                },
                "moving_mean_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "moving_variance_initializer": {
                    "value": "ones",
                    "type": "str",
                    "possible_values": []
                },
                "renorm_momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_bn' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_30": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_img_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "mse + 0.0002 * mem_ent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_63": {
                "features": {
                    "value": "attention - lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_64": {
                "x": {
                    "value": "attention - lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_96": {
                "x": {
                    "value": "x - x_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.initializer(vshape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_w' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_95": {
                "x": {
                    "value": "w_hat + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.initializer([vshape[-2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_b' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.initializer([vshape[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_b' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/vae.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Input(shape=input_shape), tf.keras.layers.Reshape(target_shape=(np.prod(input_shape),)), tf.keras.layers.Dense(latent_dim, activation='relu'), tf.keras.layers.Dense(latent_dim + latent_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Input(shape=(latent_dim,)), tf.keras.layers.Dense(latent_dim, activation='relu'), tf.keras.layers.Dense(units=256 * 256 * 3), tf.keras.layers.Reshape(target_shape=input_shape)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_39": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_43": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "log2pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_63": {
                "variable": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_35": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "-0.5 * ((sample - mean) ** 2.0 * tf.exp(-logvar) + logvar + log2pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "raxis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "cross_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "logpx_z + logpz - logqz_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_14": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_15": {
                "target_shape": {
                    "value": "(np.prod(input_shape),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "latent_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_24": {
                "shape": {
                    "value": "(latent_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "256 * 256 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Reshape_27": {
                "target_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_44": {
                "x": {
                    "value": "logvar * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_56": {
                "x": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/vpga.py": {
        "tensorflow": {
            "Sequential_18": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=input_shape), tf.keras.layers.Conv2D(filters=32, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=64, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=128, kernel_size=3, strides=2, activation='relu'), tf.keras.layers.Conv2D(filters=256, kernel_size=4, strides=2, activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(latent_dim + latent_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(latent_dim,)), tf.keras.layers.Dense(units=16 * 16 * 32, activation=tf.nn.relu), tf.keras.layers.Reshape(target_shape=(16, 16, 32)), tf.keras.layers.Conv2DTranspose(filters=256, kernel_size=4, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=128, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=64, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu'), tf.keras.layers.Conv2DTranspose(filters=3, kernel_size=3, strides=1, padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(mean, logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_66": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "img_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(x, img_rec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "zn_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(zn_targ, zn_rec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "zh_rec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(zh_targ, zh_rec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_107": {
                "variable": {
                    "value": "z_mu_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sqrt(tf.reduce_mean(tf.square(z_mu), 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "vrec_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.losses.MSE(z_mu_rec / z_mu_norm, z_rec / z_mu_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_58": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(100, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_95": {
                "x": {
                    "value": "0.5 * z_log_sigma_sq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_95": {
                "shape": {
                    "value": "tf.shape(z_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_96": {
                "input": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_107": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(z_mu), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "0.5 * (1 + z_log_sigma_sq - z_mu ** 2 - tf.exp(z_log_sigma_sq))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InputLayer_20": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_23": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_27": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_31": {
                "units": {
                    "value": "latent_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InputLayer_37": {
                "input_shape": {
                    "value": "(latent_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "16 * 16 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_39": {
                "target_shape": {
                    "value": "(16, 16, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_40": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_42": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_44": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_46": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_49": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_67": {
                "x": {
                    "value": "logvar * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_89": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_95": {
                "input": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_98": {
                "input": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "tf.square(z_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_99": {
                "input": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_107": {
                "x": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_111": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.enc_dec(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "preprocessing.py": {
        "tensorflow": {
            "ImageDataGenerator_107": {
                "variable": {
                    "value": "image_gen",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "CallbackList_95": {
                "variable": {
                    "value": "TC",
                    "type": "variable",
                    "possible_values": []
                },
                "callbacks": {
                    "value": "callback_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.keras.callbacks.TensorBoard(log_dir=log_dir)]",
                            "List"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "create_file_writer_98": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir + '/gradient_tape/' + model.architecture + '_' + class_label + '/train'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_99": {
                "variable": {
                    "value": "test_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "test_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir + '/gradient_tape/' + model.architecture + '_' + class_label + '/val'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CheckpointManager_107": {
                "variable": {
                    "value": "manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_ckpt()",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(step=tf.Variable(1), optimizer=optimizer, net=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'output/{}/{}/checkpoints'.format(model.architecture, class_label)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InceptionV3_185": {
                "variable": {
                    "value": "incept_model",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(256, 256, 3)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Checkpoint_105": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "tf.Variable(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(0.001)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "net": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Mean_115": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_116": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_117": {
                "variable": {
                    "value": "train_fid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_118": {
                "variable": {
                    "value": "val_fid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorBoard_94": {
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs'",
                            "str"
                        ]
                    ]
                }
            },
            "GradientTape_20": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_105": {
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_134": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(zip(ds_train, ds_val))",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_136": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "val_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(zip(ds_train, ds_val))",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_147": {
                "name": {
                    "value": "FID",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_fid.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(zip(ds_train, ds_val))",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_149": {
                "name": {
                    "value": "FID",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "val_fid.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step in enumerate(zip(ds_train, ds_val))",
                            "Call"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_201": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}