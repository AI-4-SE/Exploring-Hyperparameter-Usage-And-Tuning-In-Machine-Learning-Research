{
    "blink/biencoder/dendrogram_purity.py": {
        "sklearn": {
            "normalize_218": {
                "variable": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed_data['embeds']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((dict_embeds, men_embeds), axis=0)",
                            "Call"
                        ],
                        [
                            "embed_data['embeds']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((dict_embeds, men_embeds), axis=0)",
                            "Call"
                        ],
                        [
                            "normalize(embeds, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_132": {
                "variable": {
                    "value": "new_ent_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: test_dictionary[x]['ids'], new_ents_arr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "all_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_ent_vecs, test_men_vecs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_173": {
                "variable": {
                    "value": "embed_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "embed_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(embed_data_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/eval_entity_discovery.py": {
        "sklearn": {
            "KMeans_326": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['n_thresholds']",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_122": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "gold_cluster_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(gold_cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "predicted_cluster_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-1 * i for i in range(1, n_mentions + 1)]",
                            "ListComp"
                        ],
                        [
                            "np.array(predicted_cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_123": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "gold_cluster_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(gold_cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "predicted_cluster_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-1 * i for i in range(1, n_mentions + 1)]",
                            "ListComp"
                        ],
                        [
                            "np.array(predicted_cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_134": {
                "variable": {
                    "value": "nmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "gold_cluster_labels[idx_subsets[mode]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "predicted_cluster_labels[idx_subsets[mode]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_135": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "gold_cluster_labels[idx_subsets[mode]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "predicted_cluster_labels[idx_subsets[mode]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_195": {
                "variable": {
                    "value": "embed_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "q_nn_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dict_embeds[q_nn_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_294": {
                "variable": {
                    "value": "q_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.tensor(np.expand_dims(men_embed, axis=0)).cuda(), q_nn_embeds.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "q_nn_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dict_embeds[q_nn_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_283": {
                "variable": {
                    "value": "q_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.tensor(q_men_embeds[i:i + 1]).cuda(), q_nn_embeds.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_296": {
                "input": {
                    "value": "q_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.mm(torch.tensor(np.expand_dims(men_embed, axis=0)).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.mm(torch.tensor(q_men_embeds[i:i + 1]).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_285": {
                "input": {
                    "value": "q_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.mm(torch.tensor(np.expand_dims(men_embed, axis=0)).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.mm(torch.tensor(q_men_embeds[i:i + 1]).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_295": {
                "input": {
                    "value": "torch.tensor(np.expand_dims(men_embed, axis=0)).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q_nn_embeds.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_296": {
                "input": {
                    "value": "q_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.mm(torch.tensor(np.expand_dims(men_embed, axis=0)).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.mm(torch.tensor(q_men_embeds[i:i + 1]).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_284": {
                "input": {
                    "value": "torch.tensor(q_men_embeds[i:i + 1]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q_nn_embeds.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_285": {
                "input": {
                    "value": "q_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.mm(torch.tensor(np.expand_dims(men_embed, axis=0)).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.mm(torch.tensor(q_men_embeds[i:i + 1]).cuda(), q_nn_embeds.T)).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_295": {
                "data": {
                    "value": "np.expand_dims(men_embed, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "q_men_embeds[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/crossencoder/eval_cluster_linking.py": {
        "sklearn": {
            "KMeans_235": {
                "variable": {
                    "value": "k_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['n_thresholds']",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_282": {
                "variable": {
                    "value": "entity_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], entity_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], entity_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_396": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_344": {
                "obj": {
                    "value": "{'mode': mode, 'candidates': bi_dict_nns, 'labels': labels}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['output_path'], f'candidates_{mode}_top{topk}.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_398": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sort_501": {
                "variable": {
                    "value": "(cross_men_topk_scores, cross_men_topk_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_men_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_in_batches(cross_reranker, max_context_length, men_concat_inputs, is_context_encoder=True, scoring_batch_size=SCORING_BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_509": {
                "variable": {
                    "value": "(cross_ent_top1_score, cross_ent_top1_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_ent_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_in_batches(cross_reranker, max_context_length, ent_concat_inputs, is_context_encoder=False, scoring_batch_size=SCORING_BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/joint_eval/evaluation.py": {
        "sklearn": {
            "KMeans_125": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "_num_thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fowlkes_mallows_score_351": {
                "labels_true": {
                    "value": "true_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[(i, x) for (i, l) in enumerate(gold_clustering) for x in l]",
                            "ListComp"
                        ],
                        [
                            "sorted(true_labels, key=lambda x: x[1])",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "pred_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zip(labels[label_mask], pred_midxs[label_mask])",
                            "Call"
                        ],
                        [
                            "sorted(pred_labels, key=lambda x: x[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_352": {
                "labels_true": {
                    "value": "true_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[(i, x) for (i, l) in enumerate(gold_clustering) for x in l]",
                            "ListComp"
                        ],
                        [
                            "sorted(true_labels, key=lambda x: x[1])",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "pred_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zip(labels[label_mask], pred_midxs[label_mask])",
                            "Call"
                        ],
                        [
                            "sorted(pred_labels, key=lambda x: x[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/analysis/debug_experiment.py": {
        "torch": {
            "load_181": {
                "variable": {
                    "value": "results_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "EVAL_OUTPUT_FILE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/mnt/nfs/scratch1/rangell/BLINK/exp/zeshel/joint_crossencoder/2020-10-11_11-03-30/epoch_1/eval_output/valid_results.t7'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_182": {
                "variable": {
                    "value": "split_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SPLIT_DATA_FILE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/mnt/nfs/scratch1/rangell/BLINK/data/zeshel/joint_valid.t7'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "blink/biencoder/biencoder.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not params[no_cuda]) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_75": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: 'cpu'",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_188": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_cands",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.cand_encoder(token_idx_cands, segment_idx_cands, mask_cands)",
                            "Call"
                        ],
                        [
                            "embedding_cands.view(embedding_ctxt.shape[0], embedding_cands.shape[0] // embedding_ctxt.shape[0], embedding_cands.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedding_ctxt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.context_encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "Call"
                        ],
                        [
                            "embedding_ctxt.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(embedding_cands, embedding_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.score_candidate(context_input, cand_input, flag)",
                            "Call"
                        ],
                        [
                            "torch.bmm(cand_embeds, context_embeds)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "cand_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_embeds, neg_dict_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_215": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((pos_embeds, neg_dict_embeds), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cand_embeds, neg_men_embeds), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode_context(context_input, requires_grad=True).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(embedding_cands, embedding_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.score_candidate(context_input, cand_input, flag)",
                            "Call"
                        ],
                        [
                            "torch.bmm(cand_embeds, context_embeds)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_228": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(embedding_cands, embedding_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.score_candidate(context_input, cand_input, flag)",
                            "Call"
                        ],
                        [
                            "torch.bmm(cand_embeds, context_embeds)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.LongTensor(torch.arange(bs))",
                            "Call"
                        ],
                        [
                            "target.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "cand_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_embeds, neg_men_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_231": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(-torch.log(torch.softmax(scores, dim=1) + 1e-08) * label_input - torch.log(1 - torch.softmax(scores, dim=1) + 1e-08) * (1 - label_input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_233": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(-torch.log(torch.softmax(scores, dim=1) + 1e-08) * label_input, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_226": {
                "start": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "-torch.log(torch.softmax(scores, dim=1) + 1e-08) * label_input - torch.log(1 - torch.softmax(scores, dim=1) + 1e-08) * (1 - label_input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_233": {
                "input": {
                    "value": "-torch.log(torch.softmax(scores, dim=1) + 1e-08) * label_input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_231": {
                "input": {
                    "value": "torch.softmax(scores, dim=1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_233": {
                "input": {
                    "value": "torch.softmax(scores, dim=1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(embedding_cands, embedding_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.score_candidate(context_input, cand_input, flag)",
                            "Call"
                        ],
                        [
                            "torch.bmm(cand_embeds, context_embeds)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(embedding_cands, embedding_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ],
                        [
                            "self.score_candidate(context_input, cand_input, flag)",
                            "Call"
                        ],
                        [
                            "torch.bmm(cand_embeds, context_embeds)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/data_process.py": {
        "torch": {
            "tensor_194": {
                "variable": {
                    "value": "context_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'context', 'ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "cand_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'label', 'ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "src_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'src')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "label_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'label_idx')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_213": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_vecs",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/data_process_mod.py": {
        "torch": {
            "tensor_191": {
                "variable": {
                    "value": "context_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'context', 'ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "cand_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'label', 'ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "src_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'src')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "label_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'label_idx')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_210": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_vecs",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/data_process_mult.py": {
        "torch": {
            "tensor_200": {
                "variable": {
                    "value": "context_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'context', 'ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "label_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'label_idxs')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "n_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(processed_samples, 'n_labels')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_209": {
                "variable": {
                    "value": "mention_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(n_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_211": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_vecs",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_263": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "token_id_vecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "token_id_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(token_id_vecs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size * n_gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_227": {
                "obj": {
                    "value": "embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embeds.numpy()",
                            "Call"
                        ],
                        [
                            "np.array(embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch_embeds if embeds is None else np.concatenate((embeds, batch_embeds), axis=0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/eval_biencoder.py": {
        "torch": {
            "SequentialSampler_150": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(candidate_pool)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "encode_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_270": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "cand_encode_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_encode_list, cand_encode)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "candidate_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_238": {
                "variable": {
                    "value": "candidate_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_295": {
                "obj": {
                    "value": "new_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nnquery.get_topk_predictions(reranker, test_dataloader, candidate_pool, candidate_encoding, params['silent'], logger, params['top_k'], params.get('zeshel', None), save_results)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['output_path'], 'candidates_%s_top%d.t7' % (params['mode'], params['top_k']))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_255": {
                "obj": {
                    "value": "candidate_encoding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_encode_path)",
                            "Call"
                        ],
                        [
                            "encode_candidate(reranker, candidate_pool, params['encode_batch_size'], silent=params['silent'], logger=logger, is_zeshel=params.get('zeshel', None))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/biencoder/eval_biencoder_mod.py": {
        "torch": {
            "SequentialSampler_150": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(candidate_pool)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "encode_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_289": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_290": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "cand_encode_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_encode_list, cand_encode)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "candidate_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_238": {
                "variable": {
                    "value": "candidate_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_314": {
                "obj": {
                    "value": "new_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nnquery.get_topk_predictions(reranker, test_dataloader, candidate_pool, candidate_encoding, params['silent'], logger, params['top_k'], params.get('zeshel', None), save_results)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['output_path'], 'candidates_%s_top%d.t7' % (params['mode'], params['top_k']))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_255": {
                "obj": {
                    "value": "candidate_encoding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_encode_path)",
                            "Call"
                        ],
                        [
                            "encode_candidate(reranker, candidate_pool, params['encode_batch_size'], silent=params['silent'], logger=logger, is_zeshel=params.get('zeshel', None))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/biencoder/eval_cluster_linking.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "nn_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeds[nn_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.tensor(q_embed).cuda(), nn_embeds.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "test_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], test_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_432": {
                "variable": {
                    "value": "embed_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_486": {
                "obj": {
                    "value": "embed_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(embed_data_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "torch.tensor(q_embed).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "nn_embeds.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_men_vecs, vecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_men_vecs, vecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/eval_cluster_linking_mod.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "nn_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeds[nn_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.tensor(q_embed).cuda(), nn_embeds.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "test_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], test_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_341": {
                "variable": {
                    "value": "og_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "models/trained/zeshel_og/eval/data_og/cand_encodes.t7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_73": {
                "input": {
                    "value": "torch.tensor(q_embed).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "nn_embeds.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eq_347": {
                "input": {
                    "value": "oge",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(dict_embeds[dict_embed_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "dict_embeds[dict_embed_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/get_nearest_mentions.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "nn_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeds[nn_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.tensor(q_embed).cuda(), nn_embeds.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "test_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], test_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_414": {
                "variable": {
                    "value": "embed_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_495": {
                "obj": {
                    "value": "embed_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(embed_data_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "embed_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['embed_data_path']",
                            "Subscript"
                        ],
                        [
                            "output_path",
                            "Name"
                        ],
                        [
                            "os.path.join(embed_data_path, 'embed_data.t7')",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_men_vecs, vecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_men_vecs, vecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "torch.tensor(q_embed).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "nn_embeds.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "q_embed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/nn_prediction.py": {
        "torch": {}
    },
    "blink/biencoder/train_biencoder.py": {
        "torch": {
            "DataLoader_192": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_211": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "valid_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(valid_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['eval_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_154": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RandomSampler_188": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_190": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_156": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__282": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_74": {
                "start": {
                    "value": "params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/train_biencoder_mst.py": {
        "torch": {
            "tensor_338": {
                "variable": {
                    "value": "entity_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], entity_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_247": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_178": {
                "variable": {
                    "value": "optim_sched",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optim_sched_fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, utils.OPTIM_SCHED_FNAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_249": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RandomSampler_329": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_331": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_691": {
                "variable": {
                    "value": "negative_dict_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: entity_dict_vecs[x].numpy(), negative_dict_inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_692": {
                "variable": {
                    "value": "negative_men_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: train_men_vecs[x].numpy(), negative_men_inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_700": {
                "variable": {
                    "value": "positive_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positive_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(positive_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "label_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1] + [0] * (knn_dict + knn_men)] * len(context_inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_443": {
                "variable": {
                    "value": "init_run_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init_run_pkl_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pickle_src_path, f\"init_run_{('type' if use_types else 'notype')}.t7\")",
                            "Call"
                        ]
                    ]
                }
            },
            "save_484": {
                "obj": {
                    "value": "init_run_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(init_run_pkl_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "init_run_pkl_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pickle_src_path, f\"init_run_{('type' if use_types else 'notype')}.t7\")",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_718": {
                "variable": {
                    "value": "skipped_negative_dict_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: entity_dict_vecs[x].numpy(), skipped_negative_dict_inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_729": {
                "variable": {
                    "value": "skipped_positive_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "skipped_positive_embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(skipped_positive_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_732": {
                "variable": {
                    "value": "skipped_label_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1] + [0] * knn_dict] * len(skipped_context_inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__766": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/train_biencoder_mult.py": {
        "torch": {
            "tensor_341": {
                "variable": {
                    "value": "entity_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], entity_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_248": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "label_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_inputs.shape[0], knn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "candidate_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: valid_dict_vecs[x].numpy(), candidate_inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_250": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RandomSampler_332": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_334": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_501": {
                "variable": {
                    "value": "label_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1] + [0] * (knn - 1)] * n_gold.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "variable": {
                    "value": "context_inputs_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(label_inputs.size(0), context_inputs.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_512": {
                "variable": {
                    "value": "candidate_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: entity_dict_vecs[x].numpy(), candidate_inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "label_inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 if nn in gold_idxs else 0 for nn in knn_dict_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "label_inputs[np.arange(label_inputs.shape[0]), np.argmax(logits, axis=1)] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_428": {
                "variable": {
                    "value": "init_run_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init_run_pkl_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pickle_src_path, f\"init_run_{('type' if use_types else 'notype')}.t7\")",
                            "Call"
                        ]
                    ]
                }
            },
            "save_469": {
                "obj": {
                    "value": "init_run_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(init_run_pkl_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "init_run_pkl_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(pickle_src_path, f\"init_run_{('type' if use_types else 'notype')}.t7\")",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__536": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/biencoder/zeshel_utils.py": {
        "torch": {}
    },
    "blink/build_faiss_index.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "candidate_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "params['candidate_encoding']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/candidate_ranking/bert_reranking.py": {
        "torch": {
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not parameters[no_cuda]) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_171": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_196": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mention_indices, all_entity_masks)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label, all_entity_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_mention_indices, all_entity_masks)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label, all_entity_masks)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "p['evaluation_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.parameters",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Softmax_201": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_490": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "BertReranker._select_field(processed_mentions, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_494": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "BertReranker._select_field(processed_mentions, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_498": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "BertReranker._select_field(processed_mentions, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "all_entity_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[s['entity_mask'] for s in processed_mentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_291": {
                "variable": {
                    "value": "model.bert",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_514": {
                "variable": {
                    "value": "all_mention_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[s['mention_idx'] for s in processed_mentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_518": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_526": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[s['label'] for s in processed_mentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_530": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/candidate_ranking/evaluate.py": {
        "torch": {
            "SequentialSampler_168": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "parameters['evaluation_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/candidate_ranking/train.py": {
        "torch": {
            "RandomSampler_136": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_165": {
                "variable": {
                    "value": "dev_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dev_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "dev_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(dev_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "evaluation_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters['evaluation_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__226": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "parameters['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/candidate_ranking/utils.py": {
        "torch": {
            "cat_66": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label_ids for (_, _, _, label_ids, _) in dataloader]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_120": {
                "obj": {
                    "value": "optim_sched",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'optimizer': optimizer, 'scheduler': scheduler}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "optimizer_scheduler_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, OPTIM_SCHED_FNAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/common/optimizer.py": {
        "torch": {}
    },
    "blink/common/ranker_base.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.additional_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bert_model.embeddings.word_embeddings.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "blink/crossencoder/crossencoder.py": {
        "torch": {
            "device_131": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not params[no_cuda]) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_134": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1] + [0] * n_negs] * len(pos_scores)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_scores, cand_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.additional_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * bert_output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['out_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_output_a, pooled_output_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_172": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: 'cpu'",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_219": {
                "variable": {
                    "value": "embedding_ctxt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_ctxt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ctxt_encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt) if is_ctxt else self.cand_encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "IfExp"
                        ],
                        [
                            "self.additional_linear(self.dropout(pooled_output))",
                            "Call"
                        ],
                        [
                            "self.model(token_idx_ctxt, segment_idx_ctxt, mask_ctxt, is_ctxt=is_context_encoder)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(embedding_ctxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores, ctxt_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(-torch.log(torch.softmax(scores, dim=1) + 1e-08) * labels - torch.log(1 - torch.softmax(scores, dim=1) + 1e-08) * (1 - labels), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_239": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(-torch.log(torch.softmax(scores, dim=1) + 1e-08) * labels, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "index_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "token_idx_ctxt.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_93": {
                "variable": {
                    "value": "start_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_idx_ctxt == self.start_mention_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_97": {
                "variable": {
                    "value": "end_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_idx_ctxt == self.end_mention_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "embedding_ctxt * mask_a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "mask_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(index_tensor > start_indices_a) & (index_tensor < end_indices_a)",
                            "BinOp"
                        ],
                        [
                            "mask_a.unsqueeze(-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "embedding_ctxt * mask_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "mask_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(index_tensor > start_indices_b) & (index_tensor < end_indices_b)",
                            "BinOp"
                        ],
                        [
                            "mask_b.unsqueeze(-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "-torch.log(torch.softmax(scores, dim=1) + 1e-08) * labels - torch.log(1 - torch.softmax(scores, dim=1) + 1e-08) * (1 - labels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_239": {
                "input": {
                    "value": "-torch.log(torch.softmax(scores, dim=1) + 1e-08) * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_236": {
                "input": {
                    "value": "torch.softmax(scores, dim=1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_239": {
                "input": {
                    "value": "torch.softmax(scores, dim=1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((pos_scores, cand_scores), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((scores, ctxt_scores), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_237": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((pos_scores, cand_scores), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((scores, ctxt_scores), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_239": {
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((pos_scores, cand_scores), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((scores, ctxt_scores), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "blink/crossencoder/original/crossencoder.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not params[no_cuda]) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_74": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_148": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score_candidate(input_idx, context_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_103": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: 'cpu'",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/crossencoder/original/data_process.py": {
        "torch": {}
    },
    "blink/crossencoder/original/train_cross.py": {
        "torch": {
            "load_253": {
                "variable": {
                    "value": "stored_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['biencoder_indices_path'], f'candidates_{cand_name}_top64.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "mention_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for i in range(len(stored_data['labels']))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "TensorDataset_299": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input, mention_idxs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(tensor_data) if shuffle else SequentialSampler(tensor_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size' if data_split == 'train' else 'eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_344": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_282": {
                "data": {
                    "value": "stored_data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RandomSampler_300": {
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input, mention_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_300": {
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input, mention_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_346": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__453": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/crossencoder/train_crossencoder_mst.py": {
        "torch": {
            "cat_770": {
                "variable": {
                    "value": "men_men_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "men_men_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(men_men_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_771": {
                "variable": {
                    "value": "men_ent_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "men_ent_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(men_ent_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_943": {
                "variable": {
                    "value": "entity_dict_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: x['ids'], entity_dictionary))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1061": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "train_tensor_data[:200]",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data) if params['shuffle'] else SequentialSampler(train_tensor_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_69": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "cross_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cross_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(cross_inputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scoring_batch_size if scoring_batch_size is not None else SCORING_BATCH_SIZE",
                            "IfExp"
                        ],
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_cache_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_134": {
                "variable": {
                    "value": "(cross_men_topk_scores, cross_men_topk_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_men_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_in_batches(cross_reranker, max_context_length, valid_men_inputs, is_context_encoder=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_142": {
                "variable": {
                    "value": "(cross_ent_top1_score, cross_ent_top1_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_ent_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_in_batches(cross_reranker, max_context_length, valid_ent_inputs, is_context_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_755": {
                "variable": {
                    "value": "bi_men_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bi_men_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "men_vecs[bi_men_idx].unsqueeze(dim=0) if bi_men_inputs is None else torch.cat((bi_men_inputs, men_vecs[bi_men_idx].unsqueeze(dim=0)), dim=0)",
                            "IfExp"
                        ],
                        [
                            "torch.unsqueeze(bi_men_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_760": {
                "variable": {
                    "value": "bi_ent_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bi_ent_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "entity_dict_vecs[bi_ent_idx].unsqueeze(dim=0) if bi_ent_inputs is None else torch.cat((bi_ent_inputs, entity_dict_vecs[bi_ent_idx].unsqueeze(dim=0)), dim=0)",
                            "IfExp"
                        ],
                        [
                            "torch.unsqueeze(bi_ent_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_797": {
                "variable": {
                    "value": "topk_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stacked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_917": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_246": {
                "variable": {
                    "value": "optim_sched",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optim_sched_fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, utils.OPTIM_SCHED_FNAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_721": {
                "variable": {
                    "value": "to_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_dict_vecs[to_idx:to_idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_726": {
                "variable": {
                    "value": "to_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_men_vecs[to_idx:to_idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_803": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_919": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RandomSampler_1060": {
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "train_tensor_data[:200]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_1060": {
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(read_handle)",
                            "Call"
                        ],
                        [
                            "train_tensor_data[:200]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_cache_1101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "(scores, batch_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_733": {
                "tensors": {
                    "value": "(batch_positive_scores, pos_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_793": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_scores if scores is None else torch.cat((scores, batch_scores), dim=0)",
                            "IfExp"
                        ],
                        [
                            "score_in_batches(cross_reranker, max_context_length, concat_inputs, is_context_encoder=is_context_encoder)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_754": {
                "tensors": {
                    "value": "(bi_men_inputs, men_vecs[bi_men_idx].unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_759": {
                "tensors": {
                    "value": "(bi_ent_inputs, entity_dict_vecs[bi_ent_idx].unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__1194": {
                "parameters": {
                    "value": "cross_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/crossencoder.py": {
        "torch": {
            "device_119": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not params[no_cuda]) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_122": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.additional_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * bert_output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['out_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_output_a, pooled_output_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: 'cpu'",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_165": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_206": {
                "variable": {
                    "value": "embedding_ctxt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_ctxt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "Call"
                        ],
                        [
                            "self.additional_linear(self.dropout(pooled_output))",
                            "Call"
                        ],
                        [
                            "self.model(token_idx_ctxt, segment_idx_ctxt, mask_ctxt)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(embedding_ctxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_212": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score_candidate(input_idx, context_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score_candidate(input_idx, context_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_219": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(neg_scores - pos_scores + self.margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_79": {
                "variable": {
                    "value": "index_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "token_idx_ctxt.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_83": {
                "variable": {
                    "value": "start_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_idx_ctxt == self.start_mention_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "end_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_idx_ctxt == self.end_mention_id",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "embedding_ctxt * mask_a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "mask_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(index_tensor > start_indices_a) & (index_tensor < end_indices_a)",
                            "BinOp"
                        ],
                        [
                            "mask_a.unsqueeze(-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "embedding_ctxt * mask_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "mask_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(index_tensor > start_indices_b) & (index_tensor < end_indices_b)",
                            "BinOp"
                        ],
                        [
                            "mask_b.unsqueeze(-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_219": {
                "input": {
                    "value": "neg_scores - pos_scores + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/eval_biencoder.py": {
        "torch": {
            "SequentialSampler_151": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(candidate_pool)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "encode_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_362": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(test_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_263": {
                "variable": {
                    "value": "context_input_dict[src]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(context_input_dict[src])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_264": {
                "variable": {
                    "value": "context_encode_dict[src]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(context_encode_dict[src])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "context_label_uids[src]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "context_label_uids[src]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "cand_encode_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_encode_list, cand_encode.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "candidate_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "context_input_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_input_list, context_input.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "context_encode_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_encode_list, context_encode.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "src_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_list, srcs.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "label_id_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_id_list, label_ids.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_322": {
                "variable": {
                    "value": "candidate_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_405": {
                "obj": {
                    "value": "new_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nnquery.get_topk_predictions(context_pool, context_encoding, context_label_uids, ctxt_uid_map, candidate_pool, candidate_encoding, cand_uid_map, params['silent'], logger, params['top_k'], params.get('zeshel', None), save_results)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['output_path'], 'joint_candidates_%s_top%d.t7' % (params['mode'], params['top_k']))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "candidate_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_pool_path)",
                            "Call"
                        ],
                        [
                            "get_candidate_pool_tensor_helper(entity_desc_list, tokenizer, params['max_cand_length'], logger, is_zeshel)",
                            "Call"
                        ],
                        [
                            "load_or_generate_candidate_pool(tokenizer, params, logger, cand_pool_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_pool_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_pool_path', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_339": {
                "obj": {
                    "value": "candidate_encoding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(cand_encode_path)",
                            "Call"
                        ],
                        [
                            "encode_candidate(reranker, candidate_pool, params['encode_batch_size'], silent=params['silent'], logger=logger, is_zeshel=params.get('zeshel', None))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cand_encode_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('cand_encode_path', None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/eval_cross.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorDataset_73": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_74": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "edge_vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_vertices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_vertices).type(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_scores).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_vertices, edge_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_' + params['mode'] + '.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_177": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_285": {
                "obj": {
                    "value": "save_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(eval_output_path, 'results.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_179": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/eval_cross_link_only.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorDataset_73": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_74": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "edge_vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_vertices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_vertices).type(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_160": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_scores).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_vertices, edge_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_' + params['mode'] + '.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_220": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_data_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_194": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_295": {
                "obj": {
                    "value": "save_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(eval_output_path, 'results.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_196": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/eval_cross_link_only_taggerOne_test.py": {
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorDataset_73": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_74": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, uid_pairs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['encode_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "edge_vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_vertices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_vertices).type(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(edge_scores).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "edge_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_vertices, edge_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_' + params['mode'] + '.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_199": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_232": {
                "variable": {
                    "value": "cand_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dev_cache_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(eval_output_path, 'taggerOne_test_cand_edges.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "save_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(eval_output_path, 'taggerOne_test_results.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_201": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/nn_prediction.py": {
        "torch": {
            "cat_144": {
                "variable": {
                    "value": "contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "contexts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(contexts)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_145": {
                "variable": {
                    "value": "context_uids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_uids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(context_uids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "variable": {
                    "value": "knn_ctxts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_ctxts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(knn_ctxts)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "knn_ctxt_uids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_ctxt_uids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(knn_ctxt_uids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "knn_cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(knn_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "knn_cand_uids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "knn_cand_uids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(knn_cand_uids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "data": {
                    "value": "local_idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/tfidf_cross_preprocess.py": {
        "torch": {
            "save_211": {
                "obj": {
                    "value": "tfidf_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'contexts': contexts, 'context_uids': context_uids, 'pos_coref_ctxts': pos_coref_ctxts, 'pos_coref_ctxt_uids': pos_coref_ctxt_uids, 'knn_ctxts': knn_ctxts, 'knn_ctxt_uids': knn_ctxt_uids, 'pos_cands': pos_cands, 'pos_cand_uids': pos_cand_uids, 'knn_cands': knn_cands, 'knn_cand_uids': knn_cand_uids, 'uid_to_json': uid_to_json}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_data_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params['output_path'], 'joint_candidates_%s_tfidf.t7' % params['mode'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/train_cross_ap_joint.py": {
        "torch": {
            "RandomSampler_268": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "mst_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_334": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_335": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_617": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_634": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(pos_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "idx_tuples",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_381": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((context_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros((train_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_384": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_388": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(neg_scores - pos_scores + self.margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_426": {
                "variable": {
                    "value": "cluster_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_496": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(train_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_499": {
                "variable": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_502": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_503": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_609": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_353": {
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_357": {
                "input": {
                    "value": "cand_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~ctxt_mask",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "TensorDataset_431": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_examples",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_432": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_433": {
                "variable": {
                    "value": "infer_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size'] * example_bundle_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_493": {
                "variable": {
                    "value": "train_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "train_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_mask_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_611": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "neg_ctxts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_ctxts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_ctxts)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_246": {
                "variable": {
                    "value": "neg_cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_313": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_388": {
                "input": {
                    "value": "neg_scores - pos_scores + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_469": {
                "variable": {
                    "value": "num_avail_negs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(idx_tuples[:, 0] == r) & ~pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_473": {
                "variable": {
                    "value": "(_, hard_neg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores[~mask].reshape(scores.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "scores[neg_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "neg_sample_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_avail_negs, example_bundle_size - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__524": {
                "parameters": {
                    "value": "ctxt_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__531": {
                "parameters": {
                    "value": "cand_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "neg_input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_input_examples, neg_input_examples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_483": {
                "variable": {
                    "value": "neg_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_ctxt_mask, neg_ctxt_mask)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_491": {
                "tensors": {
                    "value": "bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[input_examples[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_491": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_492": {
                "tensors": {
                    "value": "ctxt_mask_bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[ctxt_mask[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/train_cross_ap_joint_mod.py": {
        "torch": {
            "RandomSampler_268": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "mst_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_334": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_335": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_628": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_645": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(pos_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "idx_tuples",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_381": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((context_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros((train_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_384": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_388": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(neg_scores - pos_scores + self.margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_426": {
                "variable": {
                    "value": "cluster_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_507": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(train_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_510": {
                "variable": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_513": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_514": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_620": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_353": {
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_357": {
                "input": {
                    "value": "cand_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~ctxt_mask",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "TensorDataset_431": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_examples",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_432": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_433": {
                "variable": {
                    "value": "infer_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size'] * example_bundle_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_504": {
                "variable": {
                    "value": "train_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_505": {
                "variable": {
                    "value": "train_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_mask_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_622": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "neg_ctxts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_ctxts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_ctxts)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_246": {
                "variable": {
                    "value": "neg_cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_313": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_388": {
                "input": {
                    "value": "neg_scores - pos_scores + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_480": {
                "variable": {
                    "value": "num_avail_negs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(idx_tuples[:, 0] == r) & ~pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_484": {
                "variable": {
                    "value": "(_, hard_neg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores[~mask].reshape(scores.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "scores[neg_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "neg_sample_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_avail_negs, example_bundle_size - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__535": {
                "parameters": {
                    "value": "ctxt_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__542": {
                "parameters": {
                    "value": "cand_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "neg_input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_input_examples, neg_input_examples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "neg_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_ctxt_mask, neg_ctxt_mask)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_502": {
                "tensors": {
                    "value": "bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[input_examples[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_502": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_503": {
                "tensors": {
                    "value": "ctxt_mask_bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[ctxt_mask[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/train_cross_cands.py": {
        "torch": {
            "cat_194": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_201": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_202": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_331": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_350": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_323": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_325": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__266": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/train_cross_link_only.py": {
        "torch": {
            "cat_194": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_201": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_202": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_337": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_348": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_329": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_331": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__266": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/train_cross_mst.py": {
        "torch": {
            "RandomSampler_226": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "context_input_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "context_input_clusters[:max_n]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "mst_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "context_input_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "context_input_clusters[:max_n]",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(context_input_clusters)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(cluster_context_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_292": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_293": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_294": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(context_input_clusters)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(cluster_context_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_530": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_552": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_385": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_386": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_387": {
                "variable": {
                    "value": "sub_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(context_input_clusters)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(cluster_context_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size'] * params['example_bundle_size'] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_522": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_338": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "cluster_context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch[0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "cluster_context_input.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_339": {
                "variable": {
                    "value": "scores_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cluster_context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch[0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "cluster_context_input.cpu()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(context_input_clusters)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(cluster_context_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_353": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ],
                        [
                            "scores.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_382": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_bundles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_all_524": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "cluster_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_271": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[cluster_context_input[i, 0, :].unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "torch.cat(bundle)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__400": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__463": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_374": {
                "input": {
                    "value": "scores[:, 1:][train_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blink/joint/train_cross_mst_joint.py": {
        "torch": {
            "RandomSampler_268": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "mst_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cluster_list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_334": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_335": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_622": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_639": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(pos_mask, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "idx_tuples",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_381": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((context_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros((train_input.shape[0],), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_384": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_388": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(neg_scores - pos_scores + self.margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_426": {
                "variable": {
                    "value": "cluster_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_tuples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(idx_tuples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(train_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_504": {
                "variable": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_507": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_508": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(train_input, train_ctxt_mask, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(train_tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_614": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_353": {
                "input": {
                    "value": "ctxt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ctxt_mask, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "ctxt_mask.reshape(batch_size * bundle_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_357": {
                "input": {
                    "value": "cand_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~ctxt_mask",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "TensorDataset_431": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_examples",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_432": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_433": {
                "variable": {
                    "value": "infer_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(input_examples, ctxt_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(cluster_list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size'] * example_bundle_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(ctxt_mask).type(torch.float)",
                            "Call"
                        ],
                        [
                            "dual_reranker_score(input_ids, ctxt_mask, ctxt_reranker, cand_reranker, context_length)",
                            "Call"
                        ],
                        [
                            "scores.reshape(batch_size, bundle_width)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_498": {
                "variable": {
                    "value": "train_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_499": {
                "variable": {
                    "value": "train_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_mask_bundles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_616": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "neg_ctxts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_ctxts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_ctxts)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_246": {
                "variable": {
                    "value": "neg_cands",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_cands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_cands)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_313": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_388": {
                "input": {
                    "value": "neg_scores - pos_scores + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_474": {
                "variable": {
                    "value": "num_avail_negs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(idx_tuples[:, 0] == r) & ~pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_478": {
                "variable": {
                    "value": "(_, hard_neg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores[~mask].reshape(scores.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "scores[neg_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "neg_sample_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_avail_negs, example_bundle_size - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__529": {
                "parameters": {
                    "value": "ctxt_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__536": {
                "parameters": {
                    "value": "cand_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "neg_input_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_input_examples, neg_input_examples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "neg_ctxt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neg_ctxt_mask, neg_ctxt_mask)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_496": {
                "tensors": {
                    "value": "bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[input_examples[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_496": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_497": {
                "tensors": {
                    "value": "ctxt_mask_bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[ctxt_mask[pos_idx].unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "blink/joint/train_cross_mst_path.py": {
        "torch": {
            "RandomSampler_261": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(zip(context_input_clusters, candidate_input_clusters))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "mst_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(zip(context_input_clusters, candidate_input_clusters))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_327": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_328": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "params['train_batch_size']",
                            "Subscript"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ],
                        [
                            "params['eval_batch_size'] if evaluate else params['train_batch_size']",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_605": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_622": {
                "variable": {
                    "value": "valid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(params['data_path'], 'joint_train.t7')",
                            "Call"
                        ],
                        [
                            "os.path.join(params['data_path'], 'joint_valid.t7')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_498": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(train_candidate_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_501": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_candidate_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_502": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_503": {
                "variable": {
                    "value": "sub_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size'] * example_bundle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_597": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_402": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "candidate_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "candidate_input.tolist()",
                            "Call"
                        ],
                        [
                            "batch[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "candidate_input.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_403": {
                "variable": {
                    "value": "candidate_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "candidate_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "candidate_input.tolist()",
                            "Call"
                        ],
                        [
                            "batch[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "candidate_input.cpu()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_416": {
                "variable": {
                    "value": "candidate_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_scores)",
                            "Call"
                        ],
                        [
                            "candidate_scores.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "train_candidate_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[candidate_input[i].unsqueeze(0) for i in train_cand_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "variable": {
                    "value": "label_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(train_context_input.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_473": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_474": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_475": {
                "variable": {
                    "value": "sub_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_context_input, label_input)",
                            "Call"
                        ],
                        [
                            "TensorDataset(train_candidate_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['train_batch_size'] * example_bundle_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_599": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "candidate_input_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_306": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "numel_371": {
                "input": {
                    "value": "context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context_input.tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(context_input_chunks)",
                            "Call"
                        ],
                        [
                            "context_input[:max_n]",
                            "Subscript"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "context_input.cpu()",
                            "Call"
                        ],
                        [
                            "context_input.reshape(cluster_size, (cluster_size - 1) * example_bundle_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_383": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context_input.tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(context_input_chunks)",
                            "Call"
                        ],
                        [
                            "context_input[:max_n]",
                            "Subscript"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "context_input.cpu()",
                            "Call"
                        ],
                        [
                            "context_input.reshape(cluster_size, (cluster_size - 1) * example_bundle_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_384": {
                "variable": {
                    "value": "context_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context_input.tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(context_input_chunks)",
                            "Call"
                        ],
                        [
                            "context_input[:max_n]",
                            "Subscript"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "context_input.cpu()",
                            "Call"
                        ],
                        [
                            "context_input.reshape(cluster_size, (cluster_size - 1) * example_bundle_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(list_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(context_input)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(candidate_input)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "RandomSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args.__dict__",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_397": {
                "variable": {
                    "value": "context_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(context_scores)",
                            "Call"
                        ],
                        [
                            "context_scores.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_455": {
                "variable": {
                    "value": "(_, hard_neg_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_ctxt_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "context_scores[:, 1:].reshape(cluster_size, (cluster_size - 1) * (example_bundle_size - 1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "example_bundle_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "train_context_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_bundles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clip_grad_norm__518": {
                "parameters": {
                    "value": "cand_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "candidate_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(candidate_bundle, knn_cands[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "context_input_chunks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_253": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numel_382": {
                "input": {
                    "value": "context_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "context_input.tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(context_input_chunks)",
                            "Call"
                        ],
                        [
                            "context_input[:max_n]",
                            "Subscript"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "context_input.cpu()",
                            "Call"
                        ],
                        [
                            "context_input.reshape(cluster_size, (cluster_size - 1) * example_bundle_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_467": {
                "variable": {
                    "value": "bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bundle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[context_input[r, c * example_bundle_size, :].unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "torch.cat(bundle)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__490": {
                "parameters": {
                    "value": "ctxt_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "context_bundle",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context_bundle, knn_ctxts[i][k].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "blink/main_dense.py": {
        "torch": {
            "SequentialSampler_227": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "biencoder_params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_261": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "context_input",
                    "type": null,
                    "possible_values": []
                }
            },
            "SequentialSampler_262": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_263": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(context_input, label_input)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(tensor_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "crossencoder_params['eval_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_101": {
                "variable": {
                    "value": "candidate_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "entity_encoding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/zeshel/create_BLINK_zeshel_data.py": {
        "torch": {}
    }
}