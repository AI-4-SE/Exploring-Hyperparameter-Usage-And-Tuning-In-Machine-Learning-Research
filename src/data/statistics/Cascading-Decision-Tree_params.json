{
    "src/viper/algorithms/agents.py": {
        "sklearn": {},
        "torch": {}
    },
    "src/sdt/sdt_plot.py": {
        "tensorflow": {},
        "torch": {
            "unsqueeze_201": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/CDT.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_14": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_15": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ExponentialLR_23": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args['exp_scheduler_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fl_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['input_dim'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_fl_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_41": {
                "variable": {
                    "value": "fl_leaf_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_fl_leaves * self.args['num_intermediate_variables']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args['input_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.fl_leaf_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fl_leaf_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.num_fl_leaves * self.args['num_intermediate_variables'], self.args['input_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigmoid(self.beta_fl * self.fl_inner_nodes(self.aug_data))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.beta_dc * self.dc_inner_nodes(aug_features))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_prob, 1 - path_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.dc_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['num_intermediate_variables'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_dc_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "dc_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_dc_leaves",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args['output_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.dc_leaves",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dc_leaves",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.num_dc_leaves, self.args['output_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sigmoid(self.beta_fl * self.fl_inner_nodes(self.aug_data))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.beta_dc * self.dc_inner_nodes(aug_features))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_prob, 1 - path_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_132": {
                "variable": {
                    "value": "average_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "distribution_per_leaf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(self.dc_leaves)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fl_probs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dc_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decision_forward()",
                            "Call"
                        ],
                        [
                            "dc_probs.view(self.batch_size, self.num_fl_leaves, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_174": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bias, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_46": {
                "variable": {
                    "value": "beta_fl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_fl_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.beta_fl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta_fl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.num_fl_inner_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_89": {
                "variable": {
                    "value": "beta_dc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_dc_inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.beta_dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta_dc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.num_dc_inner_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_147": {
                "variable": {
                    "value": "(vs, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fl_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feature_learning_forward()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "one_hot_path_probability_dc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "one_dc_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_155": {
                "variable": {
                    "value": "(vs_dc, ids_dc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "one_dc_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dc_probs[torch.arange(dc_probs.shape[0]), ids, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_164": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decision_leaves(_mu)",
                            "Call"
                        ],
                        [
                            "torch.log(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decision_leaves(one_hot_path_probability_dc)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.log(prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_179": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path + id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "self.beta_fl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.beta_fl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.args['beta_fl']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_93": {
                "variable": {
                    "value": "self.beta_dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "self.beta_dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.args['beta_dc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_182": {
                "f": {
                    "value": "model_path + id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "dc_probs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/cdt_discretization.py": {
        "torch": {
            "Parameter_37": {
                "variable": {
                    "value": "tree.fl_inner_nodes.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "tree.dc_inner_nodes.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_58": {
                "tensors": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_21": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/cdt_evaluation.py": {
        "torch": {
            "Softmax_36": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/cdt/cdt_plot.py": {
        "torch": {
            "unsqueeze_243": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/deprecated/cdt_discretization.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test', ToTensor=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(10000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "tree.fl_inner_nodes.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "tree.dc_inner_nodes.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_39": {
                "tensors": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/deprecated/cdt_il_train.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_51": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/cdt_' + str(learner_args['feature_learning_depth']) + '_' + str(learner_args['decision_depth']) + '_var' + str(learner_args['num_intermediate_variables']) + '_id' + str(args.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NLLLoss_53": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'num_intermediate_variables': int(args.num_intermediate_variables), 'feature_learning_depth': int(args.feature_learning_depth), 'decision_depth': int(args.decision_depth), 'input_dim': 8, 'output_dim': 4, 'lr': 0.001, 'weight_decay': 0.0, 'batch_size': 1280, 'exp_scheduler_gamma': 1.0, 'cuda': use_cuda, 'epochs': 40, 'log_interval': 100, 'greatest_path_probability': True, 'beta_fl': False, 'beta_dc': False}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'num_intermediate_variables': int(args.num_intermediate_variables), 'feature_learning_depth': int(args.feature_learning_depth), 'decision_depth': int(args.decision_depth), 'input_dim': 8, 'output_dim': 4, 'lr': 0.001, 'weight_decay': 0.0, 'batch_size': 1280, 'exp_scheduler_gamma': 1.0, 'cuda': use_cuda, 'epochs': 40, 'log_interval': 100, 'greatest_path_probability': True, 'beta_fl': False, 'beta_dc': False}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/cdt/deprecated/cdt_rl_train.py": {
        "torch": {
            "device_194": {
                "variable": {
                    "value": "learner_args[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if learner_args[cuda] else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "env.observation_space.shape[0]",
                            "Subscript"
                        ],
                        [
                            "env.observation_space.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters()) + list(self.cdt.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "advantage",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "advantage_lst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_90": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pi_a) - torch.log(prob_a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_102": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pi(torch.from_numpy(s).unsqueeze(0).float().to(self.device)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_105": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pi(torch.from_numpy(s).unsqueeze(0).float().to(self.device)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "data": {
                    "value": "a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "s_prime_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "prob_a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_82": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "td_target - self.v(s)",
                            "BinOp"
                        ],
                        [
                            "delta.detach()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "input": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(torch.log(pi_a) - torch.log(prob_a))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_93": {
                "input": {
                    "value": "self.v(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "td_target.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "learner_args['model_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "prob_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_93": {
                "input": {
                    "value": "surr1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "s_prime",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/hdt/HDT_lunarlander.py": {
        "torch": {
            "manual_seed_230": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/il_data_collect.py": {
        "torch": {
            "device_83": {
                "type": {
                    "value": "rl_confs[EnvName]['learner_args']['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/il_eval.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(input_path, label_path, partition='test', ToTensor=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1280",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/il_train.py": {
        "torch": {
            "NLLLoss_18": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_24": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(input_path, label_path, partition='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(input_path, label_path, partition='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_138": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "il_confs[EnvName]['learner_args']['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rl/PPO.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "softmax_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_34": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "learner_args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters()) + list(self.policy.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "advantage",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "advantage_lst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_103": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pi_a) - torch.log(prob_a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=softmax_dim)",
                            "Call"
                        ],
                        [
                            "self.pi(torch.from_numpy(s).unsqueeze(0).float().to(self.device)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_119": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=softmax_dim)",
                            "Call"
                        ],
                        [
                            "self.pi(torch.from_numpy(s).unsqueeze(0).float().to(self.device)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "s_prime_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "prob_a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_95": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "td_target - self.v(s)",
                            "BinOp"
                        ],
                        [
                            "delta.detach()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_106": {
                "input": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(torch.log(pi_a) - torch.log(prob_a))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_107": {
                "input": {
                    "value": "self.v(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "td_target.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "prob_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_107": {
                "input": {
                    "value": "surr1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "ndarray": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/rl_eval.py": {
        "torch": {
            "device_113": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/rl_train.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "rl_confs[EnvName]['learner_args']['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/rl_train_compare_cdt.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "rl_confs[EnvName]['learner_args']['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/rl_train_compare_sdt.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "rl_confs[EnvName]['learner_args']['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/sdt/SDT.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['input_dim'] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_node_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.leaf_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args['output_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.leaf_num, self.args['output_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_39": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ExponentialLR_42": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args['exp_scheduler_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_46": {
                "variable": {
                    "value": "average_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "distribution_per_leaf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(self.param)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.inner_nodes(data)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "path_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_prob, 1 - path_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data.size()[0]",
                            "Subscript"
                        ],
                        [
                            "_mu.size()[0]",
                            "Subscript"
                        ],
                        [
                            "input.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bias, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.inner_node_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.inner_node_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_33": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "one_hot_path_probability",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "_mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_67": {
                "variable": {
                    "value": "(vs, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.data.new(batch_size, 1, 1).fill_(1.0)",
                            "Call"
                        ],
                        [
                            "_mu.view(batch_size, -1, 1).repeat(1, 1, 2)",
                            "Call"
                        ],
                        [
                            "_mu * _path_prob",
                            "BinOp"
                        ],
                        [
                            "_mu.view(batch_size, 2 ** layer_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_77": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.leaf_nodes(_mu)",
                            "Call"
                        ],
                        [
                            "torch.log(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_78": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.leaf_nodes(one_hot_path_probability)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.log(prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "L1_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(_path_prob[:, node] * _mu[:, node // 2], dim=0) / (torch.sum(_mu[:, node // 2], dim=0) + numerical_bound)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(alpha, numerical_bound, 1 - numerical_bound)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "numerical_bound",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - numerical_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path + id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "torch.stack(half_alpha_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_142": {
                "input": {
                    "value": "torch.tensor(alpha_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_159": {
                "f": {
                    "value": "model_path + id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "_mu[:, node // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "1 - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_88": {
                "input": {
                    "value": "param[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "alpha_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "half_alpha_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in _alpha_list if i > 0.5]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/sdt/deprecated/sdt_discretization.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test', ToTensor=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(10000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "tree.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_16": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/sdt/deprecated/sdt_il_train.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_49": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/sdt_' + str(learner_args['depth']) + '_id' + str(args.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NLLLoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'input_dim': 8, 'output_dim': 4, 'depth': int(args.depth), 'lamda': 0.001, 'lr': 0.001, 'weight_decay': 0.0, 'batch_size': 1280, 'epochs': 80, 'cuda': use_cuda, 'log_interval': 100, 'exp_scheduler_gamma': 1.0, 'beta': True, 'l1_regularization': False, 'greatest_path_probability': True}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'input_dim': 8, 'output_dim': 4, 'depth': int(args.depth), 'lamda': 0.001, 'lr': 0.001, 'weight_decay': 0.0, 'batch_size': 1280, 'epochs': 80, 'cuda': use_cuda, 'log_interval': 100, 'exp_scheduler_gamma': 1.0, 'beta': True, 'l1_regularization': False, 'greatest_path_probability': True}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "learner_args['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'input_dim': 8, 'output_dim': 4, 'depth': int(args.depth), 'lamda': 0.001, 'lr': 0.001, 'weight_decay': 0.0, 'batch_size': 1280, 'epochs': 80, 'cuda': use_cuda, 'log_interval': 100, 'exp_scheduler_gamma': 1.0, 'beta': True, 'l1_regularization': False, 'greatest_path_probability': True}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/sdt/deprecated/sdt_rl_train.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if learner_args[cuda] else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "env.observation_space.shape[0]",
                            "Subscript"
                        ],
                        [
                            "env.observation_space.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.parameters()) + list(self.sdt.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_131": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pi(torch.from_numpy(s).unsqueeze(0).float().to(device)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "advantage",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "advantage_lst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_120": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pi_a) - torch.log(prob_a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "s_prime_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "prob_a_lst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_112": {
                "input": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "td_target - self.v(s)",
                            "BinOp"
                        ],
                        [
                            "delta.detach()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./model/sdt_ppo/' + path",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "input": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(torch.log(pi_a) - torch.log(prob_a))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_123": {
                "input": {
                    "value": "self.v(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "td_target.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./model/sdt_ppo/' + path",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_120": {
                "input": {
                    "value": "prob_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_123": {
                "input": {
                    "value": "surr1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "s_prime",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/sdt/sdt_discretization.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "tree.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack(parameters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "data": {
                    "value": "100 * torch.ones(parameter.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "new_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "new_weights[max_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_13": {
                "*size": {
                    "value": "parameter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/sdt/sdt_evaluation.py": {
        "torch": {
            "Softmax_34": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(data_path, label_path, partition='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(10000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_175": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_122": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(torch.Tensor([s]))",
                            "Call"
                        ],
                        [
                            "model(torch.Tensor([s]))",
                            "Call"
                        ],
                        [
                            "tree.forward(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor([s])",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_122": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(torch.Tensor([s]))",
                            "Call"
                        ],
                        [
                            "model(torch.Tensor([s]))",
                            "Call"
                        ],
                        [
                            "tree.forward(x)[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/common_func.py": {
        "torch": {}
    },
    "src/utils/dataset.py": {
        "torch": {}
    },
    "src/utils/heuristic_evaluation.py": {
        "torch": {}
    },
    "src/viper/algorithms/algorithm.py": {
        "torch": {
            "as_tensor_276": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(test_env.state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_371": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(test_env.state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[torch.as_tensor(dic[key], dtype=dtype) for dic in raw_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(dic[key], dtype=dtype) for dic in raw_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_79": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[torch.as_tensor(dic[key], dtype=dtype) for dic in raw_batch]",
                            "ListComp"
                        ],
                        [
                            "[torch.as_tensor(dic[key], dtype=dtype) for dic in raw_batch]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_108": {
                "variable": {
                    "value": "dic",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_188": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_env.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_277": {
                "data": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(test_env.state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "env.state",
                            "Attribute"
                        ],
                        [
                            "torch.as_tensor(state, dtype=torch.float).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_277": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_338": {
                "variable": {
                    "value": "dic",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_52": {
                "data": {
                    "value": "dic[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.action_dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ],
                        [
                            "self.action_dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_78": {
                "data": {
                    "value": "dic[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.action_dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ],
                        [
                            "self.action_dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/viper/algorithms/config/Dagger.py": {
        "torch": {}
    },
    "src/viper/algorithms/config/QLearning_Atari.py": {
        "torch": {}
    },
    "src/viper/algorithms/config/SAC.py": {
        "torch": {}
    },
    "src/viper/algorithms/models.py": {
        "torch": {
            "Sequential_20": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.state_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_args['sizes'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.observation_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.reward_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_args['sizes'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.done_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_args['sizes'][-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_52": {
                "variable": {
                    "value": "self.MSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_53": {
                "variable": {
                    "value": "self.BCE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_159": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim // n_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_122": {
                "variable": {
                    "value": "self.action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.state_per_agent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "sizes[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sizes[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "sizes[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "sizes[j + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "paddings[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "done",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.done_head(embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "done",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - done, done]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_72": {
                "variable": {
                    "value": "done",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "done",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.done_head(embedding).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.done_head(embedding))",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - done, done], dim=1)",
                            "Call"
                        ],
                        [
                            "Categorical(done).sample()",
                            "Call"
                        ],
                        [
                            "done > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "gather_150": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q(torch.cat([obs, action], dim=-1))",
                            "Call"
                        ],
                        [
                            "self.q(state)",
                            "Call"
                        ],
                        [
                            "q.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "q[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "q - q.mean(dim=1, keepdim=True) + v",
                            "BinOp"
                        ],
                        [
                            "torch.gather(input=q, dim=1, index=action.unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "action.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/viper/algorithms/utils.py": {
        "torch": {
            "zeros_61": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, (1 + 2 * k) * depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, l * l * depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_452": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, n, depth * degree)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_389": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "f'runs/{self.name}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "stack_236": {
                "tensors": {
                    "value": "[agent_return[i] for agent_return in lst]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_333": {
                "input": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "any_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_442": {
                "obj": {
                    "value": "self.state_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/viper/dagger.py": {
        "torch": {
            "set_num_threads_86": {
                "int": {
                    "value": "args.n_thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_num_threads_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/viper/lunar_lander.py": {
        "torch": {
            "set_num_threads_106": {
                "int": {
                    "value": "args.n_thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_num_threads_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/viper/rl.py": {
        "torch": {
            "set_num_threads_102": {
                "int": {
                    "value": "args.n_thread",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_num_threads_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}