{
    "tableqa/seq_pair_apply2tables.py": {
        "sklearn": {
            "average_precision_score_101": {
                "variable": {
                    "value": "avg_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_cells.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "cell_preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/validation.py": {
        "sklearn": {
            "f1_score_14": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "average",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'micro'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "f1_score_23": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/distloader_base.py": {
        "torch": {
            "tensor_68": {
                "variable": {
                    "value": "num_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.num_batches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/distloader_seq_pair.py": {
        "torch": {
            "tensor_71": {
                "variable": {
                    "value": "all_teacher_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inst.teacher_labels for inst in insts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "all_teacher_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inst.teacher_labels for inst in insts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "all_teacher_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inst.teacher_labels for inst in insts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.zeros(batch_size, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.zeros(batch_size, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[i.label for i in insts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "all_toks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "all_token_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, maxlen + 2), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tableqa/example_apply.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.opts.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/apply_seq_pair.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/classify_seq_pair.py": {
        "torch": {
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "input": {
                    "value": "logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "input": {
                    "value": "teacher_labels / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "np.append(preds, logits, axis=0)",
                            "Call"
                        ],
                        [
                            "all_gather(torch.tensor(preds, dtype=torch.float32).to(args.device)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "input_labels",
                            "Name"
                        ],
                        [
                            "np.append(labels, input_labels, axis=0)",
                            "Call"
                        ],
                        [
                            "all_gather(torch.tensor(labels, dtype=torch.int32).to(args.device)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/distributed.py": {
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(tensor, device=hypers.device)",
                            "Call"
                        ],
                        [
                            "tensor.to(hypers.device).detach()",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([tensor, canary.unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "to_tensor(hypers, tensor)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "hypers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "check_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "check_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(check_id, dtype=tensor.dtype).item()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "canary",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor, canary.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "gather_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "[tensor[:-1].unsqueeze(0) if add_dim else tensor[:-1] for tensor in gather_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(tensor, device=hypers.device)",
                            "Call"
                        ],
                        [
                            "tensor.to(hypers.device).detach()",
                            "Call"
                        ],
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([tensor, canary.unsqueeze(0)])",
                            "Call"
                        ],
                        [
                            "to_tensor(hypers, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/hypers_base.py": {
        "torch": {
            "manual_seed_93": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.seed",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_114": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not self.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_115": {
                "variable": {
                    "value": "self.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_118": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_95": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.seed",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_117": {
                "device": {
                    "value": "self.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/modeling_repr_seq_pair.py": {
        "torch": {
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "pooled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_output_a, pooled_output_b, pooled_output_a * pooled_output_b, (pooled_output_a - pooled_output_b) ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.hidden_size * 4, config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_120": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_123": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "config.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/transformer_loader.py": {
        "torch": {
            "load_198": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, 'model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "hypers",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saved_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "hypers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(saved_dir, 'training_args.bin'), map_location='cpu')",
                            "Call"
                        ],
                        [
                            "args",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "hypers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(saved_dir, 'training_args.bin'), map_location='cpu')",
                            "Call"
                        ],
                        [
                            "args",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torch_util/transformer_optimize.py": {
        "torch": {
            "DataParallel_112": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(args.n_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_116": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "os.path.join(resume_from, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "os.path.join(resume_from, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__151": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.hypers.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.hypers.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}