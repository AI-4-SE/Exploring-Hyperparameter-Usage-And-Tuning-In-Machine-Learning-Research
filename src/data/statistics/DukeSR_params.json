{
    "code/cos_sgdr.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/data/DIV2K.py": {
        "torch": {}
    },
    "code/data/DIV2K_jpeg.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "self.pack_tar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "name_tar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.apath, dir_HR, packname)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dir_tar, filename + '.png')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_86": {
                "variable": {
                    "value": "img_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.apath, dq, xs, packname)",
                            "Call"
                        ],
                        [
                            "'{}/{}x{}{}'.format(self.dir_in[self.idx_scale][quality], filename, self.scale[self.idx_scale], ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_87": {
                "variable": {
                    "value": "img_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name_tar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.apath, dir_HR, packname)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.dir_tar, filename + '.png')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "name_in",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.apath, dq, xs, packname)",
                            "Call"
                        ],
                        [
                            "'{}/{}x{}{}'.format(self.dir_in[self.idx_scale][quality], filename, self.scale[self.idx_scale], ext)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/data/MyImage.py": {
        "torch": {}
    },
    "code/data/SRData.py": {
        "torch": {}
    },
    "code/data/TEST.py": {
        "torch": {}
    },
    "code/data/__init__.py": {
        "torch": {}
    },
    "code/data/common.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "torch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img.transpose((2, 0, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/data/denoise.py": {
        "torch": {}
    },
    "code/dataloader.py": {
        "torch": {
            "set_num_threads_34": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_91": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/loss/__init__.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.to_relu_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.to_relu_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.to_relu_3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.to_relu_4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_87": {
                "size_average": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vgg(inp)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "reduce": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vgg(tar)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MSELoss_21": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_23": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/lrfinder.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "torch": {
            "manual_seed_8": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/DNEDSR.py": {
        "torch": {
            "ReLU_18": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.body1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.tail1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.body2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.tail2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail2",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/EDSR.py": {
        "torch": {
            "ReLU_16": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model/MDSR.py": {
        "torch": {
            "ReLU_16": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(common.ResBlock(conv, n_feats, 5, act=act), common.ResBlock(conv, n_feats, 5, act=act)) for _ in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[common.Upsampler(conv, s, n_feats, act=False) for s in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "common.ResBlock(conv, n_feats, 5, act=act)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/model/__init__.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_26": {
                "variable": {
                    "value": "my_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "my_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "module.make_model(self.args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(my_model, range(0, self.args.n_GPUs))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(0, self.args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "self.args.pre_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/common.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channelss",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_17": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_52": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PixelShuffle_57": {
                "upscale_factor": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/test.py": {
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/tools/jpeg2binary.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "pack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "targetDir + '/pack.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(png.astype(float)).byte()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(targetDir, idx + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/trainer.py": {
        "torch": {
            "zeros_83": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "torch": {
            "Tensor_117": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_281": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_314": {},
            "StepLR_102": {
                "variable": {
                    "value": "my_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer_function(trainable, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "my_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/loss.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "self.log_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log_training, log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log_test, log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trainer.model.module.state_dict()",
                            "Call"
                        ],
                        [
                            "trainer.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.dir + '/model/model_lastest.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "input_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputlist[i:i + nGPUs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_111": {
                "variable": {
                    "value": "my_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer_function(trainable, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.args.decay_type.split('_')",
                            "Call"
                        ],
                        [
                            "list(map(lambda x: int(x), milestones))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "self.log_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/log_training.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/log_test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "trainer.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/loss.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "trainer.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/optimizer.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.log_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/log_training.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/log_test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "self.dir + '/optimizer.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trainer.model.module.state_dict()",
                            "Call"
                        ],
                        [
                            "trainer.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.dir + '/model/model_best.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trainer.model.module.state_dict()",
                            "Call"
                        ],
                        [
                            "trainer.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/model/model_{}.pt'.format(self.dir, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "self.dir + '/model/model_lastest.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "self.dir + '/model/model_{}.pt'.format(resume)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}