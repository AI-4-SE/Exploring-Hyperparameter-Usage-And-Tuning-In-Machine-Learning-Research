{
    "dataset_creation/domain_clustering_analysis.py": {
        "sklearn": {
            "PCA_226": {
                "variable": {
                    "value": "pca_plotting",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianMixture_232": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PCA_255": {
                "variable": {
                    "value": "pca_plotting",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "dloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerDataset(data, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_batch, tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_34": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1].to(device)",
                            "Call"
                        ],
                        [
                            "[i[1] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[m + [0] * (max_length - len(m)) for m in masks]",
                            "ListComp"
                        ],
                        [
                            "[[1] * len(i) for i in input_ids]",
                            "ListComp"
                        ],
                        [
                            "text_to_batch_transformer([row[0]], self.tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/logistic_regression_baseline.py": {
        "sklearn": {
            "TfidfVectorizer_64": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_71": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.C",
                            "Attribute"
                        ]
                    ]
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_78": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data.values[:, 1].astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/metrics.py": {
        "sklearn": {
            "precision_recall_fscore_support_27": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([l[0] for l in labels_split])",
                            "Call"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.decode(outputs[1], masks)",
                            "Call"
                        ],
                        [
                            "np.argmax(outputs[1].detach().cpu().numpy().reshape(-1, self.num_labels), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "averaging",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_205": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([l[0] for l in labels_split])",
                            "Call"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "logits[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_206": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(labels, logits[:, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(labels, logits[:, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(dataset.tokenizer)",
                            "Call"
                        ],
                        [
                            "partial(collator, dataset.tokenizer.pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collator, pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids != self.pad_token_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "split_158": {
                "variable": {
                    "value": "logits_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "sentence_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sent) for seq in edu_sizes for sent in seq]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "split_159": {
                "variable": {
                    "value": "labels_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([l[0] for l in labels_split])",
                            "Call"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "sentence_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(sent) for seq in edu_sizes for sent in seq]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[l[0] for l in labels_split]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "final_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_163": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "final_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_168": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_175": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "[ledu.unsqueeze(0), lsent.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/cnn_baseline.py": {
        "torch": {
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_132": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "pretrained_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([tokenizer.emb.vectors, np.zeros(shape=(1, 300))], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/datareader.py": {
        "torch": {
            "tensor_256": {
                "variable": {
                    "value": "lm_batch[cls_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l for i in input_data for l in i[2]]",
                            "ListComp"
                        ],
                        [
                            "[i[2] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[i[2] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[l + [-1] * (max_seq_len - len(l)) for l in labels]",
                            "ListComp"
                        ],
                        [
                            "[l for i in input_data for l in i[1]]",
                            "ListComp"
                        ],
                        [
                            "[i[1] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] if s['label'] == 'non-check-worthy' or not self.use_fine_labels else FINE_GRAINED_LABELS[row['section_title'].lower()] for s in row['samples']]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] for s in row['samples']]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] for s in row['samples']]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "lm_batch[unmasked_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tokenizer.encode(t, add_special_tokens=True, max_length=max_length, truncation=True, verbose=False) for t in text]",
                            "ListComp"
                        ],
                        [
                            "[tokenizer.encode(t, add_special_tokens=True, max_length=max_length, truncation=True, verbose=False) for t in text]",
                            "ListComp"
                        ],
                        [
                            "[[id_ for (i, sent) in enumerate(input_ids) for (j, id_) in enumerate(sent) if i == 0 or j != 0][:tokenizer.model_max_length]]",
                            "List"
                        ],
                        [
                            "[tokenizer.encode_ids_with_eos(t)[:max_seq_len] for t in text]",
                            "ListComp"
                        ],
                        [
                            "[i[0][0] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[i + [pad_token_id] * (max_length - len(i)) for i in input_ids]",
                            "ListComp"
                        ],
                        [
                            "[i[0][0] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[i + [pad_token_id] * (max_length - len(i)) for i in input_ids]",
                            "ListComp"
                        ],
                        [
                            "[i[0] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[i + [tokenizer.pad_token_id] * (max_length - len(i)) for i in input_ids]",
                            "ListComp"
                        ],
                        [
                            "self.tokenizer_fn([row[0]], self.tokenizer)",
                            "Call"
                        ],
                        [
                            "self.tokenizer_fn(sents, self.tokenizer)",
                            "Call"
                        ],
                        [
                            "self.tokenizer_fn([row[0]], self.tokenizer)",
                            "Call"
                        ],
                        [
                            "self.tokenizer_fn(sents, self.tokenizer)",
                            "Call"
                        ],
                        [
                            "text_to_batch_transformer([row[0]], self.tokenizer)",
                            "Call"
                        ],
                        [
                            "self.tokenizer_fn([row[0]], self.tokenizer)",
                            "Call"
                        ],
                        [
                            "self.tokenizer_fn(sents, self.tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_401": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "base_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_dataset.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_batch_transformer, self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_402": {
                "variable": {
                    "value": "val_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_batch_transformer, self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_414": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "base_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_dataset.dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_batch_transformer, self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_415": {
                "variable": {
                    "value": "val_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_batch_transformer, self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_217": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[l for i in input_data for l in i[2]]",
                            "ListComp"
                        ],
                        [
                            "[i[2] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[i[2] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[l + [-1] * (max_seq_len - len(l)) for l in labels]",
                            "ListComp"
                        ],
                        [
                            "[l for i in input_data for l in i[1]]",
                            "ListComp"
                        ],
                        [
                            "[i[1] for i in input_data]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] if s['label'] == 'non-check-worthy' or not self.use_fine_labels else FINE_GRAINED_LABELS[row['section_title'].lower()] for s in row['samples']]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] for s in row['samples']]",
                            "ListComp"
                        ],
                        [
                            "[LABELS[s['label']] for s in row['samples']]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_239": {
                "data": {
                    "value": "seq_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1] * s + [0] * (max_seq_len - s) for s in seq_lens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_243": {
                "data": {
                    "value": "[i[3] for i in input_data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/domain_adaptation_baselines.py": {
        "torch": {
            "device_132": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "pretrained_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([tokenizer.emb.vectors, np.zeros(shape=(1, 300))], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/model.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(embeddings, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Conv2d(in_channels, out_channels, (kernel_height, embeddings.shape[1]), stride, padding) for kernel_height in kernel_heights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(kernel_heights) * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_labels",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_43": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out.squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_44": {
                "variable": {
                    "value": "max_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv_out.squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "activation.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "max_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "all_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_layer(input)",
                            "Call"
                        ],
                        [
                            "[self.conv_block(input, self.conv_layers[i]) for i in range(len(self.conv_layers))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pretrained_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TransformerEncoder_89": {
                "variable": {
                    "value": "self.xformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim, dropout=dropout_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, config.hidden_size) for _ in task_num_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tanh_140": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.task_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, n_labels) for n_labels in task_num_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_195": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "self.cls_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_249": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_255": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_308": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_315": {
                "variable": {
                    "value": "self.cls_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_371": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, config.hidden_size) for _ in task_num_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tanh_372": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.task_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, n_labels) for n_labels in task_num_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_378": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_174": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_287": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_343": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_411": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_90": {
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "ff_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_height, embeddings.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/neural_baselines.py": {
        "torch": {
            "device_148": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_151": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "pretrained_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([tokenizer.emb.vectors, np.zeros(shape=(1, 300))], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/pu_learning.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_40": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train.py": {
        "torch": {
            "DataLoader_468": {
                "variable": {
                    "value": "train_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[train_dset]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_sequence_batch_transformer, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_transformer, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_transformer_with_weight, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_language_modeling, self.tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_dataset_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "save_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_216": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_624": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(collate_sequence_batch_transformer, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_transformer, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_transformer_with_weight, pad_token_id)",
                            "Call"
                        ],
                        [
                            "partial(collate_batch_language_modeling, self.tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_dataset_workers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(labels) / (self.num_labels[0] * np.bincount(labels))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_231": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(len(labels) / (self.num_labels[0] * np.bincount(labels)))",
                            "Call"
                        ],
                        [
                            "weight.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_87": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_235": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor(class_weights).type(torch.FloatTensor).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_519": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids != self.tokenizer.pad_token_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__327": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__555": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_masked_language_modeling.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}