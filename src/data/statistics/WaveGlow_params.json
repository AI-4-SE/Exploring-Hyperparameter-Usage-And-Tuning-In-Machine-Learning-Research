{
    "frozen_model.py": {
        "tensorflow": {
            "run_84": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "condition_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, hparams.num_mels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_34": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.inference(condition_placeholder)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, name='outputs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_42": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_45": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "input_graph_def": {
                    "value": "graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "'model/outputs'.split(',')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_49": {
                "name": {
                    "value": "FLAGS.frozen_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "generate.py": {
        "tensorflow": {
            "get_checkpoint_state_33": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "condition_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, hparams.num_mels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_82": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generate_by_frozen_model.py": {
        "tensorflow": {
            "Session_49": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_51": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_50": {
                "name": {
                    "value": "args.frozen_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_54": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hparam.py": {
        "tensorflow": {}
    },
    "models/glow.py": {
        "tensorflow": {
            "shape_95": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[0] * shape[1] * shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'upsample_filter_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[stride * filter_width, lc_channels, lc_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_46": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(samples, [batch, -1, self.n_group * 1])",
                            "Call"
                        ],
                        [
                            "samples[:, :, self.n_early_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([shape[0], shape[1], remaining_channels])",
                            "Call"
                        ],
                        [
                            "samples * sigma",
                            "BinOp"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "Invertible1x1Conv(samples, remaining_channels, True)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, samples], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(samples, [batch, -1, self.n_group * 1])",
                            "Call"
                        ],
                        [
                            "samples[:, :, self.n_early_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([shape[0], shape[1], remaining_channels])",
                            "Call"
                        ],
                        [
                            "samples * sigma",
                            "BinOp"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "Invertible1x1Conv(samples, remaining_channels, True)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, samples], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, -1, self.n_group * 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, -1, self.n_group * self.lc_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "output_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_108": {
                "variable": {
                    "value": "lc_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_transpose_111": {
                "variable": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('upsample_filter_{}'.format(i), [stride * filter_width, lc_channels, lc_channels], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "self.upsample_filters[i]",
                            "Subscript"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, lc_length * stride, self.lc_channels]",
                            "List"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_125": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_129": {
                "variable": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], -1, self.lc_channels * self.n_group]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_133": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(samples, [batch, -1, self.n_group * 1])",
                            "Call"
                        ],
                        [
                            "samples[:, :, self.n_early_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal([shape[0], shape[1], remaining_channels])",
                            "Call"
                        ],
                        [
                            "samples * sigma",
                            "BinOp"
                        ],
                        [
                            "tf.concat([samples_a, samples_b], axis=-1)",
                            "Call"
                        ],
                        [
                            "Invertible1x1Conv(samples, remaining_channels, True)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, samples], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'waveglow'",
                            "MethodArgument"
                        ],
                        [
                            "'waveglow'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "log_s_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "self.z * self.z / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'waveglow'",
                            "MethodArgument"
                        ],
                        [
                            "'waveglow'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_75": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[samples_a, samples_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [batch, -1, self.n_group * self.lc_channels])",
                            "Call"
                        ],
                        [
                            "tf.contrib.nn.conv1d_transpose(value=local_conditions, filter=filter, output_shape=output_shape, stride=stride)",
                            "Call"
                        ],
                        [
                            "self.upsample_network(local_conditions)",
                            "Call"
                        ],
                        [
                            "tf.pad(local_conditions, [[0, 0], [0, pad], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(local_conditions, [shape[0], -1, self.lc_channels * self.n_group])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_145": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[samples_a, samples_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "'glow_{}'.format(str(k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "self.z * self.z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "'glow_{}'.format(str(k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_144": {
                "x": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_74": {
                "x": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "tensorflow": {
            "get_variable_23": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer(shape=shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'invertible1x1conv'",
                            "MethodArgument"
                        ],
                        [
                            "'wavenet'",
                            "MethodArgument"
                        ],
                        [
                            "'causal_conv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_28": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.qr(np.random.randn(channels, channels))[0].astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_39": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.cast(tf.matrix_determinant(tf.cast(w, tf.float64)), tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv1d(samples, w_s, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_start', [residual_channels])",
                            "Call"
                        ],
                        [
                            "create_bias_variable('b_s', [2 * residual_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_80": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv1d(skip_outputs, w_e, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_end', [n_in_channels * 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_95": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "causal_conv(samples, w_s, dilation, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_start', [residual_channels])",
                            "Call"
                        ],
                        [
                            "create_bias_variable('b_s', [2 * residual_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_102": {
                "variable": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv1d(local_conditions, w_lc, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_lc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_lc', [2 * residual_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:, :, :residual_channels]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_107": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out[:, :, residual_channels:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "variable": {
                    "value": "skip_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv1d(out, w_skip, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_skip', [skip_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_124": {
                "variable": {
                    "value": "residual_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv1d(out, w_residual, 1, 'SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_bias_variable('b_residual', [residual_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_140": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [pad, pad], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_149": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "restored",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_to_time(conv, dilation)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(padded, filter_, stride=1, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, tf.shape(value)[1], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_156": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_158": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, pad_elements], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(value, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(value, [[0, 0], [0, pad_elements], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dilation, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "variable": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(padded, [-1, dilation, shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_165": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "prepared",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dilation, -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prepared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(value, [dilation, -1, shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_21": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_27": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "initializer": {
                    "value": "initializer(shape=shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'invertible1x1conv'",
                            "MethodArgument"
                        ],
                        [
                            "'wavenet'",
                            "MethodArgument"
                        ],
                        [
                            "'causal_conv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'invertible1x1conv'",
                            "MethodArgument"
                        ],
                        [
                            "'wavenet'",
                            "MethodArgument"
                        ],
                        [
                            "'causal_conv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1]) * g",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channels, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_44": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [1, channels, channels])",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_w, [1, channels, channels])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [1, channels, channels])",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_w, [1, channels, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, channels, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_49": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [1, channels, channels])",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(_w, [1, channels, channels])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'invertible1x1conv'",
                            "MethodArgument"
                        ],
                        [
                            "'wavenet'",
                            "MethodArgument"
                        ],
                        [
                            "'causal_conv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "'dilated_conv1d_{}'.format(str(dilation))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_132": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1]) * g",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'invertible1x1conv'",
                            "MethodArgument"
                        ],
                        [
                            "'wavenet'",
                            "MethodArgument"
                        ],
                        [
                            "'causal_conv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv1d_143": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_to_batch(padded, dilation)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_147": {
                "variable": {
                    "value": "restored",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(value, padding)",
                            "Call"
                        ],
                        [
                            "tf.pad(value, [[0, 0], [0, pad_elements], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "time_to_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "tensor": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(reshaped, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prepared, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0] * dilation, -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_164": {
                "name": {
                    "value": "batch_to_time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(reshaped, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(prepared, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.div(shape[0], dilation), -1, shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_39": {
                "x": {
                    "value": "tf.cast(tf.matrix_determinant(tf.cast(w, tf.float64)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "batch * length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_61": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(causal_conv(samples, w_s, dilation, kernel_size), b_s)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variable('w_start', [1, n_in_channels, residual_channels])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_s, 'w_start_g')",
                            "Call"
                        ],
                        [
                            "create_variable('w_s', [kernel_size, residual_channels, 2 * residual_channels])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_s, 'w_s_g')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_80": {
                "input": {
                    "value": "skip_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(skip_outputs_list)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variable('w_end', [1, skip_channels, n_in_channels * 2])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_e, 'w_end_g')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_103": {
                "input": {
                    "value": "local_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv1d(local_conditions, w_lc, 1, 'SAME'), b_lc)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_lc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variable('w_lc', [1, lc_channels, 2 * residual_channels])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_lc, 'w_lc_g')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_116": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples + local_conditions",
                            "BinOp"
                        ],
                        [
                            "gate * filter",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variable('w_skip', [1, residual_channels, skip_channels])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_skip, 'w_skip_g')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_125": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples + local_conditions",
                            "BinOp"
                        ],
                        [
                            "gate * filter",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w_residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variable('w_residual', [1, residual_channels, residual_channels])",
                            "Call"
                        ],
                        [
                            "weight_normalization(w_residual, 'w_residual_g')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "tf.matrix_determinant(tf.cast(w, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_169": {
                "x": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_151": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1]) * g",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "cast_53": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_60": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "global_step < hparams.warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.convert_to_tensor(hparams.initial_learning_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.train.exponential_decay(hparams.initial_learning_rate, global_step - hparams.warmup_steps + 1, hparams.warmup_steps, hparams.decay_rate)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_87": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Coordinator_174": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr * warmup_steps ** 0.5 * tf.minimum(step * warmup_steps ** (-1.5), step ** (-0.5))",
                            "BinOp"
                        ],
                        [
                            "tf.cond(global_step < hparams.warmup_steps, lambda : tf.convert_to_tensor(hparams.initial_learning_rate), lambda : tf.train.exponential_decay(hparams.initial_learning_rate, global_step - hparams.warmup_steps + 1, hparams.warmup_steps, hparams.decay_rate))",
                            "Call"
                        ],
                        [
                            "consine_learning_rate_decay(global_step)",
                            "Call"
                        ],
                        [
                            "linear_learning_rate_decay(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_239": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_241": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_242": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "x": {
                    "value": "hparams.final_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr * warmup_steps ** 0.5 * tf.minimum(step * warmup_steps ** (-1.5), step ** (-0.5))",
                            "BinOp"
                        ],
                        [
                            "tf.cond(global_step < hparams.warmup_steps, lambda : tf.convert_to_tensor(hparams.initial_learning_rate), lambda : tf.train.exponential_decay(hparams.initial_learning_rate, global_step - hparams.warmup_steps + 1, hparams.warmup_steps, hparams.decay_rate))",
                            "Call"
                        ],
                        [
                            "consine_learning_rate_decay(global_step)",
                            "Call"
                        ],
                        [
                            "linear_learning_rate_decay(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_67": {
                "x": {
                    "value": "hparams.final_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr * warmup_steps ** 0.5 * tf.minimum(step * warmup_steps ** (-1.5), step ** (-0.5))",
                            "BinOp"
                        ],
                        [
                            "tf.cond(global_step < hparams.warmup_steps, lambda : tf.convert_to_tensor(hparams.initial_learning_rate), lambda : tf.train.exponential_decay(hparams.initial_learning_rate, global_step - hparams.warmup_steps + 1, hparams.warmup_steps, hparams.decay_rate))",
                            "Call"
                        ],
                        [
                            "consine_learning_rate_decay(global_step)",
                            "Call"
                        ],
                        [
                            "linear_learning_rate_decay(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_162": {
                "name": {
                    "value": "mean_log_det",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.mean_log_det",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_163": {
                "name": {
                    "value": "mean_log_scale",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.mean_log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_164": {
                "name": {
                    "value": "prior_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.prior_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr * warmup_steps ** 0.5 * tf.minimum(step * warmup_steps ** (-1.5), step ** (-0.5))",
                            "BinOp"
                        ],
                        [
                            "tf.cond(global_step < hparams.warmup_steps, lambda : tf.convert_to_tensor(hparams.initial_learning_rate), lambda : tf.train.exponential_decay(hparams.initial_learning_rate, global_step - hparams.warmup_steps + 1, hparams.warmup_steps, hparams.decay_rate))",
                            "Call"
                        ],
                        [
                            "consine_learning_rate_decay(global_step)",
                            "Call"
                        ],
                        [
                            "linear_learning_rate_decay(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_228": {
                "variable": {
                    "value": "(clipped_gradients, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[grad for (grad, var) in averaged_gradients]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_55": {
                "x": {
                    "value": "step * warmup_steps ** (-1.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "step ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "optimizer.compute_gradients(model.loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_176": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_220": {
                "name": {
                    "value": "average_grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_222": {
                "name": {
                    "value": "average_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "averaged_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(tower_losses) / len(tower_losses)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_235": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_237": {
                "variable": {
                    "value": "train_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[train_op, update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_247": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_250": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "value": {
                    "value": "hparams.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_63": {
                "learning_rate": {
                    "value": "hparams.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - hparams.warmup_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "hparams.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "hparams.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_182": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, hparams.num_mels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_221": {
                "inputs": {
                    "value": "tower_losses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_232": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_206": {
                "device_name": {
                    "value": "assign_to_device('/gpu:%d' % int(gpu_ids[i]), ps_device='cpu:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "'tower_%d' % int(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}