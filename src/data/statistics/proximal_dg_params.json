{
    "config.py": {
        "torch": {
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_60": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/layers/denseblock.py": {
        "torch": {
            "Sequential_320": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nl",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nl",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nl",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nl",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_188": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_243": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_305": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * in_channels if bottleneck_channels is None else bottleneck_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "bottleneck_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * in_channels if bottleneck_channels is None else bottleneck_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "bottleneck_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * in_channels if bottleneck_channels is None else bottleneck_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * in_channels if bottleneck_channels is None else bottleneck_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "bottleneck_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * in_channels if bottleneck_channels is None else bottleneck_channels",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_248": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_255": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/layers/minibatchdiscrimination.py": {
        "torch": {
            "Parameter_44": {
                "variable": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features, intermediate_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.T.view(self.in_features, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_62": {
                "input": {
                    "value": "-torch.abs(M - M_t).sum(3)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "M - M_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/layers/residual.py": {
        "torch": {
            "Sequential_77": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_144": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "filters[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "paddings[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_157": {
                "in_channels": {
                    "value": "filters[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "paddings[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/layers/selfattention.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dims // 8 if output_dims is None else output_dims",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dims // 8 if output_dims is None else output_dims",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(out_key, out_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "variable": {
                    "value": "out_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.value(x).view(dims)",
                            "Call"
                        ],
                        [
                            "torch.bmm(out_value, attn).view(x.size())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(torch.bmm(out_key, out_query), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_58": {
                "input": {
                    "value": "out_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.key(x).view(dims).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query(x).view(dims)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/layers/spectralnorm.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.w_bar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_63": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mv_75": {
                "input": {
                    "value": "torch.t(self.w_bar.view(height, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_78": {
                "input": {
                    "value": "self.w_bar.view(height, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_75": {
                "input": {
                    "value": "self.w_bar.view(height, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/layers/virtualbatchnorm.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mu) / std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "var_50": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mu) / std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eps + var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/logging/visualize.py": {
        "torch": {
            "sum_382": {
                "input": {
                    "value": "p.grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/auxclassifier.py": {
        "torch": {
            "randn_72": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_162": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_79": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_168": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/boundaryequilibrium.py": {
        "torch": {
            "randn_189": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_191": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/draganpenalty.py": {
        "torch": {
            "rand_104": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "real_inputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_107": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "real_inputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_111": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(real_inputs.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/energybased.py": {
        "torch": {
            "randn_190": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/featurematching.py": {
        "torch": {
            "mse_loss_45": {
                "input": {
                    "value": "fgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(fake, feature_matching=True)",
                            "Call"
                        ],
                        [
                            "discriminator(fake, label_gen, feature_matching=True)",
                            "Call"
                        ],
                        [
                            "discriminator(fake, labels, feature_matching=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(real_inputs, feature_matching=True)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen, feature_matching=True)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels, feature_matching=True)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_94": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/functional.py": {
        "torch": {
            "clamp_29": {
                "variable": {
                    "value": "dgz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.99999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_39": {
                "variable": {
                    "value": "dgz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.99999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(dx, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.99999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "variable": {
                    "value": "target_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(dx, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(dx, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_ones",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(dgz) * (1.0 - label_smoothing)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_84": {
                "variable": {
                    "value": "grad_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_interpolate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "variable": {
                    "value": "grad_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_interpolate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "d_hid_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_hid_normalized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.normalize(d_hid, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "d_hid_normalized.view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "d_hid_normalized.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_31": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_44": {
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(dx)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_121": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_32": {
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(dgz)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(dgz)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_41": {
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_85": {
                "outputs": {
                    "value": "d_interpolate",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "interpolate",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(d_interpolate)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(d_interpolate)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_103": {
                "outputs": {
                    "value": "d_interpolate",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "interpolate",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(d_interpolate)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(d_interpolate)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "similarity ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_35": {
                "input": {
                    "value": "dgz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(dgz, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dgz, 1e-08, 0.99999999)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(dgz)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(dgz)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_65": {
                "input": {
                    "value": "dist.log_prob(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "input": {
                    "value": "-dgz + margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/historical.py": {
        "torch": {
            "sum_73": {
                "input": {
                    "value": "(p - self.sum_parameters[i].data / self.timesteps) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "(p - self.sum_parameters[i].data / self.timesteps) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/leastsquares.py": {
        "torch": {}
    },
    "torchgan/losses/loss.py": {
        "torch": {
            "randn_91": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_210": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_552": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_94": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_212": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_349": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_387": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(torch.norm(grad_dx_prox - grad_dx, dim=(2, 3)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_505": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ],
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_543": {
                "variable": {
                    "value": "penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(torch.norm(grad_dx - grad_dx_prox, dim=(2, 3)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_556": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_352": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_508": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_384": {
                "outputs": {
                    "value": "torch.unbind(dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_385": {
                "outputs": {
                    "value": "torch.unbind(dx_prox)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_387": {
                "input": {
                    "value": "torch.norm(grad_dx_prox - grad_dx, dim=(2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_540": {
                "outputs": {
                    "value": "torch.unbind(dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_541": {
                "outputs": {
                    "value": "torch.unbind(dx_prox)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_543": {
                "input": {
                    "value": "torch.norm(grad_dx - grad_dx_prox, dim=(2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_384": {
                "input": {
                    "value": "dx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_385": {
                "input": {
                    "value": "dx_prox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proximal_discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "proximal_discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "proximal_discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs, label_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_387": {
                "input": {
                    "value": "grad_dx_prox - grad_dx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unbind_540": {
                "input": {
                    "value": "dx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "discriminator(real_inputs, label_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_541": {
                "input": {
                    "value": "dx_prox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proximal_discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "proximal_discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "proximal_discriminator(real_inputs, label_gen)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs, labels)",
                            "Call"
                        ],
                        [
                            "prox_discriminator(real_inputs, label_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_543": {
                "input": {
                    "value": "grad_dx - grad_dx_prox",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/minimax.py": {
        "torch": {}
    },
    "torchgan/losses/mutualinfo.py": {
        "torch": {
            "randn_78": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/losses/wasserstein.py": {
        "torch": {
            "randn_265": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_277": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_267": {
                "variable": {
                    "value": "label_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "generator.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/metrics/classifierscore.py": {
        "torch": {
            "DataLoader_129": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_134": {
                "variable": {
                    "value": "up",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_89": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_140": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "x.to(next(inception_model.parameters()).device)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "gray_to_rgb(x)",
                            "Call"
                        ],
                        [
                            "x if self.transform is None else self.transform(x)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/metrics/duality_gap.py": {
        "torch": {}
    },
    "torchgan/metrics/eigen_val.py": {
        "torch": {
            "grad_83": {
                "variable": {
                    "value": "grad_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gen_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.generator_loss.loss",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "trainer.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_84": {
                "variable": {
                    "value": "grad_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "dis_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator_loss.loss",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "trainer.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/metrics/frechet_distance.py": {
        "torch": {
            "Identity_87": {
                "variable": {
                    "value": "self.classifier.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_88": {
                "variable": {
                    "value": "self.classifier.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_114": {
                "variable": {
                    "value": "x_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x_real, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x_real if self.transform is None else self.transform(x_real)",
                            "IfExp"
                        ],
                        [
                            "x_real.to(next(self.classifier.parameters()).device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "x_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x_gen, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x_gen if self.transform is None else self.transform(x_gen)",
                            "IfExp"
                        ],
                        [
                            "x_gen.to(next(self.classifier.parameters()).device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "generator.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/metrics/proximal_duality_gap.py": {
        "torch": {
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "perturb_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "disc_trainer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_114": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "perturb_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "gen_trainer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/models/acgan.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.label_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(d, self.num_classes, 4, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_69": {
                "input": {
                    "value": "y_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.label_embeddings(y.type(torch.LongTensor).to(y.device))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_73": {
                "*size": {
                    "value": "sample_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_74": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(sample_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/models/autoencoding.py": {
        "torch": {
            "Sequential_135": {
                "variable": {
                    "value": "last_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.n, self.ch, same_filters, 1, same_pad, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoding_dims, init_dim ** 2 * self.n)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "initial_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.n, self.n, same_filters, 1, same_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "upsample_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.n, self.n, upsample_filters, upsample_stride, upsample_pad, upsample_output_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoding_dims, init_dim ** 2 * self.n)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "initial_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.n, self.n, same_filters, 1, same_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "upsample_unit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(self.n, self.n, upsample_filters, upsample_stride, upsample_pad, upsample_output_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(init_dim ** 2 * (num_repeats + 1) * self.n, encoding_dims)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(init_dim ** 2 * (num_repeats + 1) * self.n, encoding_dims)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "*args": {
                    "value": "nn.Conv2d(self.input_dims, self.n, same_filters, 1, same_pad, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "init_dim ** 2 * self.n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "num_features": {
                    "value": "init_dim ** 2 * self.n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_95": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "stride": {
                    "value": "upsample_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "upsample_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "upsample_output_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "init_dim ** 2 * self.n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_121": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "stride": {
                    "value": "upsample_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "upsample_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "upsample_output_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "*args": {
                    "value": "nn.Conv2d(self.n * (num_repeats + 1), self.n * (num_repeats + 1), same_filters, 1, same_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "init_dim ** 2 * (num_repeats + 1) * self.n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoding_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_289": {
                "num_features": {
                    "value": "encoding_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_310": {
                "*args": {
                    "value": "nn.Conv2d(self.n * (num_repeats + 1), self.n * (num_repeats + 1), 3, 1, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_332": {
                "in_features": {
                    "value": "init_dim ** 2 * (num_repeats + 1) * self.n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoding_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_373": {
                "input": {
                    "value": "(x - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "nn.Conv2d(self.n * i, self.n * i, same_filters, 1, same_pad, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_273": {
                "num_features": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_283": {
                "num_features": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "*args": {
                    "value": "nn.Conv2d(self.n * i, self.n * i, 3, 1, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "in_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_320": {
                "in_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (num_repeats + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_371": {
                "input": {
                    "value": "(x - x2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "in_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "same_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ],
                        [
                            "scale_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same_pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ],
                        [
                            "scale_factor // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "stride": {
                    "value": "downsample_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "self.n * (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_298": {
                "in_channels": {
                    "value": "self.n * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n * (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "stride": {
                    "value": "downsample_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "scale_factor",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_pad",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/models/conditional.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.label_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_122": {
                "variable": {
                    "value": "self.label_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "(z, y_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_75": {
                "*size": {
                    "value": "sample_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_76": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(sample_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "(x, y_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/models/dcgan.py": {
        "torch": {
            "Sequential_94": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(d, 1, 4, 1, 0, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "nn.ConvTranspose2d(d, self.ch, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "nn.Conv2d(self.input_dims, d, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_172": {
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/models/infogan.py": {
        "torch": {
            "Linear_147": {
                "variable": {
                    "value": "self.dis_categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_dis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.cont_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_cont",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.cont_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_cont",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "OneHotCategorical_158": {
                "variable": {
                    "value": "dist_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.dis_categorical(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_159": {
                "variable": {
                    "value": "dist_cont",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.cont_mean(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(0.5 * self.cont_logvar(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.dist_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(d, d, 4, 1, 0, bias=not batchnorm)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.dist_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(d, d, 4, 1, 0, bias=not batchnorm)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "[z, c_dis, c_cont]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_133": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "not batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n * 2 ** (in_size.bit_length() - 4)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "not batchnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "0.5 * self.cont_logvar(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/models/model.py": {
        "torch": {
            "randn_47": {
                "*size": {
                    "value": "sample_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/models/sagan.py": {
        "torch": {
            "Sequential_114": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, 1, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, self.ch, 4, 2, 1, bias=True))",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_183": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "nn.Conv2d(self.input_dims, d, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_112": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_80": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_97": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_105": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/models/sngan.py": {
        "torch": {
            "Sequential_95": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, 1, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, self.ch, 4, 2, 1, bias=True))",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "nn.Conv2d(self.input_dims, d, 4, 2, 1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(self.encoding_dims, d, 4, 1, 0, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "self.input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "SpectralNorm2d(nn.ConvTranspose2d(d, d // 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_93": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "*args": {
                    "value": "SpectralNorm2d(nn.Conv2d(d, d * 2, 4, 2, 1, bias=use_bias))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "in_channels": {
                    "value": "self.encoding_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "int(self.n * 2 ** num_repeats)",
                            "Call"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "d // 2",
                            "BinOp"
                        ],
                        [
                            "self.n",
                            "Attribute"
                        ],
                        [
                            "d * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ],
                        [
                            "not batchnorm",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchgan/models/wgan.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=encoding_dims, out_channels=1024, kernel_size=4, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_75": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=256, kernel_size=4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1024, out_channels=1, kernel_size=4, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "in_channels": {
                    "value": "encoding_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_62": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_147": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_152": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_156": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_157": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/trainer/base_trainer.py": {
        "torch": {
            "device_72": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/trainer/parallel_trainer.py": {
        "torch": {
            "DataParallel_106": {
                "variable": {
                    "value": "getattr(self, key)._modules[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "getattr(self, key)._modules[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "devices",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/trainer/proximal_trainer.py": {
        "torch": {
            "device_70": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/trainer/trainer.py": {
        "torch": {
            "device_70": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchgan/utils.py": {
        "torch": {
            "rand_38": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "SIZE",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_47": {
                "variable": {
                    "value": "param_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "SIZE",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_48": {
                "variable": {
                    "value": "param_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "SIZE",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_1, grad_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_23": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_26": {
                "variable": {
                    "value": "grad_vector_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor(v)",
                            "Call"
                        ],
                        [
                            "v.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_27": {
                "variable": {
                    "value": "hv",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grad_vector_product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.dot(self.grad, v)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "hv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_hv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_15": {
                "variable": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "autograd.grad(loss, params, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grad_1, grad_2])",
                            "Call"
                        ],
                        [
                            "list(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_40": {
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(params ** 2).sum() / 2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(SIZE, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "[param_1, param_2]",
                            "List"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "loss_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(param_1 * param_2).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "param_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(SIZE, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_52": {
                "outputs": {
                    "value": "loss_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-(param_1 * param_2).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "param_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(SIZE, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_31": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "'cuda:{}'.format(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_58": {
                "type": {
                    "value": "'cuda:{}'.format(device)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}