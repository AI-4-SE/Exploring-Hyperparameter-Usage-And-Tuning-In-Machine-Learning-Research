{
    "train.py": {
        "sklearn": {
            "roc_auc_score_116": {
                "variable": {
                    "value": "val_auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_score": {
                    "value": "val_preds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_seq",
                    "possible_values": [
                        [
                            "Riiid_Sequence(train_group, seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_seq",
                    "possible_values": [
                        [
                            "Riiid_Sequence(val_group, seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "BCELoss_50": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "masked_select_81": {
                "variable": {
                    "value": "preds_masked",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(content_ids, parts, time_lag, ques_elapsed_time, answer_correct, ques_had_explian, user_answer)",
                            "Call"
                        ],
                        [
                            "model(content_ids, parts, time_lag, ques_elapsed_time, answer_correct, ques_had_explian, user_answer)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "loss_mask",
                    "possible_values": [
                        [
                            "answer_correct != 0",
                            "Compare"
                        ],
                        [
                            "answer_correct != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_82": {
                "variable": {
                    "value": "label_masked",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "possible_values": [
                        [
                            "data[7].to(device).float()",
                            "Call"
                        ],
                        [
                            "data[7].to(device).float()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "loss_mask",
                    "possible_values": [
                        [
                            "answer_correct != 0",
                            "Compare"
                        ],
                        [
                            "answer_correct != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_108": {
                "variable": {
                    "value": "preds_masked",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "model(content_ids, parts, time_lag, ques_elapsed_time, answer_correct, ques_had_explian, user_answer)",
                            "Call"
                        ],
                        [
                            "model(content_ids, parts, time_lag, ques_elapsed_time, answer_correct, ques_had_explian, user_answer)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "loss_mask",
                    "possible_values": [
                        [
                            "answer_correct != 0",
                            "Compare"
                        ],
                        [
                            "answer_correct != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_109": {
                "variable": {
                    "value": "label_masked",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "possible_values": [
                        [
                            "data[7].to(device).float()",
                            "Call"
                        ],
                        [
                            "data[7].to(device).float()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "loss_mask",
                    "possible_values": [
                        [
                            "answer_correct != 0",
                            "Compare"
                        ],
                        [
                            "answer_correct != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./saint.pt",
                    "possible_values": []
                }
            }
        }
    },
    "data_generator.py": {
        "torch": {
            "Riiid_Sequence_10": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.seq_len": {
                    "value": "seq_len",
                    "possible_values": [
                        [
                            "len(c_id)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "FFN_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_15": {
                    "variable": {
                        "value": "self.linear_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_ffn",
                        "possible_values": []
                    }
                },
                "ReLU_16": {
                    "variable": {
                        "value": "self.relu_1",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Linear_17": {
                    "variable": {
                        "value": "self.linear_2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_ffn",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Dropout_18": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "SaintPlus_26": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": []
                },
                "self.n_questions": {
                    "value": "n_questions",
                    "possible_values": []
                },
                "self.num_heads": {
                    "value": "num_heads",
                    "possible_values": []
                },
                "Embedding_33": {
                    "variable": {
                        "value": "self.pos_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "seq_len",
                        "possible_values": [
                            [
                                "content_ids.shape[1]",
                                "Subscript"
                            ]
                        ]
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Embedding_34": {
                    "variable": {
                        "value": "self.contentId_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_questions + 1",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Embedding_35": {
                    "variable": {
                        "value": "self.part_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_parts + 1",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Embedding_36": {
                    "variable": {
                        "value": "self.task_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_tasks + 1",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Linear_38": {
                    "variable": {
                        "value": "self.timelag_emb",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_39": {
                    "variable": {
                        "value": "self.elapsedT_emb",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Embedding_41": {
                    "variable": {
                        "value": "self.answerCorr_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "3",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Embedding_42": {
                    "variable": {
                        "value": "self.explan_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "3",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Embedding_43": {
                    "variable": {
                        "value": "self.answer_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "n_questions * 4 + 1",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Linear_45": {
                    "variable": {
                        "value": "self.emb_dense1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "4 * d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Linear_46": {
                    "variable": {
                        "value": "self.emb_dense2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "4 * d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Transformer_48": {
                    "variable": {
                        "value": "self.transformer",
                        "possible_values": []
                    },
                    "d_model": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "nhead": {
                        "value": "num_heads",
                        "possible_values": []
                    },
                    "num_encoder_layers": {
                        "value": "num_layers",
                        "possible_values": []
                    },
                    "num_decoder_layers": {
                        "value": "num_layers",
                        "possible_values": []
                    },
                    "dim_feedforward": {
                        "value": "d_ffn",
                        "possible_values": []
                    },
                    "dropout": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "LayerNorm_50": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "Linear_52": {
                    "variable": {
                        "value": "self.final_layer",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "log_62": {
                "variable": {
                    "value": "time_lag",
                    "possible_values": []
                },
                "input": {
                    "value": "time_lag + 1",
                    "possible_values": []
                }
            },
            "log_66": {
                "variable": {
                    "value": "elapsed_time",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_elapsed_time + 1",
                    "possible_values": []
                }
            },
            "clamp_73": {
                "variable": {
                    "value": "user_ans_id",
                    "possible_values": []
                },
                "input": {
                    "value": "(content_ids - 1) * 4 + user_answer",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "self.n_questions * 4",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "encoder_val",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(content_id_emb, part_emb, explain_emb, time_lag)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "decoder_val",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(time_lag, elapsed_time, answer_correct_emb, answer_emb)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_len",
                    "possible_values": [
                        [
                            "content_ids.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "over_head_mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.triu(np.ones((seq_len, seq_len)), k=1).astype('bool')",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "final_out",
                    "possible_values": []
                },
                "input": {
                    "value": "final_out",
                    "possible_values": [
                        [
                            "self.FFN(decoder_val)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(final_out + decoder_val)",
                            "Call"
                        ],
                        [
                            "self.final_layer(final_out)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(final_out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}