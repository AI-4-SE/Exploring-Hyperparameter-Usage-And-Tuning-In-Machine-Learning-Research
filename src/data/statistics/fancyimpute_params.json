{
    "experiments/complete_faces.py": {
        "sklearn": {
            "fetch_lfw_people_251": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "color": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "IterativeImputer_269": {
                "n_nearest_features": {
                    "value": "80",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/__init__.py": {
        "sklearn": {}
    },
    "fancyimpute/iterative_svd.py": {
        "sklearn": {
            "check_array_62": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedSVD_73": {
                "variable": {
                    "value": "tsvd",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "curr_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(2 ** i, self.rank)",
                            "Call"
                        ],
                        [
                            "self.rank",
                            "Attribute"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "self.svd_algorithm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/knn.py": {
        "sklearn": {
            "check_array_87": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "X.T",
                            "Attribute"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/matrix_factorization.py": {
        "sklearn": {
            "check_array_68": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/nuclear_norm_minimization.py": {
        "sklearn": {
            "check_array_112": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/similarity_weighted_averaging.py": {
        "sklearn": {
            "check_array_151": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/soft_impute.py": {
        "sklearn": {
            "randomized_svd_135": {
                "variable": {
                    "value": "(_, s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "M": {
                    "value": "X_filled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X",
                            "Name"
                        ]
                    ]
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_array_143": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randomized_svd_113": {
                "variable": {
                    "value": "(U, s, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "M": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "max_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "self.n_power_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fancyimpute/solver.py": {
        "sklearn": {
            "check_array_96": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "X.copy()",
                            "Call"
                        ],
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "X.astype(float)",
                            "Call"
                        ],
                        [
                            "np.asarray(X)",
                            "Call"
                        ],
                        [
                            "np.asarray(X)",
                            "Call"
                        ],
                        [
                            "self.normalizer.inverse_transform(X)",
                            "Call"
                        ],
                        [
                            "X_original.copy()",
                            "Call"
                        ],
                        [
                            "self.normalizer.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_array_127": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "X.copy()",
                            "Call"
                        ],
                        [
                            "check_array(X, force_all_finite=False)",
                            "Call"
                        ],
                        [
                            "X.astype(float)",
                            "Call"
                        ],
                        [
                            "np.asarray(X)",
                            "Call"
                        ],
                        [
                            "np.asarray(X)",
                            "Call"
                        ],
                        [
                            "self.normalizer.inverse_transform(X)",
                            "Call"
                        ],
                        [
                            "X_original.copy()",
                            "Call"
                        ],
                        [
                            "self.normalizer.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "force_all_finite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}