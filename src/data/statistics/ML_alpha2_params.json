{
    "lasso_fits.py": {
        "sklearn": {
            "Pipeline_48": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('lasso', Lasso(fit_intercept=False))]",
                            "List"
                        ]
                    ]
                }
            },
            "TimeSeriesSplit_54": {
                "variable": {
                    "value": "my_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_58": {
                "variable": {
                    "value": "gm_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline(steps)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lasso__alpha': [0.001, 0.01, 0.1, 0.5, 1.0]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "my_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeSeriesSplit(n_splits=2).split(X_train)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "str",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "iid": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Lasso_99": {
                "variable": {
                    "value": "lasso_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "float(gm_cv.best_params_['lasso__alpha'])",
                    "type": "Call",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Lasso_45": {
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_absolute_error_119": {
                "y_true": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_cv.predict(X_test)",
                            "Call"
                        ],
                        [
                            "lasso_mod.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "sklearn": {
            "PolynomialFeatures_117": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "include_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_156": {
                "variable": {
                    "value": "scl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_210": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_228": {
                "variable": {
                    "value": "scl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rf_fits.py": {
        "sklearn": {
            "Pipeline_66": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[('rf', RandomForestRegressor(criterion=err_metric, bootstrap=False, random_state=42))]",
                            "List"
                        ]
                    ]
                }
            },
            "TimeSeriesSplit_69": {
                "variable": {
                    "value": "my_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_72": {
                "variable": {
                    "value": "gm_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline(steps)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'rf__max_depth': [4, 8], 'rf__max_features': ['auto', 'sqrt', None], 'rf__min_samples_leaf': [4, 8, 16], 'rf__n_estimators': [8, 16, 32, 64]}",
                            "Dict"
                        ],
                        [
                            "{'rf__max_depth': [2, 4, 8], 'rf__max_features': ['auto', 'sqrt', None], 'rf__min_samples_leaf': [2, 4, 8], 'rf__n_estimators': [4, 8, 16, 32]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "my_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TimeSeriesSplit(n_splits=2).split(X_train)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "scoring",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'neg_mean_absolute_error'",
                            "str"
                        ],
                        [
                            "'neg_mean_squared_error'",
                            "str"
                        ]
                    ]
                },
                "return_train_score": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_126": {
                "variable": {
                    "value": "rf_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "err_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mae'",
                            "Method Argument"
                        ]
                    ]
                },
                "bootstrap": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "gm_cv.best_params_['rf__max_depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_features": {
                    "value": "gm_cv.best_params_['rf__max_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "gm_cv.best_params_['rf__min_samples_leaf']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "gm_cv.best_params_['rf__n_estimators']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_63": {
                "criterion": {
                    "value": "err_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mae'",
                            "Method Argument"
                        ]
                    ]
                },
                "bootstrap": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_absolute_error_119": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_cv.predict(X_test)",
                            "Call"
                        ],
                        [
                            "rf_mod.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_error_142": {
                "y_true": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gm_cv.predict(X_test)",
                            "Call"
                        ],
                        [
                            "rf_mod.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}