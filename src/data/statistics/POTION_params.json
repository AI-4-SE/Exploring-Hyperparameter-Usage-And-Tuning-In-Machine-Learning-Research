{
    "src/model.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "self.used_budget",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.original_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nx.adjacency_matrix(G).todense()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_43": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.original_adj @ torch.ones(self.numNodes).view(-1, 1).squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "x_s_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "self.adj_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nx.adjacency_matrix(G).todense()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.adj_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.adj_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_100": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj_tensor @ torch.ones(self.numNodes).view(-1, 1).squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "x_s_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_144": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj_tensor @ torch.ones(self.numNodes).view(-1, 1).squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_184": {
                "variable": {
                    "value": "isSymmetric",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj_tensor == torch.transpose(self.adj_tensor, 0, 1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_185": {
                "variable": {
                    "value": "isNonnegative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj_tensor >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "norm_207": {
                "variable": {
                    "value": "original_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.original_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_208": {
                "variable": {
                    "value": "attacked_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_88": {
                "input": {
                    "value": "x_copy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "1 / 2 * (x_copy + torch.transpose(x_copy, 0, 1))",
                            "BinOp"
                        ],
                        [
                            "x_copy * self.original_adj",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_43": {
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "self.numNodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_184": {
                "input": {
                    "value": "self.adj_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "input": {
                    "value": "x_copy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "1 / 2 * (x_copy + torch.transpose(x_copy, 0, 1))",
                            "BinOp"
                        ],
                        [
                            "x_copy * self.original_adj",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "rand_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(mat)",
                            "Call"
                        ],
                        [
                            "375",
                            "Constant"
                        ]
                    ]
                }
            },
            "norm_25": {
                "variable": {
                    "value": "Diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_new - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_64": {
                "input": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "len(mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(n)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x_new",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "torch.abs(v @ M @ v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_24": {
                "input": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mat @ x",
                            "BinOp"
                        ],
                        [
                            "x_new / torch.norm(x_new, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "u @ -M @ u",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}