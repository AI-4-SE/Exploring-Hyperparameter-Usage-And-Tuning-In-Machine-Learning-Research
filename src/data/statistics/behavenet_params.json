{
    "behavenet/fitting/eval.py": {
        "sklearn": {
            "r2_score_442": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(true, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(pred, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "multioutput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'variance_weighted'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_447": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(true, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(np.concatenate(pred, axis=0), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_324": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, labels_2d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "curr_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], output[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y[idx_beg:idx_end], labels_2d[idx_beg:idx_end])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "curr_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], output[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/models/aes.py": {
        "sklearn": {
            "r2_score_1055": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hat_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_hat_all, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.FF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['ae_encoding_n_channels'][-1] * self.hparams['ae_encoding_y_dim'][-1] * self.hparams['ae_encoding_x_dim'][-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hparams['n_ae_latents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.FF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hparams['hidden_layer_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "first_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['ae_decoding_starting_dim'][0] * self.hparams['ae_decoding_starting_dim'][1] * self.hparams['ae_decoding_starting_dim'][2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(self.input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_835": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_951": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_1142": {
                "variable": {
                    "value": "latents_og",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(latents)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.U.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1208": {
                "variable": {
                    "value": "latents_tr_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latents_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(latents_og)",
                            "Call"
                        ],
                        [
                            "self.get_transformed_latents(x, dataset, labels_2d)",
                            "Call"
                        ],
                        [
                            "np.full(shape=(batch_size, self.n_latents), fill_value=np.nan)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1211": {
                "variable": {
                    "value": "latents_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latents_tr_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(latents_tr).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.U.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1243": {
                "variable": {
                    "value": "loaded_model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "hparams['pretrained_weights_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['ae_encoding_n_channels'][-1] * self.hparams['ae_encoding_y_dim'][-1] * self.hparams['ae_encoding_x_dim'][-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hparams['n_ae_latents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ZeroPad2d_153": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(x_pad_0, x_pad_1, y_pad_0, y_pad_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hparams['ae_decoding_x_dim'][-1] * self.hparams['ae_decoding_y_dim'][-1] * self.hparams['ae_decoding_n_channels'][-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['ae_input_dim'][0] * self.hparams['ae_input_dim'][1] * self.hparams['ae_input_dim'][2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(self.output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_588": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(int(np.prod(self.output_size)))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_833": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, labels_2d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_954": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_latents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1079": {
                "variable": {
                    "value": "self.U.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(U).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_1103": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1141": {
                "variable": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_953": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1078": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels=args['in_channels'], out_channels=args['out_channels'], kernel_size=args['kernel_size'], stride=args['stride'], padding=args['padding']) for _ in range(self.hparams['n_datasets'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "stride": {
                    "value": "args['stride']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "padding": {
                    "value": "args['padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hparams['ae_encoding_n_channels'][i_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams.get('ae_batch_norm_momentum', 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "self.hparams.get('track_running_stats', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_103": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "stride": {
                    "value": "args['stride']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "padding": {
                    "value": "args['padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "return_indices": {
                    "value": "args['return_indices']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "args['ceil_mode']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                }
            },
            "MaxUnpool2d_283": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(int(self.hparams['ae_decoding_kernel_size'][i_layer - 1]), int(self.hparams['ae_decoding_kernel_size'][i_layer - 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(int(self.hparams['ae_decoding_stride_size'][i_layer - 1]), int(self.hparams['ae_decoding_stride_size'][i_layer - 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.hparams['ae_decoding_y_padding'][i_layer - 1][0], self.hparams['ae_decoding_x_padding'][i_layer - 1][0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ConvTranspose2d(in_channels=args['in_channels'], out_channels=args['out_channels'], kernel_size=args['kernel_size'], stride=args['stride'], padding=args['padding'], output_padding=args['output_padding']) for _ in range(self.hparams['n_datasets'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_315": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "stride": {
                    "value": "args['stride']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "padding": {
                    "value": "args['padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "args['output_padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Sigmoid_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_589": {
                "*size": {
                    "value": "int(np.prod(self.output_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_610": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.FF(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), self.hparams['ae_decoding_starting_dim'][0], self.hparams['ae_decoding_starting_dim'][1], self.hparams['ae_decoding_starting_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x, idx, outsize)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.hparams['ae_input_dim'][0], self.hparams['ae_input_dim'][1], self.hparams['ae_input_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "functional.linear(x, self.encoder.encoder.weight.t()) + self.bias",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), *self.output_size)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, labels_2d), dim=1)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.encoder.encoder.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1079": {
                "ndarray": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([M, N.T], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_333": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hparams['ae_decoding_n_channels'][i_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams.get('ae_batch_norm_momentum', 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "self.hparams.get('track_running_stats', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_470": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.FF(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), self.hparams['ae_decoding_starting_dim'][0], self.hparams['ae_decoding_starting_dim'][1], self.hparams['ae_decoding_starting_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x, idx, outsize)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.hparams['ae_input_dim'][0], self.hparams['ae_input_dim'][1], self.hparams['ae_input_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "functional.linear(x, self.encoder.encoder.weight.t()) + self.bias",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), *self.output_size)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, labels_2d), dim=1)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[-i for i in self.conv_t_pads[name]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_1033": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.projection.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_341": {
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_476": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.FF(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), self.hparams['ae_decoding_starting_dim'][0], self.hparams['ae_decoding_starting_dim'][1], self.hparams['ae_decoding_starting_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x, idx, outsize)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "layer[dataset](x)",
                            "Call"
                        ],
                        [
                            "functional.pad(x, [-i for i in self.conv_t_pads[name]])",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.hparams['ae_input_dim'][0], self.hparams['ae_input_dim'][1], self.hparams['ae_input_dim'][2])",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "functional.linear(x, self.encoder.encoder.weight.t()) + self.bias",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), *self.output_size)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, labels_2d), dim=1)",
                            "Call"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "data['images'][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[-i for i in self.conv_t_pads[name]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "stride": {
                    "value": "args['stride']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "padding": {
                    "value": "args['padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_302": {
                "in_channels": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "stride": {
                    "value": "args['stride']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "padding": {
                    "value": "args['padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "args['output_padding']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._get_conv2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "self._get_maxpool2d_args(i_layer)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': padding}",
                            "Dict"
                        ],
                        [
                            "{'kernel_size': int(self.hparams['ae_encoding_kernel_size'][layer + 1]), 'stride': int(self.hparams['ae_encoding_stride_size'][layer + 1]), 'padding': (self.hparams['ae_encoding_y_padding'][layer + 1][0], self.hparams['ae_encoding_x_padding'][layer + 1][0]), 'return_indices': True}",
                            "Dict"
                        ],
                        [
                            "self._get_convtranspose2d_args(i_layer, global_layer_num)",
                            "Call"
                        ],
                        [
                            "{'in_channels': in_channels, 'out_channels': out_channels, 'kernel_size': kernel_size, 'stride': stride, 'padding': input_padding, 'output_padding': output_padding}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "behavenet/models/decoders.py": {
        "sklearn": {
            "r2_score_137": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets[max_lags:-max_lags].cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outputs_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(outputs_all, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_146": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets[max_lags:-max_lags].cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(outputs_all, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ModuleList_175": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_187": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['input_size']",
                            "Subscript"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['output_size']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_hid_units']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['output_size']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_hid_units']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.hparams['n_lags'] * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.hparams['n_lags']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_40": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.precision_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['input_size']",
                            "Subscript"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['input_size']",
                            "Subscript"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['output_size']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_hid_units']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['output_size']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_hid_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.precision_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['input_size']",
                            "Subscript"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_317": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.precision_sqrt(x)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1, self.hparams['output_size'], self.hparams['output_size'])",
                            "Call"
                        ],
                        [
                            "torch.bmm(y, y.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.decoding(x, None, None, dataset=dataset)",
                            "Call"
                        ],
                        [
                            "self.decoding(x)",
                            "Call"
                        ],
                        [
                            "data['labels'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PoissonNLLLoss_45": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_input": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_203": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_214": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_268": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_216": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_259": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_270": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_218": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_272": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_274": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/models/vaes.py": {
        "sklearn": {
            "r2_score_716": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_all[n_np == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hat_all[n_np == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_718": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "y.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_hat_all, axis=0)",
                            "Call"
                        ],
                        [
                            "y_hat.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_1058": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_all[n_np == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_hat_all[n_np == 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_1060": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "y.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(y_hat_all, axis=0)",
                            "Call"
                        ],
                        [
                            "y_hat.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "exp_33": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_34": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_274": {
                "variable": {
                    "value": "z_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_594": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_794": {
                "variable": {
                    "value": "latents_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_new, w_og]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_839": {
                "variable": {
                    "value": "y_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(y_og, self.encoding.D.bias)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.encoding.D.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_841": {
                "variable": {
                    "value": "latents_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_new, w_og]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TripletMarginLoss_874": {
                "variable": {
                    "value": "self.TripletLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_915": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_s, z_b, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1144": {
                "variable": {
                    "value": "latents_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_new, z_b_og, z_og]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_1191": {
                "variable": {
                    "value": "z_s_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sub(z_s_og, self.encoding.D.bias)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.encoding.D.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1193": {
                "variable": {
                    "value": "latents_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_s_new, z_b_og, z_og]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1289": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1291": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_latents - n_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1381": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_labels']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1383": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_latents - n_labels - n_background",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1385": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_ae_latents']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hparams.get('n_background', 4)",
                            "Call"
                        ],
                        [
                            "self.hparams['n_background']",
                            "Subscript"
                        ],
                        [
                            "self.hparams['n_background']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, labels_2d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_776": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_823": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_954": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data['images'][0] for data in datas]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_955": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data['labels'][0] for data in datas]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_1124": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_1173": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_1299": {
                "variable": {
                    "value": "self.A.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(m[:n_labels, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1301": {
                "variable": {
                    "value": "self.B.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(m[n_labels:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1394": {
                "variable": {
                    "value": "self.A.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(m[:n_labels, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1396": {
                "variable": {
                    "value": "self.B.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(m[n_labels + n_background:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1398": {
                "variable": {
                    "value": "self.C.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(m[n_labels:n_labels + n_background, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sub_839": {
                "input": {
                    "value": "y_og",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :self.hparams['n_labels']]",
                            "Subscript"
                        ],
                        [
                            "inputs[:, :self.hparams['n_labels']]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.encoding.D.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sub_1191": {
                "input": {
                    "value": "z_s_og",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[:, :self.hparams['n_labels']]",
                            "Subscript"
                        ],
                        [
                            "inputs[:, :self.hparams['n_labels']]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.encoding.D.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_956": {
                "tensors": {
                    "value": "[data['masks'][0] for data in datas]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_958": {
                "tensors": {
                    "value": "[data['labels_masks'][0] for data in datas]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1251": {
                "variable": {
                    "value": "curr_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], output[1], output[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1300": {
                "ndarray": {
                    "value": "m[:n_labels, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1302": {
                "ndarray": {
                    "value": "m[n_labels:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1395": {
                "ndarray": {
                    "value": "m[:n_labels, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1397": {
                "ndarray": {
                    "value": "m[n_labels + n_background:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1399": {
                "ndarray": {
                    "value": "m[n_labels:n_labels + n_background, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1245": {
                "variable": {
                    "value": "curr_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[0], output[1], output[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/plotting/cond_ae_utils.py": {
        "sklearn": {
            "accuracy_score_1357": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_masks(y[:, i], n[:, i])",
                            "Call"
                        ],
                        [
                            "np.concatenate(sessions)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_masks(z[:, i], n[:, i])",
                            "Call"
                        ],
                        [
                            "lr.predict(np.concatenate(zs))",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_1261": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_masks(y[:, i], n[:, i])",
                            "Call"
                        ],
                        [
                            "np.concatenate(sessions)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_masks(z[:, i], n[:, i])",
                            "Call"
                        ],
                        [
                            "lr.predict(np.concatenate(zs))",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_481": {
                "variable": {
                    "value": "labels_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_hot_2d(labels_sc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_673": {
                "variable": {
                    "value": "labels_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_hot_2d(labels_sc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1301": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yhat, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_453": {
                "ndarray": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "load_latents(hparams, version, dtype='test')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_465": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_471": {
                "ndarray": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "load_latents(hparams, version, dtype='test')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_645": {
                "ndarray": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "load_latents(hparams, version, dtype='test')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_657": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_663": {
                "ndarray": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(filename, 'rb'))",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "np.copy(latents_0)",
                            "Call"
                        ],
                        [
                            "load_latents(hparams, version, dtype='test')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(latents)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_810": {
                "ndarray": {
                    "value": "labels_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_504": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_labels_like_latents(hparams, sess_ids, sess_idx=s_idx)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.from_numpy(labels_0).float()",
                            "Call"
                        ],
                        [
                            "np.copy(labels_0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.from_numpy(labels_0).float()",
                            "Call"
                        ],
                        [
                            "np.copy(labels_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_694": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_labels_like_latents(hparams, sess_ids, sess_idx=s_idx)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.from_numpy(labels_0).float()",
                            "Call"
                        ],
                        [
                            "np.copy(labels_0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.from_numpy(labels_0).float()",
                            "Call"
                        ],
                        [
                            "np.copy(labels_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_825": {
                "ndarray": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p0 + pn * p_vec",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "behavenet/plotting/decoder_utils.py": {
        "sklearn": {
            "r2_score_703": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "traces_ae[~nan_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "traces_neural[~nan_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/data/data_generator.py": {
        "torch": {
            "DataLoader_551": {
                "variable": {
                    "value": "self.dataset_loaders[i][dtype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.datasets",
                            "Attribute"
                        ],
                        [
                            "int(np.random.choice(np.arange(self.n_datasets), p=self.batch_ratios))",
                            "Call"
                        ],
                        [
                            "self.datasets",
                            "Attribute"
                        ],
                        [
                            "np.random.choice(np.arange(self.n_datasets), p=self.batch_ratios)",
                            "Call"
                        ],
                        [
                            "np.random.choice(np.arange(self.n_datasets), p=curr_batch_ratios)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(dataset.batch_idxs[dtype])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "sample[signal]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[signal][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "sample[signal]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[signal][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_554": {
                "indices": {
                    "value": "dataset.batch_idxs[dtype]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/ae_grid_search.py": {
        "torch": {
            "get_rng_state_59": {
                "variable": {
                    "value": "torch_rng_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_98": {
                "variable": {
                    "value": "torch_rng_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "hparams['rng_seed_model']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/decoder_grid_search.py": {
        "torch": {
            "get_rng_state_87": {
                "variable": {
                    "value": "torch_rng_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_92": {
                "variable": {
                    "value": "torch_rng_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "hparams['rng_seed_model']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/label_decoder_grid_search.py": {
        "torch": {
            "get_rng_state_50": {
                "variable": {
                    "value": "torch_rnd_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_63": {
                "variable": {
                    "value": "torch_rnd_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "hparams['rng_seed_model']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/losses.py": {
        "torch": {
            "logsumexp_181": {
                "variable": {
                    "value": "log_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_qz_prob, dim=2, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_187": {
                "variable": {
                    "value": "log_qz_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_qz_prob, dim=2, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_229": {
                "variable": {
                    "value": "log_qz_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(log_qz_prob, dim=1, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_236": {
                "variable": {
                    "value": "log_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_qz_prob, dim=2, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "log_qz_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(log_qz_prob, dim=1, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_279": {
                "variable": {
                    "value": "log_pz_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed_std_normal(z)",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed_std_normal(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_327": {
                "variable": {
                    "value": "log_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_qz_prob, dim=2, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_334": {
                "variable": {
                    "value": "log_qz_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_qz_prob, dim=2, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_338": {
                "variable": {
                    "value": "log_qz_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(log_qz_prob, dim=1, keepdim=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_345": {
                "variable": {
                    "value": "log_pz_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed_std_normal(z)",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed_std_normal(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_347": {
                "variable": {
                    "value": "idx_code_mi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qz_ - log_qz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_348": {
                "variable": {
                    "value": "total_corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qz - log_qz_product",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_349": {
                "variable": {
                    "value": "dim_wise_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qz_product - log_pz_product",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_361": {
                "variable": {
                    "value": "inv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_398": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "U.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_30": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "0.001 * torch.eye(output_dim) + precision",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(0.5 * LN2PI + 0.5 * log_var) * n_dims - 0.5 / std ** 2 * diff_sq.sum(axis=tuple(1 + np.arange(len(dims[1:]))))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_147": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * torch.sum(logvar.exp() - logvar + mu.pow(2) - 1, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_189": {
                "input": {
                    "value": "log_qz_ - log_qz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_241": {
                "input": {
                    "value": "log_qz - log_qz_product",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_281": {
                "input": {
                    "value": "log_qz_product - log_pz_product",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A, B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A, B, C]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_399": {
                "input": {
                    "value": "(torch.matmul(U, torch.transpose(U, 1, 0)) - eye).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "-dist.log_prob(target)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_57": {
                "input": {
                    "value": "(y_pred - y_true) ** 2 * masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "(y_pred - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "logvar.exp() - logvar + mu.pow(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_230": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_273": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_328": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_334": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_339": {
                "input": {
                    "value": "log_qz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ],
                        [
                            "_gaussian_log_density_unsummed(z[:, None], mu[None, :], logvar[None, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pairwise_distance_440": {
                "x1": {
                    "value": "z[b_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_439": {
                "x1": {
                    "value": "z[a_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_465": {
                "x1": {
                    "value": "z[c_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[c_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_399": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([A, B], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([A, B, C], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(U, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_464": {
                "x1": {
                    "value": "z[c_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[c_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_506": {
                "x1": {
                    "value": "z[d_idxs[4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[d_idxs[5]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_32": {
                "n": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_399": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([A, B], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([A, B, C], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_463": {
                "x1": {
                    "value": "z[b_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_505": {
                "x1": {
                    "value": "z[d_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[d_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_462": {
                "x1": {
                    "value": "z[b_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_504": {
                "x1": {
                    "value": "z[d_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[d_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_461": {
                "x1": {
                    "value": "z[a_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_503": {
                "x1": {
                    "value": "z[c_idxs[4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[c_idxs[5]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_503": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_460": {
                "x1": {
                    "value": "z[a_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_502": {
                "x1": {
                    "value": "z[c_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[c_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_501": {
                "x1": {
                    "value": "z[c_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[c_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_500": {
                "x1": {
                    "value": "z[b_idxs[4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[5]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_499": {
                "x1": {
                    "value": "z[b_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_498": {
                "x1": {
                    "value": "z[b_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[b_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_497": {
                "x1": {
                    "value": "z[a_idxs[4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[5]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_496": {
                "x1": {
                    "value": "z[a_idxs[2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_495": {
                "x1": {
                    "value": "z[a_idxs[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "z[a_idxs[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/training.py": {
        "torch": {
            "Adam_284": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.get_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hparams['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "hparams.get('l2_reg', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "rng_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, 10000)",
                            "Call"
                        ],
                        [
                            "int(hparams['rng_seed_train'])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_327": {
                "seed": {
                    "value": "rng_train + i_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/fitting/utils.py": {
        "torch": {
            "load_1059": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(version_dir, 'best_val_model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(version_dir, 'best_val_model.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/models/ae_model_architecture_generator.py": {
        "torch": {}
    },
    "behavenet/models/base.py": {
        "torch": {
            "Parameter_82": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "behavenet/plotting/arhmm_utils.py": {
        "torch": {
            "load_591": {
                "f": {
                    "value": "ae_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams['ae_model_path'], 'best_val_model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(latents_file), 'best_val_model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_603": {
                "data": {
                    "value": "model_output['latents'][dtype][i_trial]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "data": {
                    "value": "model_output['latents_gen'][i_trial]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fitting/test_losses.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 5, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 3, 4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 1, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "ones_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_81": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_82": {
                "variable": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.eye(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TripletMarginLoss_135": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "N.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_179": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "(n_batch, n_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "[x, y, z, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}