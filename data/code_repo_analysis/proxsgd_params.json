{
    "binary_tanh_custom/binary_ops.py": {
        "tensorflow": {
            "round_10": {
                "variable": {
                    "value": "rounded",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_20": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "a_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "a_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_55": {
                "input": {
                    "value": "K.mean(K.abs(x), axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_11": {
                "input": {
                    "value": "rounded - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_55": {
                "a": {
                    "value": "K.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_55": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * x + 0.5",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "callbacks_custom/callbacks_custom.py": {
        "tensorflow": {}
    },
    "callbacks_custom/callbacks_custom_CNN.py": {
        "tensorflow": {}
    },
    "cnn_cifar10.py": {
        "tensorflow": {
            "load_data_29": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_37": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_categorical(y_train, num_classes)",
                            "Call"
                        ],
                        [
                            "load_data()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "to_categorical_38": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_categorical(y_test, num_classes)",
                            "Call"
                        ],
                        [
                            "load_data()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ImageDataGenerator_118": {
                "variable": {
                    "value": "datagen",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_47": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_48": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_50": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_51": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_53": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_55": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_56": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_58": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_59": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_61": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_63": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_66": {
                "activation": {
                    "value": "binary_tanh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_67": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_70": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_72": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_76": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_77": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_81": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_82": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_84": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_88": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_89": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_93": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_94": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_96": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_100": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_101": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_105": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_106": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_110": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(0.0001)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mlp_mnist.py": {
        "tensorflow": {
            "load_data_28": {
                "variable": {
                    "value": "((X_train, y_train), (X_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_37": {
                "variable": {
                    "value": "Y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train[0:60000]",
                            "Subscript"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_categorical_38": {
                "variable": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_48": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_66": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(28, 28, 1))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "layer_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Flatten()(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(200, name='dense_1', activation='tanh')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, name='dense_2', activation='tanh')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, name='dense_3', activation='tanh')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, name='dense_4', activation='tanh')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, name='dense_5', activation='tanh')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(10, activation='softmax', name='Predictions')(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, activation='relu', name='dense_1', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, activation='relu', name='dense_2', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, activation='relu', name='dense_3', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, activation='relu', name='dense_4', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(200, activation='relu', name='dense_5', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ],
                        [
                            "Dense(10, activation='softmax', name='Predictions', kernel_regularizer=regularizers.l1(mu_reg))(layer_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_52": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_2",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_3",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_4",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_5",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizers.l1(mu_reg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers_custom/ADABound_optimizer.py": {
        "tensorflow": {
            "epsilon_43": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_76": {
                "variable": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_t / (K.sqrt(v_t) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "etal_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1 - 0.1 / K.pow(1 - self.beta_2, t + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "etau_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1 + 0.1 / K.pow(1 - self.beta_2, t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floatx_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "x": {
                    "value": "1.0 - K.pow(self.beta_2, t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_60": {
                "x": {
                    "value": "1 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "t + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_61": {
                "x": {
                    "value": "1 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(self.iterations, K.floatx()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_57": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(self.iterations, K.floatx()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_73": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(params, grads, ms, vs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_75": {
                "x": {
                    "value": "v_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta_2 * v + (1.0 - self.beta_2) * K.square(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_56": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(self.iterations, K.floatx()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_53": {
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(self.decay)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers_custom/AMSGrad_optimizer.py": {
        "tensorflow": {
            "epsilon_43": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_74": {
                "variable": {
                    "value": "vhat_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(params, grads, ms, vs, vhats)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta_2 * v + (1.0 - self.beta_2) * K.square(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floatx_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_58": {
                "x": {
                    "value": "1.0 - K.pow(self.beta_2, t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(self.iterations, K.floatx()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_72": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(params, grads, ms, vs, vhats)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_58": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(self.iterations, K.floatx()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_54": {
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(self.decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "x": {
                    "value": "vhat_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.maximum(vhat, v_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_78": {
                "x": {
                    "value": "v_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta_2 * v + (1.0 - self.beta_2) * K.square(g)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "optimizers_custom/ProxSGD_BNN_optimizer.py": {
        "tensorflow": {
            "cast_45": {
                "variable": {
                    "value": "iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(self.epsilon_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_30": {
                "name": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_62": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_78": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.maximum(x_tmp - mu_x_normalized, 0) - K.maximum(-x_tmp - mu_x_normalized, 0)",
                            "BinOp"
                        ],
                        [
                            "x_tmp",
                            "variable"
                        ],
                        [
                            "K.clip(x_hat, low_x, up_x)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "low_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds_x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "a_max": {
                    "value": "up_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds_x[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_97": {
                "variable": {
                    "value": "a_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.maximum(a_tmp - mu_a_normalized, 0) - K.maximum(-a_tmp - mu_a_normalized, 0)",
                            "BinOp"
                        ],
                        [
                            "a - v_a_new / tau_a",
                            "BinOp"
                        ],
                        [
                            "K.clip(a_hat, low_a, up_a)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "low_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds_a[0]",
                            "Subscript"
                        ]
                    ]
                },
                "a_max": {
                    "value": "up_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds_a[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "r_x_new / (1 - beta ** (iteration + 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "x": {
                    "value": "r_a_new / (1 - beta ** (iteration + 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "g + mu_bnn / 2 * (2 * a + x - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_74": {
                "x": {
                    "value": "-x_tmp - mu_x_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_87": {
                "x": {
                    "value": "mu_bnn * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_93": {
                "x": {
                    "value": "-a_tmp - mu_a_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers_custom/ProxSGD_optimizer.py": {
        "tensorflow": {
            "cast_41": {
                "variable": {
                    "value": "iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(self.epsilon_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "shape": {
                    "value": "K.int_shape(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_72": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.maximum(x_tmp - mu_normalized, 0) - K.maximum(-x_tmp - mu_normalized, 0)",
                            "BinOp"
                        ],
                        [
                            "x_tmp",
                            "variable"
                        ],
                        [
                            "K.clip(x_hat, low, up)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds[0]",
                            "Subscript"
                        ]
                    ]
                },
                "a_max": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_bounds[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_60": {
                "x": {
                    "value": "r_new / (1 - beta ** (iteration + 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(params, grads, vs, rs)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_67": {
                "x": {
                    "value": "-x_tmp - mu_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}