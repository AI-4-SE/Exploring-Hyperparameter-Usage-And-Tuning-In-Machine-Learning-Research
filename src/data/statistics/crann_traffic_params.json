{
    "Dense module/dataset.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Dense module/dense.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Dense module/training.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(Y_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(Y_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_143": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_147": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, betas=(opt.beta1, opt.beta2), eps=opt.eps, weight_decay=opt.wd)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "opt.patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "../Trained models/spatial_model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "../Trained models/encoder.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "../Trained models/decoder.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_time.unsqueeze(2), y_space.squeeze().view(-1, opt.n_out_sp, opt.n_points), x_exo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_space[:, -opt.n_ar:].view(-1, opt.n_ar * opt.n_points))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_time.unsqueeze(2), y_space.squeeze().view(-1, opt.n_out_sp, opt.n_points), x_exo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_space[:, -opt.n_ar:].view(-1, opt.n_ar * opt.n_points))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_time.unsqueeze(2), y_space.squeeze().view(-1, opt.n_out_sp, opt.n_points), x_exo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_space[:, -opt.n_ar:].view(-1, opt.n_ar * opt.n_points))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Dense module/utils.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "data_time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_time, dim=0).view(-1, n_timesteps + n_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "data_space",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_space, dim=0).view(-1, n_img + n_pred, dim_x, dim_y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "data_exo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_exo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_exo, dim=0).view(-1, n_pred, n_exogenous)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "(X_train_time, Y_train_time)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_train_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_time[0:len_train]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(X_val_time, Y_val_time)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_val_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_time[len_train:len_val]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_59": {
                "variable": {
                    "value": "(X_test_time, Y_test_time)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_test_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_time[len_val:]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(X_train_space, Y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_train_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_space[0:len_train]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(X_val_space, Y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_val_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_space[len_train:len_val]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_63": {
                "variable": {
                    "value": "(X_test_space, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_test_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_space[len_val:]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_96": {
                "variable": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_97": {
                "variable": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, decoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_100": {
                "input": {
                    "value": "train_set.view(-1, W * H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "train_set.view(-1, W * H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_104": {
                "input": {
                    "value": "train_set.view(-1, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_105": {
                "input": {
                    "value": "train_set.view(-1, V)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Spatial module/dataset.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Spatial module/sp_att_mech.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(timesteps, dim_x * dim_y, dim_x * dim_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "att_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alig_scores.view(N, T, W * H, W * H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "timesteps * (dim_x * dim_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "timesteps * (dim_x * dim_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "timesteps * (dim_x * dim_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "timesteps * (dim_x * dim_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "features[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_features] + [out_features for i in range(num_conv)]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_features] + [out_features for i in range(num_conv)]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "features[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_features] + [out_features for i in range(num_conv)]",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_143": {
                "variable": {
                    "value": "alig_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc((wp + xp).view(N, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Spatial module/training.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(X_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(X_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_108": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_112": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, betas=(opt.beta1, opt.beta2), eps=opt.eps, weight_decay=opt.wd)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "opt.patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Spatial module/utils.py": {
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "data_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_total, dim=0).view(-1, n_inp + n_out, dim_x, dim_y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_32": {
                "variable": {
                    "value": "(X_train, Y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[0:len_train]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "(X_val, Y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[len_train:len_val]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_34": {
                "variable": {
                    "value": "(X_test, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[len_val:]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_54": {
                "input": {
                    "value": "train_set.view(-1, W * H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_55": {
                "input": {
                    "value": "train_set.view(-1, W * H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Temporal module/bahdanau_att.py": {
        "torch": {
            "LSTM_42": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_89": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size + self.output_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_hidden(hidden[0].view(-1, 1, self.hidden_size)) + self.fc_encoder(encoder_outputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignment_scores.view(inputs.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "self.context_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, self.context_vector.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Temporal module/dataset.py": {
        "torch": {
            "Tensor_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Temporal module/training.py": {
        "torch": {
            "DataLoader_85": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(X_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(X_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_135": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_140": {
                "variable": {
                    "value": "lr_scheduler1",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(encoder.parameters(), lr=opt.lr, betas=(opt.beta1, opt.beta2), eps=opt.eps, weight_decay=opt.wd)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "opt.patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_141": {
                "variable": {
                    "value": "lr_scheduler2",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(decoder.parameters(), lr=opt.lr, betas=(opt.beta1, opt.beta2), eps=opt.eps, weight_decay=opt.wd)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "opt.patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, decoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_182": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_183": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(att, attn_weights.detach().unsqueeze(2).cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_pred, decoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Temporal module/utils.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "data_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data_total, dim=0).view(-1, n_seq + n_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_33": {
                "variable": {
                    "value": "(X_train, Y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[0:len_train]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_34": {
                "variable": {
                    "value": "(X_val, Y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[len_train:len_val]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "(X_test, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_total[len_val:]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "n_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_50": {
                "variable": {
                    "value": "min_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.encoder_path if which == 'encoder' else self.decoder_path",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    }
}