{
    "notebooks/test/preprocessing/features.py": {
        "sklearn": {
            "PCA_27": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "whiten": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DictionaryLearning_43": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_comps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NMF_49": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_comps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/preprocessing/train_reg.py": {
        "sklearn": {
            "KFold_153": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "len(cell_nums_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_115": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "r2_score_308": {
                "variable": {
                    "value": "results[r2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df[f'{track}_sig_mean'].values[cell_idx]",
                            "Subscript"
                        ],
                        [
                            "df[outcome_def].values",
                            "Attribute"
                        ],
                        [
                            "df[outcome_def].values",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "DecisionTreeRegressor_117": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_119": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RidgeCV_121": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "r2_score_185": {
                "y_true": {
                    "value": "np.exp(Y_val_cv)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.exp(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "r2_score_188": {
                "y_true": {
                    "value": "Y_val_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict(X_val_cv)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_189": {
                "y_true": {
                    "value": "Y_val_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict(X_val_cv)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVR_123": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_125": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/preprocessing/viz.py": {
        "sklearn": {
            "confusion_matrix_65": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PCA_259": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "num_feats_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unique_labels_67": {
                "*ys": {
                    "value": "y_true.astype(np.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "IsolationForest_271": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalOutlierFactor_273": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "novelty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EllipticEnvelope_275": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneClassSVM_277": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "awave/data/biology.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([x for x in df[track_name].values])",
                            "Call"
                        ],
                        [
                            "X.reshape(-1, 1, 40)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_59": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(inputs, labels)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X_track, X_covariates, y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X_track, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "inputs_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([x for x in df_test[track_name].values])",
                            "Call"
                        ],
                        [
                            "X_test.reshape(-1, 1, 40)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_test.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_67": {
                "variable": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "inputs_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(inputs_test, labels_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(list(X_track.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(inputs, labels)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X_track, X_covariates, y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X_track, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "X_covariates",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X_covariates).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_175": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_177": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "X_new_track",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(list(X_new_track.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_56": {
                "n": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_197": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "X_new_covariates",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X_new_covariates).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "awave/data/cosmology.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(dataset, indices=indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(dataset, indices=range(20000, 23000))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "dataset": {
                    "value": "torch.utils.data.Subset(dataset, indices=range(23000, 25000))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "model_ft.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.params[idx].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ],
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Subset_66": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ],
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(23000, 25000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "model_ft.features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "model_ft.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_129": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "x.reshape([1] + list(x.shape)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_34": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ],
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(b)[:int(0.8 * b)] if subsample else range(b)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Subset_39": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ],
                        [
                            "MassMapsDatasetResized(root_dir, img_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(20000, 23000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_33": {
                "n": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20000",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_94": {
                "f": {
                    "value": "opj(data_path, 'resnet18_state_dict')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "opj(data_path, 'vgg16_adam_9_0.012')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "awave/data/mnist.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(train_dataset, indices=range(20000))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(test_dataset, indices=range(3000))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_39": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=root_dir, train=True, download=False, transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(20000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_43": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=root_dir, train=False, download=False, transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(3000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "opj(root_dir, 'CNN.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "opj(root_dir, 'FFN.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "awave/data/simulation.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_train, y_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(X_test, y_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_74": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_35": {
                "*tensors": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_39": {
                "*tensors": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "opj(root_dir, 'FFN.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "input": {
                    "value": "x.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_87": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + torch.matmul(x.squeeze(), b.squeeze())",
                            "BinOp"
                        ],
                        [
                            "y + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_80": {
                "input": {
                    "value": "X_t[i][0:1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "awave/losses.py": {
        "torch": {
            "mse_loss_151": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_data",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fft_195": {
                "variable": {
                    "value": "h_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv1d_210": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "w_transform.h0",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0.size(2)",
                            "Call"
                        ],
                        [
                            "h0.size(2)",
                            "Call"
                        ],
                        [
                            "w_transform.h0.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_211": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv1d(h0, h0, stride=2, padding=n)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft_243": {
                "variable": {
                    "value": "h_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((w_transform.h0, torch.zeros_like(w_transform.h0)), dim=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_198": {
                "input": {
                    "value": "(cmf_identity - 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "(v - e) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_243": {
                "tensors": {
                    "value": "(w_transform.h0, torch.zeros_like(w_transform.h0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "abs(x[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "x[i] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_248": {
                "input": {
                    "value": "h0_hf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod[0, 0, left:right + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_243": {
                "input": {
                    "value": "w_transform.h0",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "awave/models/models.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_72": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "awave/transform.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(X).to(self.device)",
                            "Call"
                        ],
                        [
                            "X.float()",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[(X[i], np.nan) for i in range(X.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "awave/transform1d.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_filter(h0, init_factor, noise_factor, const_factor)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "coeffs.pop(0)",
                            "Call"
                        ],
                        [
                            "x0[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "lowlevel.SFB1D.forward(x0, x1, self.h0, h1, mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "awave/transform2d.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_filter(h0, init_factor, noise_factor, const_factor)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ll.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ll.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "ll.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "ll.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "awave/trim/attributions.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "tiles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "tiles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "awave/trim/funcs.py": {
        "torch": {
            "sort_25": {
                "variable": {
                    "value": "(a, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_26": {
                "variable": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a[:, k].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.Tensor(np.ones((1, m)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(np.abs(x.data.cpu().numpy()) > thresh.cpu().numpy()) + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "threshold_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "threshold_18": {
                "input": {
                    "value": "torch.abs(x) - lamb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "awave/trim/transforms_torch.py": {
        "torch": {
            "stack_19": {
                "variable": {
                    "value": "im_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im, torch.zeros_like(im))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "mask_bandpass",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_f.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_30": {
                "variable": {
                    "value": "im_f_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_fftshift2d(torch.fft(im_c, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_bandpass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(im_f.shape)",
                            "Call"
                        ],
                        [
                            "mask_bandpass.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_81": {
                "variable": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_92": {
                "variable": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "(im_copy, im_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[back, front]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_88": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fft_20": {
                "input": {
                    "value": "im_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((im, torch.zeros_like(im)), dim=4)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_31": {
                "input": {
                    "value": "batch_ifftshift2d(im_f_masked)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "awave/trim/trim.py": {
        "torch": {
            "Linear_84": {
                "variable": {
                    "value": "lay",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "D.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "D.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "awave/utils/evaluate.py": {
        "torch": {
            "device_29": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "awave/utils/lowlevel.py": {
        "torch": {
            "cat_145": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h0, h1] * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g0] * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g1] * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_dtype_462": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_463": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g0).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g0.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g0] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g0).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g0, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g0[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ],
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_463": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g1).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g1] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g1).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ],
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_464": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_default_dtype_516": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_517": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(h0).ravel()[::-1]), dtype=torch.float, device=x.device)",
                            "Call"
                        ],
                        [
                            "h0.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "np.array(h0[::-1]).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(h0, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "h0[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ],
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_517": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(h1).ravel()[::-1]), dtype=torch.float, device=x.device)",
                            "Call"
                        ],
                        [
                            "h1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "np.array(h1[::-1]).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(h1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "h1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ],
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_518": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(np.array(h0).ravel()[::-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(np.array(h1).ravel()[::-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "lohi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h0, h1] * C, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(np.array(g0).ravel())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lo.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(np.array(g1).ravel())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lo.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_374": {
                "variable": {
                    "value": "(lh, hl, hh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "highs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 1:].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "(x[-n:], x[:-n + end])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "lohi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h0, h1] * C, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "allclose_18": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(h1).ravel()[::-1]), dtype=torch.float, device=x.device)",
                            "Call"
                        ],
                        [
                            "h1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "np.array(h1[::-1]).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(h1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "h1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g1).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g1] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g1).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(x[:, -n:], x[:, :-n + end])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x[:, :, -1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x[:, :, :, -1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_174": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "lohi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h0, h1] * C, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv_transpose2d_215": {
                "input": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sfb1d(low, lh, g0_col, g1_col, mode=mode, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g0).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g0.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g0] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g0).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g0, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g0[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv_transpose2d_216": {
                "input": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sfb1d(hl, hh, g0_col, g1_col, mode=mode, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g1).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g1] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g1).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(x[:, :, -n:], x[:, :, :-n + end])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_to_mode(mode)",
                            "Call"
                        ],
                        [
                            "int_to_mode(mode)",
                            "Call"
                        ],
                        [
                            "int_to_mode(mode)",
                            "Call"
                        ],
                        [
                            "int_to_mode(mode)",
                            "Call"
                        ],
                        [
                            "'constant'",
                            "MethodArgument"
                        ],
                        [
                            "'zero'",
                            "MethodArgument"
                        ],
                        [
                            "'zero'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_228": {
                "input": {
                    "value": "lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sfb1d(low, lh, g0_col, g1_col, mode=mode, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g0).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g0.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g0] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g0).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g0, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g0[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv_transpose2d_229": {
                "input": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sfb1d(hl, hh, g0_col, g1_col, mode=mode, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.copy(np.array(g1).ravel()), dtype=torch.float, device=lo.device)",
                            "Call"
                        ],
                        [
                            "g1.reshape(*shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([g1] * C, dim=0)",
                            "Call"
                        ],
                        [
                            "np.array(g1).ravel()",
                            "Call"
                        ],
                        [
                            "torch.tensor(g1, device=device, dtype=t).reshape((1, 1, -1))",
                            "Call"
                        ],
                        [
                            "g1[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "(2, 1) if d == 2 else (1, 2)",
                            "IfExp"
                        ],
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                },
                "groups": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "lo.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "(x[:, :, :, -n:], x[:, :, :, :-n + end])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll(x, -L2, dim=d)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, -1:]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x[:, :, :, -1:]), dim=3)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad)",
                            "Call"
                        ],
                        [
                            "mypad(x, pad=pad, mode=mode)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(L - 1, 0) if d == 2 else (0, L - 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 1) if d == 2 else (0, 1, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(p // 2, 0) if d == 2 else (0, p // 2)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, p // 2, (p + 1) // 2) if d == 2 else (p // 2, (p + 1) // 2, 0, 0)",
                            "IfExp"
                        ],
                        [
                            "(L - 2, 0) if d == 2 else (0, L - 2)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "awave/utils/misc.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_88": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asanyarray(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "init_factor * x + noise_factor * torch.randn(shape) + const_factor * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "x[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "w.expand(x.size(1), 1, stride, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_159": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "list(h0.squeeze().detach().cpu().numpy())[::-1]",
                            "Subscript"
                        ],
                        [
                            "w_transform.h0.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h0, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "w_transform.h0.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h0, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_160": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low_to_high(h0)",
                            "Call"
                        ],
                        [
                            "list(h1.squeeze().detach().cpu().numpy())[::-1]",
                            "Subscript"
                        ],
                        [
                            "low_to_high(w_transform.h0)",
                            "Call"
                        ],
                        [
                            "h1.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h1, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "low_to_high(w_transform.h0)",
                            "Call"
                        ],
                        [
                            "h1.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h1, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "h0_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0o.squeeze().detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_183": {
                "variable": {
                    "value": "h0_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0o.squeeze().detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_184": {
                "variable": {
                    "value": "h1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1o.squeeze().detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_185": {
                "variable": {
                    "value": "h1_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1o.squeeze().detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_31": {
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x[i].shape)",
                            "Call"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_95": {
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asanyarray(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "init_factor * x + noise_factor * torch.randn(shape) + const_factor * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "x[None, None]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_259": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_transform.h0",
                            "Attribute"
                        ],
                        [
                            "list(h0.squeeze().detach().cpu().numpy())[::-1]",
                            "Subscript"
                        ],
                        [
                            "w_transform.h0.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h0, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "w_transform.h0.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h0, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_260": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low_to_high(h0)",
                            "Call"
                        ],
                        [
                            "list(h1.squeeze().detach().cpu().numpy())[::-1]",
                            "Subscript"
                        ],
                        [
                            "low_to_high(w_transform.h0)",
                            "Call"
                        ],
                        [
                            "h1.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h1, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "low_to_high(w_transform.h0)",
                            "Call"
                        ],
                        [
                            "h1.squeeze().detach().cpu()",
                            "Call"
                        ],
                        [
                            "F.pad(h1, pad=(0, 0), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x[i].shape)",
                            "Call"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_72": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x[i].shape)",
                            "Call"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "awave/utils/train.py": {
        "torch": {
            "device_36": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "awave/utils/visualize.py": {
        "torch": {
            "max_92": {
                "variable": {
                    "value": "vmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_93": {
                "variable": {
                    "value": "vmin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().data.cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "awave/utils/warmstart.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_43": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "awave/utils/wave_attributions.py": {
        "torch": {
            "empty_89": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x[i].shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_40": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_42": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_61": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_63": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_50": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_52": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_70": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_72": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unbind_40": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_42": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_61": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_63": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_50": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_52": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_70": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_72": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ],
                        [
                            "self.mt(x, additional_forward_args)[:, target]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "notebooks/biology/eval_biology.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/biology/ex_biology.py": {
        "torch": {
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(wt.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_140": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pretrained_model(p.model_path, device=device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_141": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "awave.DWT1d(wave=p.wave, mode=p.mode, J=p.J, init_factor=p.init_factor, noise_factor=p.noise_factor, const_factor=p.const_factor).to(device)",
                            "Call"
                        ],
                        [
                            "warm_start(p, out_dir).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "wt.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "wt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/biology/transform.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(X).to(self.device)",
                            "Call"
                        ],
                        [
                            "X.float()",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[(X[i], np.nan) for i in range(X.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/biology/transform1d.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_filter(h0, init_factor, noise_factor, const_factor)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "coeffs.pop(0)",
                            "Call"
                        ],
                        [
                            "x0[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "lowlevel.SFB1D.forward(x0, x1, self.h0, h1, mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "notebooks/cifar10/cifar10.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root_dir, train=True, download=True, transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root_dir, train=False, download=True, transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.TensorDataset(X, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_60": {
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cifar10/train_on_transformed_feats.py": {
        "torch": {
            "Conv2d_58": {
                "variable": {
                    "value": "conv2d0",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "W_conv2d0.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "W_conv2d0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "conv2d0.weight.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "variable": {
                    "value": "pool2d0",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "feat_extractor",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10368",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_39": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cifar10/util.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "oj(save_dir, f'checkpoint_{epoch}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cosmology/eval_cosmology.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hc[left:left + 3] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gc[left:left + 3] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cosmology/ex_cosmology.py": {
        "torch": {
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(wt.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_141": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pretrained_model(model_name='resnet18', device=device, data_path=p.model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_142": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "awave.DWT2d(wave=p.wave, mode=p.mode, J=p.J, init_factor=p.init_factor, noise_factor=p.noise_factor, const_factor=p.const_factor).to(device)",
                            "Call"
                        ],
                        [
                            "warm_start(p, out_dir).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "wt.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "wt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cosmology/peak_counting.py": {
        "torch": {
            "conv2d_139": {
                "variable": {
                    "value": "ims_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 / 3 * torch.tensor([[-0.05, -0.2, -0.05], [-0.2, 1.0, -0.2], [-0.05, -0.2, -0.05]])",
                            "BinOp"
                        ],
                        [
                            "L[None, None]",
                            "Subscript"
                        ],
                        [
                            "4 * torch.tensor([[0, -0.25, 0], [-0.25, 1.0, -0.25], [0, -0.25, 0]])",
                            "BinOp"
                        ],
                        [
                            "L[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "ims_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 / 3 * torch.tensor([[-0.05, -0.2, -0.05], [-0.2, 1.0, -0.2], [-0.05, -0.2, -0.05]])",
                            "BinOp"
                        ],
                        [
                            "L[None, None]",
                            "Subscript"
                        ],
                        [
                            "4 * torch.tensor([[0, -0.25, 0], [-0.25, 1.0, -0.25], [0, -0.25, 0]])",
                            "BinOp"
                        ],
                        [
                            "L[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [-1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0], [0.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(ims[..., :-1, :-1], Rx) ** 2",
                            "BinOp"
                        ],
                        [
                            "p0 + F.conv2d(ims[..., :-1, :-1], Ry) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(p0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_164": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(ims[..., :-1, 1:], Rx) ** 2",
                            "BinOp"
                        ],
                        [
                            "p1 + F.conv2d(ims[..., :-1, 1:], Ry) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(p1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_167": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(ims[..., 1:, :-1], Rx) ** 2",
                            "BinOp"
                        ],
                        [
                            "p2 + F.conv2d(ims[..., 1:, :-1], Ry) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(p2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_170": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(ims[..., 1:, 1:], Rx) ** 2",
                            "BinOp"
                        ],
                        [
                            "p3 + F.conv2d(ims[..., 1:, 1:], Ry) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(p3)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "ims_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernels",
                            "Attribute"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_135": {
                "data": {
                    "value": "[[-0.05, -0.2, -0.05], [-0.2, 1.0, -0.2], [-0.05, -0.2, -0.05]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[[0, -0.25, 0], [-0.25, 1.0, -0.25], [0, -0.25, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_159": {
                "input": {
                    "value": "ims[..., :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0, 1.0], [-1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "Rx[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_160": {
                "input": {
                    "value": "ims[..., :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, -1.0]])",
                            "Call"
                        ],
                        [
                            "Ry[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_162": {
                "input": {
                    "value": "ims[..., :-1, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0, 1.0], [-1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "Rx[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_163": {
                "input": {
                    "value": "ims[..., :-1, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, -1.0]])",
                            "Call"
                        ],
                        [
                            "Ry[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_165": {
                "input": {
                    "value": "ims[..., 1:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0, 1.0], [-1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "Rx[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_166": {
                "input": {
                    "value": "ims[..., 1:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, -1.0]])",
                            "Call"
                        ],
                        [
                            "Ry[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_168": {
                "input": {
                    "value": "ims[..., 1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0, 1.0], [-1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "Rx[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_169": {
                "input": {
                    "value": "ims[..., 1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, -1.0]])",
                            "Call"
                        ],
                        [
                            "Ry[None, None]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "notebooks/cosmology/transform.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(X).to(self.device)",
                            "Call"
                        ],
                        [
                            "X.float()",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[(X[i], np.nan) for i in range(X.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/cosmology/transform2d.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_filter(h0, init_factor, noise_factor, const_factor)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ll.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ll.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "ll.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "ll.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/mnist/ex_mnist.py": {
        "torch": {
            "Adam_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(wt.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_models[0]",
                            "Subscript"
                        ],
                        [
                            "pretrained_models[1]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "'cnn'",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DWT2d(wave=p.wave, mode=p.mode, J=p.J, init_factor=p.init_factor, noise_factor=p.noise_factor, const_factor=p.const_factor).to(device)",
                            "Call"
                        ],
                        [
                            "warm_start(p, out_dir).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "wt.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "wt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/mnist/transform.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(X).to(self.device)",
                            "Call"
                        ],
                        [
                            "X.float()",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[(X[i], np.nan) for i in range(X.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "len(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/mnist/transform2d.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_filter(h0, init_factor, noise_factor, const_factor)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ll.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ll.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "ll.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "ll.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/simulation/eval_simulation.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "opj(out_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/simulation/ex_simulation.py": {
        "torch": {
            "Adam_155": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(wt.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pretrained_model(p.model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_151": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DWT1d(wave=p.wave, mode=p.mode, J=p.J, init_factor=p.init_factor, noise_factor=p.noise_factor, const_factor=p.const_factor).to(device)",
                            "Call"
                        ],
                        [
                            "warm_start(p, out_dir).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "wt.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "wt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/ex_biology.py": {
        "torch": {
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(wt.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "p.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "p.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pretrained_model(p.model_path, device=device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_140": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DWT1d(wave=p.wave, mode=p.mode, J=p.J, init_factor=p.init_factor, noise_factor=p.noise_factor, const_factor=p.const_factor).to(device)",
                            "Call"
                        ],
                        [
                            "warm_start(p, out_dir).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "wt.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "wt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opj(out_dir, p._str(p) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/preprocessing/interpret.py": {
        "torch": {
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/preprocessing/models.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_13": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_15": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x1)",
                            "Call"
                        ],
                        [
                            "self.bn1(z1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_105": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_133": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_134": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_135": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_136": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "18 + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiheadAttention_173": {
                "variable": {
                    "value": "self.att1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_174": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiheadAttention_177": {
                "variable": {
                    "value": "self.att2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_178": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D_in + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "patch_size * patch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_linear_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_262": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_linear_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_conv_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_269": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size * T, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(x, dim=2).values",
                            "Attribute"
                        ],
                        [
                            "x.reshape(batch_size, T, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size * T, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=3).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(x, dim=2).values",
                            "Attribute"
                        ],
                        [
                            "x.reshape(batch_size, T, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_210": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_277": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_280": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_244": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(np.array(X).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0] + self.offset",
                            "BinOp"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "X.reshape(s[0], s[1] * s[2], s[3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "torch.transpose(X, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(X)",
                            "Call"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(X, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "X.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/test/preprocessing/neural_networks.py": {
        "torch": {
            "tensor_86": {
                "variable": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(list(X_track.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_track, X_covariates, y)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X_track, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "X_covariates",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X_covariates).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_102": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_104": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_track",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "X_new_track",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(list(X_new_track.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_124": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "X_new_covariates",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X_new_covariates).astype(float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}