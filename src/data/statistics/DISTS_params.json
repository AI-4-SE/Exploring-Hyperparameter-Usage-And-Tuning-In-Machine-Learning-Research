{
    "DISTS_tensorflow/DISTS_tf.py": {
        "tensorflow": {
            "disable_eager_execution_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ref.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "dist.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.parameters['vgg_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "img_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_18": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.parameters['vgg_std']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "img_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(self.weights['alpha'], (1, 1, 1, sum(self.chns)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_23": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(self.weights['beta'], (1, 1, 1, sum(self.chns)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_82": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.alpha / w_sum",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.beta / w_sum",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.constant(self.parameters['L2' + name], name='filter'), 3)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(self.parameters['L2' + name], name='filter')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_conv_filter(name)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.constant(self.parameters['L2' + name], name='filter'), 3)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[[0, 0], [1, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "self.parameters[name + '_weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "np.squeeze(self.parameters[name + '_bias'])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feats0[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feats1[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(feats0[k] - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "y_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(feats1[k] - y_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "x": {
                    "value": "tf.maximum(conv, 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "dist1 + dist2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bias_add_58": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, filter, strides=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, bias))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input ** 2, filter, strides=2, padding=[[0, 0], [1, 0], [1, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bias(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_64": {
                "value": {
                    "value": "self.parameters['L2' + name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_66": {
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, filter, strides=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, bias))",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input ** 2, filter, strides=2, padding=[[0, 0], [1, 0], [1, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "alpha[k] * S1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "feats0[k] * feats1[k]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "beta[k] * S2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DISTS_pytorch/DISTS_pt.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.stage5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_94": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.alpha / w_sum",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_95": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.beta / w_sum",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.chns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(sys.prefix, 'weights.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "g / torch.sum(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "data": {
                    "value": "torch.randn(1, sum(self.chns), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.randn(1, sum(self.chns), 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "sum(self.chns)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_59": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "sum(self.chns)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}