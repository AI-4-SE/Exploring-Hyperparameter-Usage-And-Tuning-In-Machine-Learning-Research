{
    "eval.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/args.py": {
        "torch": {
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/basic_model.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "embedding_differ",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embedding_differ",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(embedding_differ).transpose(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "embedding_differ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_62": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gen_x_batch(src_sents_var)",
                            "Call"
                        ],
                        [
                            "torch.cat([src_token_embed, q_onehot_project], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_65": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "last_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "last_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "val_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_emb_array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((B, max_len, values_list[0].shape[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((B, max_len, self.args.col_embed_size), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "val_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_emb_array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((B, max_len, values_list[0].shape[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((B, max_len, self.args.col_embed_size), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_38": {
                "variable": {
                    "value": "topk_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "one_table_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "table_embedding[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "one_table_embedding.unsqueeze(1).expand(table_embedding.size(0), src_embedding.size(1), table_embedding.size(2))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "src_token_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_token_embed, q_onehot_project]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'grammar': self.grammar, 'state_dict': self.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/model.py": {
        "torch": {
            "LSTM_42": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_52": {
                "variable": {
                    "value": "self.lf_decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.action_embed_size + args.att_vec_size + args.type_embed_size",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_54": {
                "variable": {
                    "value": "self.sketch_decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.action_embed_size + args.att_vec_size + args.type_embed_size",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.decoder_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.att_sketch_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.att_lf_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.sketch_att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.lf_att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.prob_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.prob_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.col_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.col_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_69": {
                "variable": {
                    "value": "self.sketch_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.action_embed_size",
                    "type": null,
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "variable": {
                    "value": "self.production_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(grammar.prod2id)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.type_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(grammar.type2id)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.type_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(grammar.prod2id)).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.att_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.type_embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.N_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(define_rule.N._init_grammar())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.query_vec_to_action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.q_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.column_rnn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.col_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.table_rnn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.col_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "sketch_prob_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack(action_probs_i, dim=0).log().sum() for action_probs_i in action_probs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_346": {
                "variable": {
                    "value": "lf_prob_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack(action_probs_i, dim=0).log().sum() for action_probs_i in action_probs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_751": {
                "variable": {
                    "value": "att_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_func(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_761": {
                "variable": {
                    "value": "h_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder_cell_init(enc_last_cell)",
                            "Call"
                        ],
                        [
                            "F.tanh(h_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_186": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "table_appear_mask_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "table_appear_mask",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "batch.table_appear_mask",
                            "Attribute"
                        ],
                        [
                            "batch.table_appear_mask",
                            "Attribute"
                        ],
                        [
                            "np.zeros((hyp_num, table_appear_mask.shape[1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_315": {
                "variable": {
                    "value": "column_attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * table_appear_mask_val * gate + self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * (1 - table_appear_mask_val) * (1 - gate)",
                            "BinOp"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=batch.table_token_mask)",
                            "Call"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * table_appear_mask_val * gate + self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * (1 - table_appear_mask_val) * (1 - gate)",
                            "BinOp"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=batch.table_token_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "table_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "table_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.table_pointer_net(src_encodings=schema_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None)",
                            "Call"
                        ],
                        [
                            "F.softmax(table_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.table_pointer_net(src_encodings=exp_schema_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(table_weights, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_421": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_447": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['new_hyp_score'] for x in new_hyp_meta]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_448": {
                "variable": {
                    "value": "(top_new_hyp_scores, meta_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([x['new_hyp_score'] for x in new_hyp_meta], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([x['new_hyp_score'] for x in new_hyp_meta], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_beams))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_609": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_611": {
                "variable": {
                    "value": "table_appear_mask_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "table_appear_mask",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "batch.table_appear_mask",
                            "Attribute"
                        ],
                        [
                            "batch.table_appear_mask",
                            "Attribute"
                        ],
                        [
                            "np.zeros((hyp_num, table_appear_mask.shape[1]), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_627": {
                "variable": {
                    "value": "column_selection_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * table_appear_mask_val * gate + self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * (1 - table_appear_mask_val) * (1 - gate)",
                            "BinOp"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=batch.table_token_mask)",
                            "Call"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * table_appear_mask_val * gate + self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None) * (1 - table_appear_mask_val) * (1 - gate)",
                            "BinOp"
                        ],
                        [
                            "self.column_pointer_net(src_encodings=exp_table_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=batch.table_token_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_640": {
                "variable": {
                    "value": "table_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "table_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.table_pointer_net(src_encodings=schema_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None)",
                            "Call"
                        ],
                        [
                            "F.softmax(table_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.table_pointer_net(src_encodings=exp_schema_embedding, query_vec=att_t.unsqueeze(0), src_token_mask=None)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(table_weights, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_684": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['new_hyp_score'] for x in new_hyp_meta]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_685": {
                "variable": {
                    "value": "(top_new_hyp_scores, meta_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([x['new_hyp_score'] for x in new_hyp_meta], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([x['new_hyp_score'] for x in new_hyp_meta], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_beams))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_85": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_action_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_171": {
                "variable": {
                    "value": "pre_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_types",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_270": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_283": {
                "variable": {
                    "value": "pre_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_types",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_289": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_304": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prob_att(att_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_402": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_410": {
                "variable": {
                    "value": "pre_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_types",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_414": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_589": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_598": {
                "variable": {
                    "value": "pre_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_types",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pre_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_602": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_616": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prob_att(att_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_198": {
                "tensors": {
                    "value": "action_probs_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_347": {
                "tensors": {
                    "value": "action_probs_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_751": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_676": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_678": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/nn_utils.py": {
        "torch": {
            "bmm_26": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encoding_att_linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "h_t.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(src_encoding_att_linear, h_t.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.view(*att_view)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_197": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(tensors)",
                            "Call"
                        ],
                        [
                            "tensors.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_230": {
                "data": {
                    "value": "np.pad(m, [(0, delta), (0, delta)], mode='constant')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_232": {
                "data": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/pointer_net.py": {
        "torch": {
            "matmul_45": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_encodings.clone()",
                            "Call"
                        ],
                        [
                            "self.src_encoding_linear(src_encodings)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "context_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_context_encodings.clone()",
                            "Call"
                        ],
                        [
                            "self.auxiliary_encoding_linear(src_context_encodings)",
                            "Call"
                        ],
                        [
                            "context_encodings.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_46": {
                "variable": {
                    "value": "context_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.input_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.type_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(query_vec_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_74": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "variable": {
                    "value": "self.context_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "src_encoding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_76": {
                "variable": {
                    "value": "self.coverage_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.src_encoding_linear(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.src_encoding_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_encoding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.auxiliary_encoding_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_encoding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.src_encoding_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_encoding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "mean_246": {
                "variable": {
                    "value": "loss_sketch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_sketch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-score[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss_sketch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "loss_lf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_lf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-score[1]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss_lf)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_348": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__256": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "MultiStepLR_49": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer_cls(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[21, 41]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_scheduler_gammar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    }
}