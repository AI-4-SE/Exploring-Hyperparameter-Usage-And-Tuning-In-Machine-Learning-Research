{
    "eval_movielens.py": {
        "sklearn": {
            "LabelBinarizer_71": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_98": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_122": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_124": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_184": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_186": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_260": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_74": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_test).squeeze()",
                            "Call"
                        ],
                        [
                            "lb.transform(y_test)",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_pred).squeeze()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'micro'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_97": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DummyClassifier_236": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "strategy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DummyClassifier_307": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "strategy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_329": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DummyClassifier_385": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "strategy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_741": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(cat_preds_list, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_157": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_hat.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_159": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_219": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_hat.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_221": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_294": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_372": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_642": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(cat_preds_list, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_715": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_755": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(cat_preds_list, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_794": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_797": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_823": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_87": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sensitive_attr[p_batch]",
                            "Subscript"
                        ],
                        [
                            "net.predict(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net.predict(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net.predict(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net.predict(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net(p_batch_emb, p_batch_var)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dummy.predict(p_batch_emb)",
                            "Call"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "y_hat.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "y_hat.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "y_hat.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "y_hat.max(1, keepdim=True)[1]",
                            "Subscript"
                        ],
                        [
                            "modelD.decoder.predict(group_embed, movies_repeated[i])",
                            "Call"
                        ],
                        [
                            "modelD(p_batch_var, filters=filter_set)",
                            "Call"
                        ],
                        [
                            "modelD.predict(lhs, rhs)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_612": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_718": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_617": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_658": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.argmax(cat_preds_list, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_721": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_724": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_622": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_627": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(p_batch_emb, p_batch_var, return_preds=True)",
                            "Call"
                        ],
                        [
                            "fairD.predict(lhs_emb, lhs, return_preds=True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "604",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_139": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_201": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_275": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_313": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_353": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_421": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[:args.cutoff_row], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[args.cutoff_row:], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_465": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[:args.cutoff_row], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[args.cutoff_row:], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_524": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[:args.cutoff_row], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[args.cutoff_row:], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_542": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_543": {
                "variable": {
                    "value": "total_rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_544": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(test_loss_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_545": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(total_preds.squeeze(), total_rels.squeeze())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_549": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[:args.cutoff_row], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[args.cutoff_row:], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_568": {
                "variable": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_569": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_570": {
                "variable": {
                    "value": "total_rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_571": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(total_preds.squeeze().float(), total_rels.squeeze().float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_584": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_689": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_767": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[:args.cutoff_row], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "PredBias(args.use_1M, movie_ids, args.users[args.cutoff_row:], attribute, args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_41": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_399": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals[pos_index] - vals[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_batch, r_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_394": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_544": {
                "tensors": {
                    "value": "test_loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mse_loss_545": {
                "input": {
                    "value": "total_preds.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "total_rels.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_571": {
                "input": {
                    "value": "total_preds.squeeze().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "total_rels.squeeze().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_451": {
                "input": {
                    "value": "val[0] - val[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_57": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_737": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_738": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseAdam_60": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_638": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_639": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_751": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_752": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_816": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_817": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseAdam_63": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_654": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_655": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_reddit.py": {
        "sklearn": {
            "roc_auc_score_96": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_97": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_121": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate(labels_list)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_123": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate(labels_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_279": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate(labels_list)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_280": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate(labels_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cat_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(preds_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DummyClassifier_177": {
                "variable": {
                    "value": "dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['stratified', 'most_frequent', 'uniform']",
                            "List"
                        ],
                        [
                            "strategy",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_92": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sensitive_attr[p_batch]",
                            "Subscript"
                        ],
                        [
                            "net.predict(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "net(p_batch_emb, p_batch_var)",
                            "Call"
                        ],
                        [
                            "fairD_disc(p_batch_emb.detach(), p_batch_var)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dummy.predict(p_batch_emb)",
                            "Call"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "(y_hat > torch.Tensor([0.5]).cuda()).float() * 1",
                            "BinOp"
                        ],
                        [
                            "p_enrgs < nce_enrgs",
                            "Compare"
                        ],
                        [
                            "p_enrgs > nce_enrgs",
                            "Compare"
                        ]
                    ]
                }
            },
            "roc_auc_score_159": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_hat.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_161": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_194": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_247": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_43": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_59": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseAdam_62": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_65": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_movielens.py": {
        "sklearn": {},
        "torch": {
            "is_available_87": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_128": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(args.train_ratings, args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(args.train_ratings, args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "sklearn": {},
        "torch": {
            "Embedding_82": {
                "variable": {
                    "value": "self.user_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_84": {
                "variable": {
                    "value": "self.sr_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Sigmoid_137": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_138": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 2), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_212": {
                "variable": {
                    "value": "self.ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_213": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_281": {
                "variable": {
                    "value": "self._ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_282": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_284": {
                "variable": {
                    "value": "self.ent_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_285": {
                "variable": {
                    "value": "self.rel_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_350": {
                "variable": {
                    "value": "self._ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_351": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_353": {
                "variable": {
                    "value": "self.ent_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.rel_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_360": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_408": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_411": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_412": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_431": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_relations",
                            "Method Argument"
                        ],
                        [
                            "num_relations",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "embeds1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(heads)",
                            "Call"
                        ],
                        [
                            "torch.matmul(embeds1, rel_mats)",
                            "Call"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rel_mats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_embeds(rels).reshape(-1, self.embed_dim, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_447": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_448": {
                "variable": {
                    "value": "self.weight_scalars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_weights, num_relations)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_454": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_455": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_466": {
                "variable": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_467": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_scalars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_468": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(basis_outputs, self.weight_scalars)",
                            "Call"
                        ],
                        [
                            "torch.matmul(basis_outputs, self.weight_scalars)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_485": {
                "variable": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_486": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basis_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_scalars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_487": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(basis_outputs, self.weight_scalars)",
                            "Call"
                        ],
                        [
                            "torch.matmul(basis_outputs, self.weight_scalars)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_488": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(enrgs_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_504": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_567": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_568": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_570": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 2), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_640": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_641": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_643": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 2), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_707": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_726": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 2), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_756": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_787": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_806": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 2), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_833": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_902": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, int(self.embed_dim * 4), bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_917": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_919": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_933": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_934": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_998": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_999": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1000": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1001": {
                "variable": {
                    "value": "self.W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_1005": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1006": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1007": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1029": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1030": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1031": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1069": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1070": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1071": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1072": {
                "variable": {
                    "value": "self.W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_1073": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_1074": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_1096": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1097": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1098": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_254": {
                "variable": {
                    "value": "enrgs_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "energs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_255": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enrgs_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(energs_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_256": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(enrgs_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_266": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_333": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_396": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_417": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_463": {
                "variable": {
                    "value": "u_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(heads)",
                            "Call"
                        ],
                        [
                            "torch.matmul(embeds1, rel_mats)",
                            "Call"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rel_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_embeds(index).reshape(self.embed_dim, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_embeds(index).reshape(self.embed_dim, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_482": {
                "variable": {
                    "value": "u_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(heads)",
                            "Call"
                        ],
                        [
                            "torch.matmul(embeds1, rel_mats)",
                            "Call"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ],
                        [
                            "embeds1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rel_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rel_embeds(index).reshape(self.embed_dim, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.rel_embeds(index).reshape(self.embed_dim, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_508": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_548": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_620": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_696": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_767": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_776": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_844": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_853": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_951": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_1036": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_1040": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1041": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(outputs, 1, rels.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1050": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_1121": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1122": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_1123": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1136": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_143": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_146": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_149": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_152": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_155": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_158": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_161": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_201": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_269": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_337": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_399": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_421": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_551": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_571": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_572": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_573": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_575": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_576": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_577": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_578": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_579": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_580": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_581": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_582": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_583": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_584": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_585": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_586": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_587": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_588": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_589": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_590": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_591": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_592": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_593": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_594": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_595": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_623": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_644": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_646": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_647": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_648": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_649": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_650": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_651": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_652": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_653": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_654": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_656": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_657": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_658": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_660": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_661": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_662": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_663": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_664": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_665": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_666": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_667": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_668": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_669": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_670": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_671": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_685": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_699": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_727": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_729": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_730": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_732": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_733": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_734": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_736": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_737": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_738": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_740": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_741": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_742": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_743": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_744": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_745": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_746": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_747": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_748": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_749": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_750": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_751": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_779": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_807": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_809": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_810": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_811": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_813": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_814": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_815": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_817": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_818": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_819": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_820": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_821": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_822": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_823": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_824": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_825": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_826": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_827": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_828": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_842": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_856": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_903": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_904": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_905": {
                "in_features": {
                    "value": "int(self.embed_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_906": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_907": {
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_908": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_909": {
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_910": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_911": {
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_955": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_1013": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1016": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_1017": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs)",
                            "Call"
                        ],
                        [
                            "torch.exp(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_1021": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1023": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.net(ents_emb)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multi_margin_loss_1024": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs)",
                            "Call"
                        ],
                        [
                            "torch.exp(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents.cpu()])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "A_labels.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(self.users_sensitive[ents])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_1054": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_1140": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_473": {
                "input": {
                    "value": "torch.index_select(outputs, 1, index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_494": {
                "input": {
                    "value": "torch.index_select(outputs, 1, index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_262": {
                "input": {
                    "value": "torch.index_select(outputs, 1, index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_473": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(enrgs_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_494": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(enrgs_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_262": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(enrgs_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([i])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([j])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_1128": {}
        }
    },
    "paper_trans_e.py": {
        "sklearn": {
            "roc_auc_score_895": {
                "variable": {
                    "value": "l_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(l_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(l_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_896": {
                "variable": {
                    "value": "r_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(r_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(r_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_1001": {
                "variable": {
                    "value": "l_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(l_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(l_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_1002": {
                "variable": {
                    "value": "r_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(r_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(r_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_956": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_y.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "l_y_hat.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_835": {
                "variable": {
                    "value": "l_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "l_probs.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_836": {
                "variable": {
                    "value": "r_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "r_A_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "r_probs.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_432": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_72": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_106": {
                "variable": {
                    "value": "self._ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_107": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.ent_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.rel_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.embed_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_262": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_263": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_264": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_276": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(ents_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_277": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_278": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "(self.margin + p_enrgs - n_enrgs).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "scores * weights / weights.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_480": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_481": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_492": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_523": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2 ** x for x in xrange(10 - decay_lr, 10) if 2 ** x < num_epochs]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_867": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataset",
                            "Method Argument"
                        ],
                        [
                            "test_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_929": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_931": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_969": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1014": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1177": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(S['train_data'], args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "KBDataset(args.data_path % 'train', args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1180": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(S['train_data'], args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "KBDataset(args.data_path % 'train', args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_158": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_268": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "(self.margin + p_enrgs - n_enrgs).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "scores * weights / weights.mean()",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents.cpu()][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents.cpu()][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_271": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "self.W4(h3)",
                            "Call"
                        ],
                        [
                            "(self.margin + p_enrgs - n_enrgs).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "scores * weights / weights.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l1_loss_272": {
                "variable": {
                    "value": "fair_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents.cpu()][:, self.a_idx])).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.attr_mat[ents.cpu()][:, self.a_idx])).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_344": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "[q_samples_l, q_samples_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_495": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_527": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_lr[len('step_exp_'):])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1045": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_batch, r_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_297": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_498": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_531": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(decay_lr[len('halving_step'):])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_741": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_batch_var, nce_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_501": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_534": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_504": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseAdam_507": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_510": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_820": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_891": {
                "tensors": {
                    "value": "l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_892": {
                "tensors": {
                    "value": "r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_893": {
                "tensors": {
                    "value": "l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_894": {
                "tensors": {
                    "value": "r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_997": {
                "tensors": {
                    "value": "l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_998": {
                "tensors": {
                    "value": "r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_999": {
                "tensors": {
                    "value": "l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1000": {
                "tensors": {
                    "value": "r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseAdam_513": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_807": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_953": {}
        }
    },
    "train_reddit.py": {
        "sklearn": {},
        "torch": {
            "cat_100": {
                "variable": {
                    "value": "nce_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nce_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_batch_var, nce_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transD_FB.py": {
        "sklearn": {
            "roc_auc_score_470": {
                "variable": {
                    "value": "l_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(l_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_471": {
                "variable": {
                    "value": "r_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "cat_r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_labels_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "cat_r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(r_probs_list, 0).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_400": {
                "variable": {
                    "value": "l_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "l_probs.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_401": {
                "variable": {
                    "value": "r_AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "r_A_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "r_probs.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_127": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_438": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_483": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_159": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_170": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_201": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2 ** x for x in xrange(10 - decay_lr, 10) if 2 ** x < num_epochs]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_batch, r_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_782": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FBDataset(S['train_data'], args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "FBDataset(args.data_path % 'train', args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_785": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FBDataset(S['train_data'], args.prefetch_to_gpu)",
                            "Call"
                        ],
                        [
                            "FBDataset(args.data_path % 'train', args.prefetch_to_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_46": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[q_samples_l, q_samples_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_173": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_205": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_lr[len('step_exp_'):])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_282": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_batch_var, nce_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_176": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_209": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(decay_lr[len('halving_step'):])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_212": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_185": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_466": {
                "tensors": {
                    "value": "l_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "tensors": {
                    "value": "r_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "tensors": {
                    "value": "l_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "tensors": {
                    "value": "r_probs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_804": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseAdam_188": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_191": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_347": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transD_movielens.py": {
        "sklearn": {
            "roc_auc_score_110": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "new_actual_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0 if x in other_class else 1 for x in actual_class]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "new_pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0 if x in other_class else 1 for x in pred_class]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'macro'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_350": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_355": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_360": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_365": {
                "variable": {
                    "value": "(l_precision, l_recall, l_fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "l_A_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "l_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ],
                        [
                            "fairD_disc.predict(filter_emb, p_batch[:, 0], True)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_41": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_72": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2 ** x for x in xrange(10 - decay_lr, 10) if 2 ** x < num_epochs]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "d_ins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_batch_var, nce_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_76": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_lr[len('step_exp_'):])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[q_samples_l, q_samples_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_80": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(decay_lr[len('halving_step'):])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_83": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_57": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_314": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseAdam_60": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_63": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorboard_logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "main_reddit.py": {
        "torch": {
            "is_available_75": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_84": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_96": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_99": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseAdam_102": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.0, 0.99))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trans_d.py": {
        "torch": {
            "is_available_156": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_294": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_367": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(args.data_path % 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self._ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.ent_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.rel_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sparse": {
                    "value": "USE_SPARSE_EMB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "manual_seed_169": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_170": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_202": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2 ** x for x in xrange(10 - decay_lr, 10) if 2 ** x < num_epochs]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_131": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_206": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_lr[len('step_exp_'):])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_226": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d[k][-num:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_266": {
                "tensors": {
                    "value": "[q_samples_l, q_samples_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_189": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_210": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(decay_lr[len('halving_step'):])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_213": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trans_e.py": {
        "torch": {
            "is_available_137": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_276": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_349": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KBDataset(args.data_path % 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.ent_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.rel_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_152": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_165": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_184": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2 ** x for x in xrange(10 - decay_lr, 10) if 2 ** x < num_epochs]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_316": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_112": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_168": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(mode[len('nesterov'):])",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_188": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(decay_lr[len('step_exp_'):])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_208": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d[k][-num:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "[q_samples_l, q_samples_r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_192": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(decay_lr[len('halving_step'):])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('betas', (0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "kwargs.pop('betas', (0.5, 0.99))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_195": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_216": {
                "variable": {
                    "value": "cuda_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "datum",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user, sr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "datum",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user, sr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_218": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(torch.cuda.device_count())).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(torch.cuda.device_count())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}