{
    "reid/evaluation_metrics/ranking.py": {
        "sklearn": {
            "average_precision_score_117": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "reid/metric_learning/euclidean.py": {
        "sklearn": {
            "check_array_50": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X_",
                            "Attribute"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "RegDB_test/RegDB_test.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ft_net(args=args, num_classes=n_class, num_features=args.features)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "RegDB_test/utils.py": {
        "torch": {
            "manual_seed_160": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "extract_feature.py": {
        "torch": {
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ft_net(args=args, num_classes=395, num_features=args.features)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "result_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i_observation[1], i_ms_observation[1], v_observation[1], v_ms_observation[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_120": {
                "variable": {
                    "value": "result_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tensors=[i_observation[1], i_ms_observation[1], v_observation[1], v_ms_observation[1]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(result_y, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "result_y.view(-1, features)",
                            "Call"
                        ],
                        [
                            "result_y.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mm01.py": {
        "torch": {
            "DataLoader_59": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.val, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.query)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "CamSampler(list(set(dataset.query)), [2, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.gallery)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "CamSampler(list(set(dataset.gallery)), [0, 1, 3, 4], 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(train_set, num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ft_net(args=args, num_classes=num_classes, num_features=args.features)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "regdb.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.val, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.query)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "CamSampler(list(set(dataset.query)), [2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.gallery)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "CamSampler(list(set(dataset.gallery)), [0], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(train_set, num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ft_net(args=args, num_classes=num_classes, num_features=args.features)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/dist_metric.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reid/evaluators.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features1[f].unsqueeze(0) for f in fnames1]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features2[f].unsqueeze(0) for f in fnames2]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features1[f].unsqueeze(0) for f in fnames1], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features2[f].unsqueeze(0) for f in fnames2], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(y, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features1[f].unsqueeze(0) for f in fnames1], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_54": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_55": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features2[f].unsqueeze(0) for f in fnames2], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(y, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/evaluators_regdb.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features1[f].unsqueeze(0) for f in fnames1]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features2[f].unsqueeze(0) for f in fnames2]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features1[f].unsqueeze(0) for f in fnames1], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features2[f].unsqueeze(0) for f in fnames2], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(y, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features1[f].unsqueeze(0) for f in fnames1], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_54": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features2[f].unsqueeze(0) for f in fnames2], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(y, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_54": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/feature_extraction/cnn.py": {
        "torch": {
            "no_grad_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i_observation[1], i_ms_observation[1], i_representation[1], i_ms_representation[1], v_observation[1], v_ms_observation[1], v_representation[1], v_ms_representation[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/baseline.py": {
        "torch": {
            "AdaptiveAvgPool2d_53": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_103": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_116": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(m_batchsize, C, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_122": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(energy_new)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(m_batchsize, C, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_146": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.indim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_282": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_283": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_291": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cam_256(x)",
                            "Call"
                        ],
                        [
                            "self.cam_512(x)",
                            "Call"
                        ],
                        [
                            "self.cam_1024(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "self._cam_module(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_358": {
                "variable": {
                    "value": "param_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "reid/models/newresnet.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "i_ms_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grey, x_grey, x_grey]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "conv_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in conv_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "add_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "num_features": {
                    "value": "self.out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "self.out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "self.in_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_151": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_154": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "[x1_shuff, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_171": {
                "input": {
                    "value": "-pos",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/trainers.py": {
        "torch": {
            "Softmax_20": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_21": {
                "variable": {
                    "value": "self.KLD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_137": {
                "input": {
                    "value": "self.softmax(i_observation[0].detach() / self.args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.softmax(i_representation[0] / self.args.temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_139": {
                "input": {
                    "value": "self.softmax(v_observation[0].detach() / self.args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.softmax(v_representation[0] / self.args.temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_142": {
                "input": {
                    "value": "self.softmax(v_ms_observation[0].detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.softmax(i_ms_representation[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_144": {
                "input": {
                    "value": "self.softmax(i_ms_observation[0].detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.softmax(v_ms_representation[0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/__init__.py": {
        "torch": {
            "is_tensor_7": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/data/sampler.py": {
        "torch": {
            "randperm_26": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_82": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reid/utils/serialization.py": {
        "torch": {
            "save_26": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(dirname, fpath)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utlis.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "add_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LogSoftmax_78": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_275": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_275": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_276": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_276": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_276": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_291": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_292": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_296": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.normalize(feature, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_328": {
                "variable": {
                    "value": "p_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.mm(b.t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "p_ba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.mm(b.t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_330": {
                "variable": {
                    "value": "p_aba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-08 + p_ab.mm(p_ba)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_337": {
                "variable": {
                    "value": "p_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-08 + p_ab",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_371": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_371": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_373": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_373": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_376": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, n_points, dtype=torch.float, requires_grad=False).fill_(1.0 / n_points).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_378": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, n_points, dtype=torch.float, requires_grad=False).fill_(1.0 / n_points).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_400": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.M(C, U, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_402": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_421": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_col - y_lin) ** p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_428": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(A).sum(-1) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "variable": {
                    "value": "ap_pos_intra",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(dist[i][mask_pos_intra], self.margin_1 - self.alpha_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_244": {
                "variable": {
                    "value": "ap_pos_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(dist[i][mask_pos_cross], self.margin_2 - self.alpha_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_246": {
                "variable": {
                    "value": "loss_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(ap_pos_intra)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ap_pos_intra.size(0) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "an_weight_intra",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tval * (-1 * an_less_intra + self.alpha_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_257": {
                "variable": {
                    "value": "an_weight_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tval * (-1 * an_less_cross + self.alpha_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "an_sum_intra",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.alpha_1 - an_less_intra, an_weight_intra)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "an_sum_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.alpha_2 - an_less_cross, an_weight_cross)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_247": {
                "input": {
                    "value": "torch.sum(ap_pos_cross)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ap_pos_cross.size(0) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_342": {
                "input": {
                    "value": "p_target_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_pos_ab.float() / torch.sum(is_pos_ab, dim=1).float().expand_as(is_pos_ab)",
                            "BinOp"
                        ],
                        [
                            "target[cross_modality].expand(n1, n1).eq(target[~cross_modality].expand(n2, n2))",
                            "Call"
                        ],
                        [
                            "p_target_ab.float() / torch.sum(p_target_ab, dim=1).float().expand_as(p_target_ab)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_243": {
                "input": {
                    "value": "dist[i][mask_pos_intra]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.margin_1 - self.alpha_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_244": {
                "input": {
                    "value": "dist[i][mask_pos_cross]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.margin_2 - self.alpha_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "ap_pos_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.add(dist[i][mask_pos_intra], self.margin_1 - self.alpha_1), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_247": {
                "input": {
                    "value": "ap_pos_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.add(dist[i][mask_pos_cross], self.margin_2 - self.alpha_2), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "lt_252": {
                "input": {
                    "value": "dist[i][mask_neg_intra]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.alpha_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_253": {
                "input": {
                    "value": "dist[i][mask_neg_cross]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.alpha_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_256": {
                "input": {
                    "value": "an_weight_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.tval * (-1 * an_less_intra + self.alpha_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_258": {
                "input": {
                    "value": "an_weight_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.tval * (-1 * an_less_cross + self.alpha_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_259": {
                "input": {
                    "value": "self.alpha_1 - an_less_intra",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "an_weight_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.tval * (-1 * an_less_intra + self.alpha_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_260": {
                "input": {
                    "value": "self.alpha_2 - an_less_cross",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "an_weight_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.tval * (-1 * an_less_cross + self.alpha_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_262": {
                "input": {
                    "value": "an_sum_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(self.alpha_2 - an_less_cross, an_weight_cross))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "an_weight_cross_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(an_weight_cross) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_269": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_308": {
                "input": {
                    "value": "is_pos_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[cross_modality].expand(n1, n1).eq(targets[cross_modality].expand(n1, n1).t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_311": {
                "input": {
                    "value": "is_pos_ba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[~cross_modality].expand(n2, n2).eq(targets[cross_modality].expand(n2, n2).t())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_347": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_421": {
                "input": {
                    "value": "x_col - y_lin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_428": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_428": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_389": {
                "input": {
                    "value": "mu + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_390": {
                "input": {
                    "value": "nu + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}