{
    "online_as_code/approaches/offline/baselines/gmeans.py": {
        "sklearn": {
            "check_random_state_16": {
                "variable": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KMeans_27": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KMeans_83": {
                "variable": {
                    "value": "self._kmeans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self._k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "self._n_init_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pairwise_distances_110": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[kmeans.labels_ == center_idx]",
                            "Subscript"
                        ],
                        [
                            "X[self._kmeans.labels_ == label]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "self._kmeans.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_44": {
                "variable": {
                    "value": "tmp_kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_init": {
                    "value": "self._n_init_kmeans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/isac.py": {
        "sklearn": {
            "SimpleImputer_13": {
                "variable": {
                    "value": "self._imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxAbsScaler_14": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resample_62": {
                "*arrays_0": {
                    "value": "feature_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "performance_data",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, np.size(performance_data, axis=0)) if num_instances > 0 else np.size(performance_data, axis=0)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/multiclass_algorithm_selector.py": {
        "sklearn": {
            "SimpleImputer_35": {
                "variable": {
                    "value": "self.imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_39": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_42": {
                "variable": {
                    "value": "self.trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.scikit_classifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resample_66": {
                "variable": {
                    "value": "(resampled_scenario_feature_data, resampled_scenario_performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "amount_of_training_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_requested_instances, len(scenario.instances)) if num_requested_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_17": {
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/per_algorithm_regressor.py": {
        "sklearn": {
            "resample_86": {
                "variable": {
                    "value": "(resampled_scenario_feature_data, resampled_scenario_performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "amount_of_training_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_requested_instances, len(scenario.instances)) if num_requested_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_16": {
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SimpleImputer_37": {
                "variable": {
                    "value": "imputer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_42": {
                "variable": {
                    "value": "standard_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_46": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.scikit_regressor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/satzilla07.py": {
        "sklearn": {
            "SimpleImputer_19": {
                "variable": {
                    "value": "self._imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_20": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_35": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "make_scorer_36": {
                "variable": {
                    "value": "scorer",
                    "type": "variable",
                    "possible_values": []
                },
                "score_func": {
                    "value": "mean_squared_error",
                    "type": "variable",
                    "possible_values": []
                },
                "greater_is_better": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PolynomialFeatures_46": {
                "variable": {
                    "value": "features_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PolynomialFeatures_68": {
                "variable": {
                    "value": "features_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resample_78": {
                "*arrays_0": {
                    "value": "feature_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "performance_data",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, np.size(performance_data, axis=0)) if num_instances > 0 else np.size(performance_data, axis=0)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/satzilla11.py": {
        "sklearn": {
            "SimpleImputer_22": {
                "variable": {
                    "value": "self._imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_23": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_56": {
                "variable": {
                    "value": "self._models[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                },
                "max_features": {
                    "value": "log2",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resample_104": {
                "*arrays_0": {
                    "value": "feature_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "performance_data",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, np.size(performance_data, axis=0)) if num_instances > 0 else np.size(performance_data, axis=0)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/snnap.py": {
        "sklearn": {
            "SimpleImputer_19": {
                "variable": {
                    "value": "self._imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxAbsScaler_20": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_21": {
                "variable": {
                    "value": "self._runtime_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BallTree_47": {
                "variable": {
                    "value": "self._index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "performances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip(performances, a_min=np.NINF, a_max=scenario.algorithm_cutoff_time)",
                            "Call"
                        ],
                        [
                            "self._runtime_scaler.fit_transform(performances)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "pyfunc",
                    "type": "str",
                    "possible_values": []
                },
                "func": {
                    "value": "SNNAP._top_n_jaccard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric_params": {
                    "value": "{'top_n': self._top_n}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "resample_72": {
                "*arrays_0": {
                    "value": "feature_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "performance_data",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, np.size(performance_data, axis=0)) if num_instances > 0 else np.size(performance_data, axis=0)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_41": {
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/sunny.py": {
        "sklearn": {
            "SimpleImputer_14": {
                "variable": {
                    "value": "self._imputer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strategy": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StandardScaler_15": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KDTree_33": {
                "variable": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(features, axis=0)",
                            "Call"
                        ],
                        [
                            "self._imputer.transform(features)",
                            "Call"
                        ],
                        [
                            "self._scaler.transform(features)",
                            "Call"
                        ],
                        [
                            "self._imputer.fit_transform(features)",
                            "Call"
                        ],
                        [
                            "self._scaler.fit_transform(features)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resample_128": {
                "*arrays_0": {
                    "value": "feature_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "performance_data",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, np.size(performance_data, axis=0)) if num_instances > 0 else np.size(performance_data, axis=0)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/baselines/utils.py": {
        "sklearn": {
            "clone_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clone_37": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/survival_forests/auto_surrogate.py": {
        "sklearn": {
            "resample_80": {
                "variable": {
                    "value": "(features, performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, len(scenario.instances)) if num_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ],
                        [
                            "len(performances_of_algorithm_with_id)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resample_219": {
                "variable": {
                    "value": "(resampled_scenario_feature_data, resampled_scenario_performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "amount_of_training_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_requested_instances, len(scenario.instances)) if num_requested_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SimpleImputer_258": {
                "variable": {
                    "value": "thresh_imputer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_260": {
                "variable": {
                    "value": "thresh_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_263": {
                "variable": {
                    "value": "thresh_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.n_estimators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.min_samples_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.min_samples_leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "self.min_weight_fraction_leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.max_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "self.bootstrap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "oob_score": {
                    "value": "self.oob_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SimpleImputer_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/offline/survival_forests/surrogate.py": {
        "sklearn": {
            "resample_40": {
                "variable": {
                    "value": "(features, performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "num_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_instances, len(scenario.instances)) if num_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ],
                        [
                            "len(performances_of_algorithm_with_id)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resample_174": {
                "variable": {
                    "value": "(resampled_scenario_feature_data, resampled_scenario_performances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "scenario.feature_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "scenario.performance_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "amount_of_training_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_requested_instances, len(scenario.instances)) if num_requested_instances > 0 else len(scenario.instances)",
                            "IfExp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "fold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SimpleImputer_213": {
                "variable": {
                    "value": "thresh_imputer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_215": {
                "variable": {
                    "value": "thresh_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_218": {
                "variable": {
                    "value": "thresh_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.n_estimators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.min_samples_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.min_samples_leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "self.min_weight_fraction_leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.max_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "self.bootstrap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "oob_score": {
                    "value": "self.oob_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SimpleImputer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/online/deegrote.py": {
        "sklearn": {
            "Pipeline_20": {
                "variable": {
                    "value": "self.regression_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('imputer', SimpleImputer()), ('scaler', Normalizer()), ('model', regression_model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_18": {
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_32": {
                "variable": {
                    "value": "self.trained_models_map[algorithm_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.regression_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_48": {
                "variable": {
                    "value": "self.trained_models_map[algorithm_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.regression_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_52": {
                "variable": {
                    "value": "self.trained_models_map[algorithm_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.regression_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SimpleImputer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normalizer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/online/failed_attempts/online_linear_regression.py": {
        "sklearn": {}
    },
    "online_as_code/approaches/online/failed_attempts/superset_co.py": {
        "sklearn": {
            "SGDClassifier_59": {
                "variable": {
                    "value": "self.lr_classifier_map[algorithm_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "loss": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/online/failed_attempts/superset_online_linear_regression.py": {
        "sklearn": {
            "SGDClassifier_55": {
                "variable": {
                    "value": "self.lr_classifier_map[algorithm_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "loss": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "online_as_code/approaches/online/linUCB.py": {
        "sklearn": {}
    },
    "online_as_code/run.py": {
        "sklearn": {
            "LinearRegression_132": {
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Ridge_150": {
                "alpha": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}