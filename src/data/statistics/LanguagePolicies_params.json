{
    "utils/graphs.py": {
        "sklearn": {},
        "tensorflow": {
            "create_file_writer_20": {
                "variable": {
                    "value": "self.__tboard_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.logdir + 'train/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_21": {
                "variable": {
                    "value": "self.__tboard_validation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.logdir + 'validate/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trace_on_25": {
                "graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "profiler": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_export_29": {
                "name": {
                    "value": "model_trace",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "profiler_outdir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_39": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_43": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_66": {
                "name": {
                    "value": "Trajectory",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_89": {
                "name": {
                    "value": "Image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_106": {
                "name": {
                    "value": "Attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_125": {
                "name": {
                    "value": "Attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_143": {
                "name": {
                    "value": "DeltaT",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_157": {
                "name": {
                    "value": "Weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_200": {
                "name": {
                    "value": "Trajectory",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ],
                        [
                            "np.zeros((target, dimensions), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(self.finishFigure(fig), 0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "stepid",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/intprim/basis_model.py": {
        "sklearn": {}
    },
    "utils/intprim/selection.py": {
        "sklearn": {}
    },
    "viz_val_vrep.py": {
        "sklearn": {
            "mean_absolute_error_89": {
                "y_true": {
                    "value": "trj[:, :6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "stt[:, :6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "TFRecordDataset_59": {
                "variable": {
                    "value": "self.ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "parse_single_example_65": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.feature_descriptor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "img_ftr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_ftr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['image/features']",
                            "Subscript"
                        ],
                        [
                            "tf.keras.backend.reshape(img_ftr, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['robot/trajectory/in']",
                            "Subscript"
                        ],
                        [
                            "tf.keras.backend.reshape(state, shape=[-1, 7])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "trajectory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "trajectory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['robot/trajectory/out']",
                            "Subscript"
                        ],
                        [
                            "tf.keras.backend.reshape(trajectory, shape=[-1, 7])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['dmp/w']",
                            "Subscript"
                        ],
                        [
                            "tf.keras.backend.reshape(weights, shape=[7, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[7, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['robot/trajectory/phase']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "loss_atn",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['robot/trajectory/padding']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_47": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_48": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_49": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_50": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_51": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_52": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_54": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_55": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_56": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "features['robot/trajectory/length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_src/attention.py": {
        "tensorflow": {
            "TimeDistributed_11": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "tf.keras.layers.Dense(units=self.units, activation=tf.keras.activations.tanh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_12": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "tf.keras.layers.Dense(units=self.units, activation=tf.keras.activations.sigmoid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_13": {
                "variable": {
                    "value": "self.wt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "tf.keras.layers.Dense(units=1, activation=tf.keras.activations.linear, use_bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_20": {
                "variable": {
                    "value": "language",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(language, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_21": {
                "variable": {
                    "value": "att_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(language, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_25": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w1(att_in)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w2(att_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.wt(y)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(a, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "logits": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.wt(y)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(a, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_11": {
                "units": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_12": {
                "units": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_13": {
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_18": {
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_20": {
                "input": {
                    "value": "language",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(tf.expand_dims(language, 1), [1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_src/basismodel.py": {
        "tensorflow": {
            "convert_to_tensor_14": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "basis_funcs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_basis_values(positions)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs[0], perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_32": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.centers, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(x)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_34": {
                "variable": {
                    "value": "funcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(tf.math.pow(x - centers, 2) / (2.0 * self.scale))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_24": {
                "input": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(basis_funcs, weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_32": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_34": {
                "x": {
                    "value": "x - centers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_src/dmp.py": {
        "tensorflow": {
            "TensorShape_18": {
                "variable": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[4, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_29": {
                "variable": {
                    "value": "self.basis_locations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.basis_locations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_30": {
                "variable": {
                    "value": "self.basis_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.basis_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_46": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "current",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "y_term + tf.math.multiply(tf.math.multiply(error_coupling, dy_term), tf.tile(dt, [1, self.dimensions]))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.greater(tf.expand_dims(step, 1), 1.0 / dt), state[:, 1, :], y_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_51": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.tile(tf.expand_dims(self.basis_variance, 0), [batch_size, 1]) * tf.math.pow(tf.tile(tf.expand_dims(cs_x, 1), [1, self.nbasis]) - tf.tile(tf.expand_dims(self.basis_locations, 0), [batch_size, 1]), 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_57": {
                "variable": {
                    "value": "front_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(cs_x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_58": {
                "variable": {
                    "value": "front_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "front_term",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(cs_x, 1), [1, self.dimensions])",
                            "Call"
                        ],
                        [
                            "tf.math.multiply(front_term, goal - start)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "goal - start",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "forcing_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(psi, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "constants[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_62": {
                "variable": {
                    "value": "forcing_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "front_term",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(cs_x, 1), [1, self.dimensions])",
                            "Call"
                        ],
                        [
                            "tf.math.multiply(front_term, goal - start)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "forcing_term",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(tf.expand_dims(psi, 1), weights)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(forcing_term, 1) / tf.tile(tf.expand_dims(tf.math.reduce_sum(psi, axis=1), 1), [1, self.dimensions])",
                            "BinOp"
                        ],
                        [
                            "tf.math.multiply(front_term, forcing_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_65": {
                "variable": {
                    "value": "error_coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(error_coupling, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_70": {
                "variable": {
                    "value": "y_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.greater(tf.expand_dims(step, 1), 1.0 / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "state[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "y_term + tf.math.multiply(tf.math.multiply(error_coupling, dy_term), tf.tile(dt, [1, self.dimensions]))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.greater(tf.expand_dims(step, 1), 1.0 / dt), state[:, 1, :], y_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_74": {
                "input": {
                    "value": "cs_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "cs_x + -self.ax * tf.math.multiply(cs_x, error_coupling) * self.tau * dt[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(cs_x, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 1]",
                            "Subscript"
                        ],
                        [
                            "step + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(step, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_76": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(cs_x, step)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "variables",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.backend.concatenate((cs_x, step), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(variables, tf.constant([[0, 0], [0, 0], [0, self.dimensions - 2]]), 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.constant([[0, 0], [0, 0], [0, self.dimensions - 2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_78": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(variables, tf.expand_dims(y_term, 1), tf.expand_dims(dy_term, 1), tf.expand_dims(ddy_term, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "x": {
                    "value": "error_coupling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + error)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(error_coupling, 1), [1, self.dimensions])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ddy_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 3, :]",
                            "Subscript"
                        ],
                        [
                            "(self.ay * (self.by * (goal - y_term) - dy_term / self.tau) + forcing_term) * self.tau",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_67": {
                "x": {
                    "value": "error_coupling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + error)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(error_coupling, 1), [1, self.dimensions])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dy_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 2, :]",
                            "Subscript"
                        ],
                        [
                            "dy_term + tf.math.multiply(tf.math.multiply(error_coupling, ddy_term) * self.tau, tf.tile(dt, [1, self.dimensions]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_13": {
                "shape": {
                    "value": "self.dimensions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "constants[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_57": {
                "input": {
                    "value": "cs_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "cs_x + -self.ax * tf.math.multiply(cs_x, error_coupling) * self.tau * dt[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(cs_x, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "psi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.exp(-tf.tile(tf.expand_dims(self.basis_variance, 0), [batch_size, 1]) * tf.math.pow(tf.tile(tf.expand_dims(cs_x, 1), [1, self.nbasis]) - tf.tile(tf.expand_dims(self.basis_locations, 0), [batch_size, 1]), 2.0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "input": {
                    "value": "forcing_term",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(tf.expand_dims(psi, 1), weights)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(forcing_term, 1) / tf.tile(tf.expand_dims(tf.math.reduce_sum(psi, axis=1), 1), [1, self.dimensions])",
                            "BinOp"
                        ],
                        [
                            "tf.math.multiply(front_term, forcing_term)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_61": {
                "input": {
                    "value": "tf.expand_dims(tf.math.reduce_sum(psi, axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "error_coupling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + error)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(error_coupling, 1), [1, self.dimensions])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_66": {
                "input": {
                    "value": "dt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "constants[3]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_67": {
                "input": {
                    "value": "dt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "constants[3]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.dimensions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_70": {
                "x": {
                    "value": "tf.expand_dims(step, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "[[0, 0], [0, 0], [0, self.dimensions - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_52": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(cs_x, 1), [1, self.nbasis]) - tf.tile(tf.expand_dims(self.basis_locations, 0), [batch_size, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "tf.math.reduce_sum(psi, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 1]",
                            "Subscript"
                        ],
                        [
                            "step + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(step, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "ddy_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 3, :]",
                            "Subscript"
                        ],
                        [
                            "(self.ay * (self.by * (goal - y_term) - dy_term / self.tau) + forcing_term) * self.tau",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "x": {
                    "value": "cs_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "cs_x + -self.ax * tf.math.multiply(cs_x, error_coupling) * self.tau * dt[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(cs_x, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "error_coupling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + error)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(error_coupling, 1), [1, self.dimensions])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_51": {
                "input": {
                    "value": "tf.expand_dims(self.basis_variance, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "psi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.exp(-tf.tile(tf.expand_dims(self.basis_variance, 0), [batch_size, 1]) * tf.math.pow(tf.tile(tf.expand_dims(cs_x, 1), [1, self.nbasis]) - tf.tile(tf.expand_dims(self.basis_locations, 0), [batch_size, 1]), 2.0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "self.basis_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_52": {
                "input": {
                    "value": "tf.expand_dims(cs_x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.nbasis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_53": {
                "input": {
                    "value": "tf.expand_dims(self.basis_locations, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "cs_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state[:, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "cs_x + -self.ax * tf.math.multiply(cs_x, error_coupling) * self.tau * dt[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(cs_x, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "self.basis_locations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_src/feedbackcontroller.py": {
        "tensorflow": {
            "GRUCell_15": {
                "variable": {
                    "value": "self.robot_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.robot_state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "variable": {
                    "value": "self.weight_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dims * self.n_bfuncs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "variable": {
                    "value": "self.weight_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dims * self.n_bfuncs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.weight_dense_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dims * self.n_bfuncs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "variable": {
                    "value": "self.phase_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "int(self.robot_state_size / 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.phase_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.hard_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_36": {
                "variable": {
                    "value": "in_robot",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.convert_to_tensor(training)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : st_robot_last",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : in_robot",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concatenate_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(cn_features, e_robot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_dense_3(self.weight_dense_2(self.weight_dense_1(x)))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.reshape(weights, shape=[-1, self.dims, self.n_bfuncs])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dims, self.n_bfuncs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_36": {
                "value": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_dense_3(self.weight_dense_2(self.weight_dense_1(x)))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.reshape(weights, shape=[-1, self.dims, self.n_bfuncs])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_src/glove.py": {
        "tensorflow": {
            "Embedding_13": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "esize",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model_src/model.py": {
        "tensorflow": {
            "GRU_25": {
                "variable": {
                    "value": "self.lng_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_32": {
                "variable": {
                    "value": "self.pt_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "variable": {
                    "value": "self.pt_dt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "variable": {
                    "value": "self.pt_dt_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.activations.hard_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RNN_37": {
                "variable": {
                    "value": "self.controller",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "FeedbackController(robot_state_size=self.units, rnn_state_size=(tf.TensorShape([self.output_dims]), tf.TensorShape([self.units])), dimensions=self.output_dims, basis_functions=self.basis_functions, special=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "atn_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attention((language, features))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "atn_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atn_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(atn, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(atn_w, [1, 1, 5])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_67": {
                "variable": {
                    "value": "cfeatures",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "atn_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(atn, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(atn_w, [1, 1, 5])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_68": {
                "variable": {
                    "value": "cfeatures",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cfeatures",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.multiply(atn_w, features)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(cfeatures, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.concatenate((cfeatures, language, start_joints), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_72": {
                "variable": {
                    "value": "cfeatures",
                    "type": "Variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(cfeatures, language, start_joints)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "self.frcnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "str(od_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "language",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.embedding(language)",
                            "Call"
                        ],
                        [
                            "self.lng_gru(inputs=language, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[batch_size, self.units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "value": {
                    "value": "use_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_40": {
                "dims": {
                    "value": "[self.units]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "service.py": {
        "tensorflow": {
            "reduce_mean_195": {
                "variable": {
                    "value": "self.trj_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_std_196": {
                "variable": {
                    "value": "self.trj_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "self.b_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_200": {
                "variable": {
                    "value": "phase_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_189": {
                "value": {
                    "value": "np.tile([self.language], [250, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_190": {
                "value": {
                    "value": "np.tile([self.features], [250, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_191": {
                "value": {
                    "value": "np.tile([robot], [250, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_171": {
                "value": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_194": {
                "value": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "input_tensor": {
                    "value": "dmp_dt",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_processing.py": {
        "tensorflow": {
            "list_physical_devices_35": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_20": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_23": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_29": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_32": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "self.frcnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "str(frcnn_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_68": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Example_124": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'language/tokens': int64_list_feature(tokens), 'image/features': float_list_feature(features), 'robot/trajectory/in': float_list_feature(trajectory_in), 'robot/trajectory/out': float_list_feature(trajectory_out), 'robot/trajectory/length': int64_feature(trajectory_length), 'robot/trajectory/dt': float_list_feature([dt]), 'aux/onehot_class': int64_list_feature(onehot), 'dmp/w': float_list_feature(dmp_w), 'robot/trajectory/phase': float_list_feature(phase.tolist()), 'robot/trajectory/padding': float_list_feature(loss_atn.tolist())})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_199": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image[:, :, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "list_logical_devices_41": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Int64List_20": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_23": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(value)",
                            "Call"
                        ],
                        [
                            "(value - v_min) / (v_max - v_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_26": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_29": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(value)",
                            "Call"
                        ],
                        [
                            "(value - v_min) / (v_max - v_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FloatList_32": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.copy(value)",
                            "Call"
                        ],
                        [
                            "(value - v_min) / (v_max - v_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_memory_growth_40": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Features_124": {
                "feature": {
                    "value": "{'language/tokens': int64_list_feature(tokens), 'image/features': float_list_feature(features), 'robot/trajectory/in': float_list_feature(trajectory_in), 'robot/trajectory/out': float_list_feature(trajectory_out), 'robot/trajectory/length': int64_feature(trajectory_length), 'robot/trajectory/dt': float_list_feature([dt]), 'aux/onehot_class': int64_list_feature(onehot), 'dmp/w': float_list_feature(dmp_w), 'robot/trajectory/phase': float_list_feature(phase.tolist()), 'robot/trajectory/padding': float_list_feature(loss_atn.tolist())}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "utils/network.py": {
        "tensorflow": {
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_28": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_135": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_136": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mse",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.pow(y_true - y_pred, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.math.multiply(mse, mask)",
                            "Call"
                        ],
                        [
                            "1.0 / n * tf.reduce_sum(mse, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "dt_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.metrics.mean_squared_error(delta_t, dmp_dt[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "trj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.multiply(trj_loss, loss_atn)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "trj_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "trj_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculateMSEWithPaddingMask(generated, gen_trj, tf.tile([[weight_dim]], [16, 350, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.math.multiply(trj_loss, loss_atn), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(trj_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "phs_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.calculateMSEWithPaddingMask(phase, phs[:, :, 0], loss_atn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "weight_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.metrics.mean_squared_error(wght[:, :-1, :, :], tf.roll(wght, shift=-1, axis=1)[:, :-1, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "weight_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.multiply(weight_loss, loss_atn[:, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_84": {
                "input": {
                    "value": "tf.expand_dims(d_in[2][0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[50, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_85": {
                "input": {
                    "value": "tf.expand_dims(d_out[1][0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[50, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_86": {
                "input": {
                    "value": "tf.expand_dims(d_out[3][0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[50, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "mse",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.pow(y_true - y_pred, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.math.multiply(mse, mask)",
                            "Call"
                        ],
                        [
                            "1.0 / n * tf.reduce_sum(mse, axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_149": {
                "y_true": {
                    "value": "delta_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "dmp_dt[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_151": {
                "input": {
                    "value": "[[weight_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[16, 350, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "x": {
                    "value": "trj_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.calculateMSEWithPaddingMask(generated, gen_trj, tf.tile([[weight_dim]], [16, 350, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.math.multiply(trj_loss, loss_atn), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(trj_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_atn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_157": {
                "y_true": {
                    "value": "wght[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "tf.roll(wght, shift=-1, axis=1)[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_158": {
                "x": {
                    "value": "weight_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(tf.keras.metrics.mean_squared_error(wght[:, :-1, :, :], tf.roll(wght, shift=-1, axis=1)[:, :-1, :, :]), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_mean(tf.math.multiply(weight_loss, loss_atn[:, :-1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_atn[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "atn",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_std_185": {
                "input_tensor": {
                    "value": "atn",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "input_tensor": {
                    "value": "gen_trj",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_std_186": {
                "input_tensor": {
                    "value": "gen_trj",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "input_tensor": {
                    "value": "dmp_dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "d_in[2][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "input": {
                    "value": "d_out[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "d_out[3][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_157": {
                "input": {
                    "value": "wght",
                    "type": "Variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tf_util.py": {
        "tensorflow": {
            "list_physical_devices_8": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_20": {
                "variable": {
                    "value": "cpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_visible_devices_21": {
                "devices": {
                    "value": "cpus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.config.list_physical_devices(device_type='CPU')",
                            "Call"
                        ]
                    ]
                },
                "device_type": {
                    "value": "CPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_visible_devices_22": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_inter_op_parallelism_threads_28": {
                "num_threads": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_logical_devices_13": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_intra_op_parallelism_threads_25": {
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_intra_op_parallelism_threads_27": {
                "num_threads": {
                    "value": "int(os.getenv('OMP_NUM_THREADS'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_memory_growth_12": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}