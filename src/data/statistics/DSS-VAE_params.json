{
    "dss_vae/bin/train.py": {
        "torch": {
            "mean_122": {
                "input": {
                    "value": "batch_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_ret['Loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "backward_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__98": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__106": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_136": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/bin/vae_train.py": {
        "torch": {
            "mean_440": {
                "variable": {
                    "value": "elbo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_track['Model Score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "ret_loss['Loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_48": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "ret_loss['Loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_141": {
                "variable": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "ret_loss['Loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_144": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "UnaryOp",
                    "possible_values": [
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-model.score(batch_examples)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "ret_loss['Loss']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_322": {
                "variable": {
                    "value": "_kl_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_track['KL Item']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_344": {
                "variable": {
                    "value": "dev_elbo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_track['Model Score']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__52": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__148": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__290": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_446": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__274": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__282": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "main_args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_327": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_352": {
                "input": {
                    "value": "dev_track['NLL Loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_353": {
                "input": {
                    "value": "dev_track['KL Loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_380": {
                "input": {
                    "value": "dev_track['NLL Loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_385": {
                "input": {
                    "value": "dev_track['KL Loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/decoder/att_decoder.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ],
                        [
                            "subsequent_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.block_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionAttBlock(d_model=hidden_size, d_inner_hid=inner_hidden, n_head=n_head, dropout=block_dropout, dim_per_head=dim_per_head) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_77": {
                "variable": {
                    "value": "self.out_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gt_114": {
                "variable": {
                    "value": "dec_slf_attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_slf_attn_pad_mask + dec_slf_attn_sub_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_180": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(inputs)",
                            "Call"
                        ],
                        [
                            "self._pad_2d(logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(inputs)",
                            "Call"
                        ],
                        [
                            "self._pad_2d(logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/decoder/att_nonauto_decoder.py": {
        "torch": {
            "ModuleList_100": {
                "variable": {
                    "value": "self.cond_att_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionAttBlock(d_model=hidden_dim, d_inner_hid=inner_dim, n_head=n_head, dropout=block_dropout, dim_per_head=dim_per_head) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_104": {
                "variable": {
                    "value": "self.out_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.bow_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(out_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "p": {
                    "value": "out_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "out_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/decoder/beam_decoder.py": {
        "torch": {
            "zeros_249": {
                "variable": {
                    "value": "h_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nw_hidden[0].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_138": {
                "input": {
                    "value": "get_long_tensor([[self.SOS] * batch_size * self.k])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "state_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nw_hidden[0][0].size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/decoder/nonauto_decoder.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.word_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(out_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_88": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score.view(-1, vocab_size).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_90": {
                "variable": {
                    "value": "sent_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(raw_score.view(-1, vocab_size).contiguous(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "flattened_tgt_var.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "sent_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "p": {
                    "value": "out_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "out_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "raw_score.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_92": {
                "input": {
                    "value": "flattened_tgt_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tgt_var.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/decoder/rnn_decoder.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.soft_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoder_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_94": {
                "variable": {
                    "value": "log_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, scores.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_98": {
                "variable": {
                    "value": "tgt_sent_log_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(scores.view(-1, scores.size(2)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "flattened_tgt_sents.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "tgt_sent_log_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_100": {
                "input": {
                    "value": "flattened_tgt_sents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tgt_sents_var[1:].contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/decoder/synsup_nonauto_decoder.py": {
        "torch": {
            "Sequential_80": {
                "variable": {
                    "value": "self.dst_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(block_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.dst_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(block_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.terminal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(block_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.non_terminal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(block_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.arc_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(block_dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "block_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_82": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.window_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "block_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "p": {
                    "value": "block_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "p": {
                    "value": "block_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_103": {
                "p": {
                    "value": "block_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.enc_map_dec.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "arc_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/encoder/attentive_encoder.py": {
        "torch": {}
    },
    "dss_vae/encoder/nonauto_encoder.py": {
        "torch": {
            "pack_padded_sequence_129": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(input_var)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_132": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/encoder/rnn_encoder.py": {
        "torch": {
            "pack_padded_sequence_51": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(input_var)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_54": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/encoder/tree_encoder.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.ioux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.mem_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.iouh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.mem_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "child_h_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "child_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0].detach().new(1, self.mem_dim).fill_(0.0).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "(i, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.ioux(inputs) + self.iouh(child_h_sum)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "iou.size(1) // 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fh(child_h) + self.fx(inputs).repeat(len(child_h), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_62": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.sigmoid(self.fh(child_h) + self.fx(inputs).repeat(len(child_h), 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "child_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0].detach().new(1, self.mem_dim).fill_(0.0).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_65": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_64": {
                "input": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(self.num_children)",
                            "Call"
                        ],
                        [
                            "range(self.num_children)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(f, child_c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "input": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.sum(fc, dim=0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "child_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0].detach().new(1, self.mem_dim).fill_(0.0).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/metrics/tools.py": {
        "torch": {
            "mean_30": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/metrics/unigram_kl.py": {
        "torch": {
            "sum_35": {
                "input": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_tensor(unigram_count)",
                            "Call"
                        ],
                        [
                            "count + 1.0 / torch.sum(count) * count.eq(0.0).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_tensor(unigram_count)",
                            "Call"
                        ],
                        [
                            "count + 1.0 / torch.sum(count) * count.eq(0.0).float()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/models/nonauto_gen.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "overmask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_src[:, :, None], (1 - mask_src[:, :, None]).expand(*mask_src.size(), max_len - 1) * INF + mask_src[:, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "heap_inx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_78": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ins.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "(S_t, _inx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[heap_scores[:, k:], S_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_88": {
                "variable": {
                    "value": "(S_t, _inx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "I_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[heap_inx[:, :, k:], I_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "I_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "_inx.gather(1, _inx2)[:, None, :].expand(batch_size, src_len, _inx.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gt_560": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_dict['s_tgt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.vocab.tgt.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_299": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(load_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_326": {
                "variable": {
                    "value": "ret[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ret['word']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_507": {
                "variable": {
                    "value": "dec_ret[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_ret['word']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_55": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eq_578": {
                "input": {
                    "value": "pos_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init_ret['pos']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dict['s_pos']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "le_580": {
                "input": {
                    "value": "torch.abs(pos_pred - pos_ref)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "distance_threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eq_584": {
                "input": {
                    "value": "relative_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "relative_ref",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eq_585": {
                "input": {
                    "value": "relative_pred.gt(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "relative_ref.gt(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_580": {
                "input": {
                    "value": "pos_pred - pos_ref",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/models/seq2seq.py": {
        "torch": {
            "stack_190": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "completed_hypotheses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "topk_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "meta_data['sequence']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_251": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(load_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/models/syntax_sup_gen.py": {
        "torch": {
            "log_softmax_57": {
                "variable": {
                    "value": "ret[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ret['word']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/models/transformer.py": {
        "torch": {
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(load_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/attention.py": {
        "torch": {
            "bmm_14": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encoding_att_linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "h_t.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_14": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_17": {
                "variable": {
                    "value": "att_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(src_encoding_att_linear, h_t.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_21": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.view(*att_view)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_80": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tanh(self.linear_out(combined.view(-1, 2 * hidden_size))).view(batch_size, -1, hidden_size)",
                            "Call"
                        ],
                        [
                            "self.linear_out(torch.cat([c_t, h, x], 1))",
                            "Call"
                        ],
                        [
                            "self.linear_out(torch.cat([m_x, h], 1))",
                            "Call"
                        ],
                        [
                            "r_t.view(-1, self.hidden_size, 2).max(2)[0]",
                            "Subscript"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "output.view(-1, self.out_feature, self.pool_size)",
                            "Call"
                        ],
                        [
                            "output.max(2)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_86": {
                "variable": {
                    "value": "mix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mix, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_91": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_out(combined.view(-1, 2 * hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_105": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_112": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.linear_in(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_114": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.feed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.remove",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.mem_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.feed_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_135": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.linear_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_172": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_173": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_183": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feature * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size + emb_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_144": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.linear_in(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_146": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[c_t, h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_131": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "p": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.22",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "[memory, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[m_x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "[c_t, h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "2 * hidden_size + emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/basic.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/block.py": {
        "torch": {
            "LayerNorm_12": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.block_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiAttBlock(d_model=hidden_size, d_inner_hid=inner_hidden, n_head=n_head, dropout=block_dropout, dim_per_head=dim_per_head) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_38": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_73": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_74": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/networks/bridger.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "self.k_mapper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.v_mapper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_108": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.mapper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "v_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_95": {
                "input": {
                    "value": "post_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k_vec.contiguous().view(batch_size, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "post_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v_vec.contiguous().view(batch_size, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/criterions.py": {
        "torch": {
            "randn_77": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_61": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_64": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_99": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_ref.eq(self.padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/embeddings.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scaled_time.sin(), scaled_time.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/position.py": {
        "torch": {
            "gt_289": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position_select.unsqueeze(-2) - position_select.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_366": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position_select.unsqueeze(-2) - position_select.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_465": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position_select.unsqueeze(-2) - position_select.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_41": {
                "variable": {
                    "value": "self.feat_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layer",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.feat_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * model_dim, model_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionAttBlock(d_model=model_dim, d_inner_hid=inner_dim, n_head=head_num, dropout=dropout, dim_per_head=None) for _ in range(att_num_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_62": {
                "variable": {
                    "value": "self.out_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_65": {
                "variable": {
                    "value": "self.feat_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layer",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.feat_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * model_dim, model_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionAttBlock(d_model=model_dim, d_inner_hid=inner_dim, n_head=head_num, dropout=dropout, dim_per_head=None) for _ in range(att_num_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_79": {
                "variable": {
                    "value": "self.out_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": null,
                    "possible_values": []
                }
            },
            "gumbel_softmax_187": {
                "variable": {
                    "value": "gumbel_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pos_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor.forward(input=position_feature)",
                            "Call"
                        ],
                        [
                            "pos_logits.view(-1, vocab_size)",
                            "Call"
                        ],
                        [
                            "pos_logits.view(batch_size, -1, vocab_size)",
                            "Call"
                        ],
                        [
                            "relative_pos",
                            "Name"
                        ],
                        [
                            "pos_logits.contiguous().transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_192": {
                "variable": {
                    "value": "position_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_pos.unsqueeze(-1) - relative_pos.unsqueeze(-2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "position_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_292": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ref.unsqueeze(-2) - pos_ref.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_369": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "true_position.unsqueeze(-2) - true_position.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_416": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_460": {
                "variable": {
                    "value": "position_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_pos.unsqueeze(-1) - relative_pos.unsqueeze(-2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_460": {
                "variable": {
                    "value": "position_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_469": {
                "variable": {
                    "value": "ret[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "true_position.unsqueeze(-2) - true_position.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_199": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_logits.view(-1, vocab_size).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_201": {
                "variable": {
                    "value": "pos_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(pos_logits.view(-1, vocab_size).contiguous(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "flattened_tgt_pos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_201": {
                "variable": {
                    "value": "pos_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor.forward(input=position_feature)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, v_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_360": {
                "variable": {
                    "value": "gumbel_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predictor.forward(input=position_feature)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, v_size)",
                            "Call"
                        ]
                    ]
                },
                "hard": {
                    "value": "self.use_st_gumbel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_396": {
                "variable": {
                    "value": "self.feat_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_398": {
                "variable": {
                    "value": "self.feat_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * model_dim, model_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "self.gen_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PositionwiseFeedForward(size=2 * model_dim, hidden_size=4 * model_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool1d_443": {
                "variable": {
                    "value": "dec_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_query.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "2 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_46": {
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "2 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_70": {
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_161": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_162": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_173": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "model_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_328": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_423": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_424": {
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_399": {
                "in_features": {
                    "value": "2 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_401": {
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "in_features": {
                    "value": "2 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_408": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_409": {
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/networks/rnn_base.py": {
        "torch": {}
    },
    "dss_vae/networks/sublayers.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_22": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_52": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_per_head * head_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_140": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.block_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiAttBlock(d_model=hidden_size, d_inner_hid=inner_hidden, n_head=n_head, dropout=block_dropout, dim_per_head=dim_per_head) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_166": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_201": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_202": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "key_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_up_prev, key_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "value_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[value_up_prev, value_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "input": {
                    "value": "drop_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_values(value))",
                            "Call"
                        ],
                        [
                            "torch.cat([value_up_prev, value_up], dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/networks/weight_drop.py": {
        "torch": {
            "dropout_41": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/beam_search.py": {
        "torch": {
            "sort_133": {
                "variable": {
                    "value": "(_, reranked_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "beam_scores * (5.0 + 1.0) ** alpha / (5.0 + final_lengths) ** alpha",
                            "BinOp"
                        ],
                        [
                            "beam_scores / final_lengths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_84": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "normed_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "beam_scores * (5.0 + 1.0) ** alpha / (5.0 + beam_mask + final_lengths).unsqueeze(2) ** alpha",
                            "BinOp"
                        ],
                        [
                            "beam_scores.detach().clone()",
                            "Call"
                        ],
                        [
                            "normed_scores.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_85": {
                "variable": {
                    "value": "next_beam_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_scores.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_90": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_seqs.new(batch_size, beam_size).zero_().float()",
                            "Call"
                        ],
                        [
                            "next_scores + beam_scores.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "beam_scores.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(beam_scores, 1, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "final_word_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(final_word_indices, next_word_ids.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/input_funcs.py": {
        "torch": {
            "device_of_230": {
                "obj": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/loss_funcs.py": {
        "torch": {
            "MSELoss_50": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "arc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "tag_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_109": {
                "variable": {
                    "value": "bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_26": {
                "variable": {
                    "value": "exp_epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_diff - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "_rank_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_diff - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "exp_epsilon - target_diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "torch_func.relu(target_diff - diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_156": {
                "ignore_index": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_156": {
                "ignore_index": {
                    "value": "pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "target_diff - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "torch_func.relu(target_diff - diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "target_diff - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_212": {
                "input": {
                    "value": "log_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_logits.contiguous().view(-1, vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "_tgt_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_tgt_var.unsqueeze(1).expand(batch_size, pred_len, -1).contiguous().view(batch_size * pred_len, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/utils/mask_funcs.py": {
        "torch": {
            "matmul_73": {
                "input": {
                    "value": "(1.0 - beam_mask).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "finished_row.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/math_funcs.py": {
        "torch": {
            "kl_div_9": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis1.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "dis2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_36": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_25": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_20": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/model_utils.py": {
        "torch": {
            "Adam_195": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "main_args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.995)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "tracker[Acc]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dir_ret['model_file']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.inference_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer.param_groups[0]['lr'] * main_args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_20": {
                "variable": {
                    "value": "tracker[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tracker[key], val.mean().data.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "model_file + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/nn_funcs.py": {
        "torch": {
            "cat_318": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_328": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_sequence.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_107": {
                "input": {
                    "value": "(inputs + beta * Variable(noise)) / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_99": {
                "input": {
                    "value": "(1.0 - beam_mask).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "finished_row.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_311": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_332": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_318": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(x)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.expand(batch_size, seq_len, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_318": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_318": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(x)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.expand(batch_size, seq_len, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_337": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(x)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.expand(batch_size, seq_len, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_337": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_337": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(x)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.expand(batch_size, seq_len, hidden)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/utils/position_tools.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "embed_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embed_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "positional_matrix(seq_len=max_len, hidden=hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "embed_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embed_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Parameter(embed_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "st_gumbel_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "label_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_float_tensor(val=range(n_class)).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "pos_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "embed_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "positional_matrix(seq_len=max_len, hidden=hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "to_e.size(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_13": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "to_e.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_18": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(to_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_18": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_18": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(to_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_100": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(to_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_100": {
                "input": {
                    "value": "encodings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "positions.unsqueeze(-1) @ channels.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(encodings).unsqueeze(-1), torch.cos(encodings).unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "encodings.contiguous().view(*encodings.size()[:-2], -1)",
                            "Call"
                        ],
                        [
                            "encodings.unsqueeze(0).expand_as(to_e)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dss_vae/utils/schedule_funs.py": {
        "torch": {
            "rand_32": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_sequence.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/utils/tensor_ops.py": {
        "torch": {
            "Tensor_5": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "x_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor(val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "batch_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gather_from.view(*gather_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "gather_indices_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(gather_indices + torch.unsqueeze(range_, 1)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "[new_tensor1, new_tensor2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_40": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "range_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.arange(0, batch_size) * beam_size).long()",
                            "Call"
                        ],
                        [
                            "range_.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/ae.py": {
        "torch": {
            "stack_102": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "completed_hypotheses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "topk_sequence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "meta_data['sequence']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(load_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/base_vae.py": {
        "torch": {
            "stack_179": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_199": {
                "input": {
                    "value": "1 + logv - mean.pow(2) - logv.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/disentangle_vae.py": {
        "torch": {
            "Linear_128": {
                "variable": {
                    "value": "self.syn_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.sem_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_439": {
                "variable": {
                    "value": "ret[decode_init]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[syntax_hidden, semantic_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_564": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_564": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_607": {
                "variable": {
                    "value": "self.semantic_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.src.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "syn_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(syn_var_dim, self.latent_size * 2, True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "syn_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "syn_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "sem_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(sem_var_dim, self.latent_size * 2, True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sem_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sem_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_582": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_592": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_381": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_382": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_393": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_549": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "self.decoder.score_decoding_results(tgt_log_score, tgt_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_248": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=sentence_decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_583": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_584": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_589": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_593": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_600": {
                "in_features": {
                    "value": "dec_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_605": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_394": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/disentangle_vae2.py": {
        "torch": {
            "Linear_128": {
                "variable": {
                    "value": "self.syn_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.sem_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_439": {
                "variable": {
                    "value": "ret[decode_init]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[syntax_hidden, semantic_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_564": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_564": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_607": {
                "variable": {
                    "value": "self.semantic_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.src.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "syn_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(syn_var_dim, self.latent_size * 2, True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "syn_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "syn_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "sem_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(sem_var_dim, self.latent_size * 2, True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sem_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sem_common",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_582": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_592": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_381": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_382": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_393": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_549": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "self.latent_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "self.decoder.score_decoding_results(tgt_log_score, tgt_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_248": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=sentence_decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_583": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_584": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_589": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_593": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_600": {
                "in_features": {
                    "value": "dec_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_605": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_394": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/enhance_syntax_vae.py": {
        "torch": {
            "Linear_126": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.syn_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.sem_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_205": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sem_hid.permute(1, 0, 2).contiguous().view(bs, -1), syn_hid.permute(1, 0, 2).contiguous().view(bs, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "ret[decode_init]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[syn_hidden, sem_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_589": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_589": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_607": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_617": {
                "variable": {
                    "value": "self.semantic_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.src.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_194": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_list",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_406": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_407": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_419": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_608": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_609": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_614": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_420": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/syntax_guide_vae.py": {
        "torch": {
            "Linear_75": {
                "variable": {
                    "value": "self.hidden2mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.hidden2logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.latent2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_260": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "explore['nll_loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_213": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_261": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/syntax_vae.py": {
        "torch": {
            "Linear_129": {
                "variable": {
                    "value": "self.syn_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.syn_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.syn_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "syn_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.sem_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.sem_logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.sem_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sem_var_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.enc_hidden_dim * self.enc_hidden_factor / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_hidden.permute(1, 0, 2).contiguous().view(bs, -1), syntax_hidden.permute(1, 0, 2).contiguous().view(bs, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "ret[decode_init]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[syntax_hidden, semantic_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_566": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_dict['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_566": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_584": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(args.dec_rd)",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_593": {
                "variable": {
                    "value": "self.semantic_nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab.src.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_54": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_193": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_194": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_list",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_383": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_384": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_395": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_585": {
                "p": {
                    "value": "args.dec_rd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_586": {
                "in_features": {
                    "value": "dec_hidden * args.dec_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_591": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_248": {
                "input": {
                    "value": "self.decoder.score_decoding_results(tgt_log_score, tgt_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_250": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=sentence_decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_396": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dss_vae/vae/vanilla_vae.py": {
        "torch": {
            "Linear_81": {
                "variable": {
                    "value": "self.hidden2mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.hidden2logv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.latent2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size * self.hidden_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "src_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.src)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_188": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_156": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "self.decoder.score_decoding_results(tgt_token_scores, tgt_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "self.decoder.score(inputs=tgt_var, encoder_outputs=None, encoder_hidden=decode_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_189": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}