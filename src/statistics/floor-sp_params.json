{
    "floor-sp/datasets/lianjia_affiliation_dataset.py": {
        "torch": {
            "LianjiaAffiliationDataset_12": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.phase": {
                    "value": "phase",
                    "possible_values": []
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LianjiaAffiliationDataset(data_dir='/local-scratch/cjc/floor-sp/floor-sp/data/Lianjia_room', phase='train', mode='room_corner')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/datasets/lianjia_corner_dataset.py": {
        "torch": {
            "LianjiaCornerDataset_11": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.phase": {
                    "value": "phase",
                    "possible_values": []
                },
                "self.augmentation": {
                    "value": "augmentation",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LianjiaCornerDataset(data_dir='/local-scratch/cjc/floor-sp/floor-sp/data/Lianjia_corner', phase='train', augmentation='r')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/datasets/lianjia_room_dataset.py": {
        "torch": {
            "LianjiaRoomDataset_11": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.phase": {
                    "value": "phase",
                    "possible_values": []
                },
                "self.augmentation": {
                    "value": "augmentation",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "LianjiaRoomDataset(data_dir='/local-scratch/cjc/floor-sp/floor-sp/data/Lianjia_room', phase='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/mains/associate_heuristics.py": {
        "torch": {
            "manual_seed_132": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/mains/associate_main.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "LianjiaAffiliationDataset(data_dir='./data/Lianjia_room', phase='train', mode=configs.mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_35": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "reduce": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "configs.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "configs.decay_rate",
                    "possible_values": []
                }
            },
            "StepLR_37": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=configs.lr, weight_decay=configs.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "configs.lr_step",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "LianjiaAffiliationDataset(data_dir='./data/Lianjia_room', phase='test', mode=configs.mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "configs.model_path",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "configs.model_path",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "configs.model_path",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_inputs.unsqueeze(1), mean_normal, room_mask.unsqueeze(1), corner_map.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_317": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "image_inputs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_inputs",
                    "possible_values": [
                        [
                            "batch_data['image']",
                            "Subscript"
                        ],
                        [
                            "room_info['topview_image'][:, :, 0].astype(np.float64) / 255",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(image_inputs)",
                            "Call"
                        ],
                        [
                            "image_inputs.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "mean_normal",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_normal.transpose([2, 0, 1])",
                    "possible_values": []
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "room_mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "room_mask",
                    "possible_values": [
                        [
                            "batch_data['room_mask']",
                            "Subscript"
                        ],
                        [
                            "room_info['pred_room_mask'].astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(room_mask)",
                            "Call"
                        ],
                        [
                            "room_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_319": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "corner_map",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "corner_map",
                    "possible_values": [
                        [
                            "batch_data['corner_map']",
                            "Subscript"
                        ],
                        [
                            "corner_map.cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "get_single_corner_map(corner_pred['corner'], corner_pred['edge_dirs'], configs.im_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(corner_map)",
                            "Call"
                        ],
                        [
                            "corner_map.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_222": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_inputs.unsqueeze(0).unsqueeze(1), mean_normal.unsqueeze(0), room_mask.unsqueeze(0).unsqueeze(1), corner_map.unsqueeze(0).unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_inputs",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/mains/corner_main.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "LianjiaCornerDataset(data_dir='./data/dataset_corner', phase='train', augmentation=configs.augmentation)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_33": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "configs.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "configs.decay_rate",
                    "possible_values": []
                }
            },
            "StepLR_35": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=configs.lr, weight_decay=configs.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "configs.lr_step",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "predict_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "predict_dataset",
                    "possible_values": [
                        [
                            "LianjiaCornerDataset(data_dir='./data/dataset_corner', phase=predict_phase, augmentation='')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "configs.model_path",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "configs.model_path",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_117": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_inputs.unsqueeze(1), mean_normal, room_masks_map.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "manual_seed_182": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "configs.seed",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/models/corner_net.py": {
        "torch": {
            "CornerNet_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_15": {
                    "variable": {
                        "value": "base_modules[0][0]",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "num_input_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Sequential_17": {
                    "variable": {
                        "value": "drn_encoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*base_modules[:-2]",
                        "possible_values": []
                    }
                },
                "self.encoder": {
                    "value": "drn_encoder",
                    "possible_values": [
                        [
                            "nn.Sequential(*base_modules[:-2])",
                            "Call"
                        ],
                        [
                            "nn.Sequential(*base_modules[:-2])",
                            "Call"
                        ]
                    ]
                },
                "Conv2d_27": {
                    "variable": {
                        "value": "self.final_layer",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.encoder_out_dim // 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Sigmoid_28": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.im_size": {
                    "value": "im_size",
                    "possible_values": []
                }
            },
            "CornerEdgeNet_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_49": {
                    "variable": {
                        "value": "base_modules[0][0]",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "num_input_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Sequential_51": {
                    "variable": {
                        "value": "drn_encoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*base_modules[:-2]",
                        "possible_values": []
                    }
                },
                "self.encoder": {
                    "value": "drn_encoder",
                    "possible_values": [
                        [
                            "nn.Sequential(*base_modules[:-2])",
                            "Call"
                        ],
                        [
                            "nn.Sequential(*base_modules[:-2])",
                            "Call"
                        ]
                    ]
                },
                "Conv2d_68": {
                    "variable": {
                        "value": "self.final_layer_edge",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.encoder_out_dim // 16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Conv2d_69": {
                    "variable": {
                        "value": "self.final_layer_coorner",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.encoder_out_dim // 16",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Sigmoid_70": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.im_size": {
                    "value": "im_size",
                    "possible_values": []
                }
            },
            "Tensor_90": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/models/corner_room_module.py": {
        "torch": {
            "CornerRoomAssociate_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.im_size": {
                    "value": "im_size",
                    "possible_values": []
                },
                "self.configs": {
                    "value": "configs",
                    "possible_values": []
                },
                "Conv2d_17": {
                    "variable": {
                        "value": "drn_modules[0][0]",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "configs.input_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Sequential_19": {
                    "variable": {
                        "value": "self.drn_encoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*drn_modules",
                        "possible_values": []
                    }
                },
                "Linear_20": {
                    "variable": {
                        "value": "self.final_linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1000",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1 + num_edge_bins",
                        "possible_values": []
                    }
                },
                "Sigmoid_21": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "CornerCornerAssociate_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.im_size": {
                    "value": "im_size",
                    "possible_values": []
                },
                "self.configs": {
                    "value": "configs",
                    "possible_values": []
                },
                "Conv2d_47": {
                    "variable": {
                        "value": "drn_modules[0][0]",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "configs.input_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "16",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(3, 3)",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Sequential_49": {
                    "variable": {
                        "value": "self.drn_encoder",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*drn_modules",
                        "possible_values": []
                    }
                },
                "Linear_50": {
                    "variable": {
                        "value": "self.final_linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1000",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sigmoid_51": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/models/drn.py": {
        "torch": {
            "BasicBlock_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_41": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), BatchNorm(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.residual": {
                    "value": "residual",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_74": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_76": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "dilation[1]",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "(1",
                                "MethodArgument"
                            ],
                            [
                                "(1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "dilation": {
                        "value": "dilation[1]",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "(1",
                                "MethodArgument"
                            ],
                            [
                                "(1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Conv2d_80": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_82": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), BatchNorm(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DRN_109": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.out_map": {
                    "value": "out_map",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.out_middle": {
                    "value": "out_middle",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.arch": {
                    "value": "arch",
                    "possible_values": [
                        [
                            "'D'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DRN_A_262": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_268": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_270": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "ReLU_271": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_272": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_279": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "28",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_280": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ],
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AvgPool2d_166": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "28",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "*modules",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.layer0",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_303": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "(16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_209": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/models/residual.py": {
        "torch": {
            "ResidualModule_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ResidualBlock_63": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ifgate": {
                    "value": "ifgate",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.indim": {
                    "value": "indim",
                    "possible_values": []
                },
                "self.outdim": {
                    "value": "outdim",
                    "possible_values": []
                },
                "self.resample": {
                    "value": "resample",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sigmoid_87": {
                "variable": {
                    "value": "self.c",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tanh_88": {
                "variable": {
                    "value": "self.g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.resblock",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv('sconv', indim, outdim)",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "indim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ELU_113": {
                "alpha": {
                    "value": "1",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "outdim",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "outdim",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "indim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "in_channels": {
                    "value": "indim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/trainers/associate_trainer.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_inputs.unsqueeze(1), mean_normal, room_mask.unsqueeze(1), corner_map]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "corner_map",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_data['corners_map'], batch_data['edge_map']]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/trainers/corner_trainer.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_inputs.unsqueeze(1), mean_normal, room_masks_map.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "floor-sp/utils/misc.py": {
        "torch": {
            "save_33": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "optimizer.state.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_54": {
                "obj": {
                    "value": "tensor",
                    "possible_values": []
                }
            }
        }
    },
    "mask-rcnn/inference_corner.py": {
        "torch": {
            "load_38": {
                "f": {
                    "value": "saved_model",
                    "possible_values": [
                        [
                            "'./logs/mask_rcnn_lianjia_dataset_0069.pth'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "mask-rcnn/inference_room.py": {
        "torch": {
            "load_59": {
                "f": {
                    "value": "saved_model",
                    "possible_values": [
                        [
                            "'./logs/mask_rcnn_lianjia_dataset_0069.pth'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "mask-rcnn/main.py": {
        "torch": {}
    },
    "mask-rcnn/model/collate.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "possible_values": [
                        [
                            "np.stack([x[0] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "image_metas",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_metas",
                    "possible_values": [
                        [
                            "np.stack([x[1] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_metas)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "rpn_match",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_match",
                    "possible_values": [
                        [
                            "np.stack([x[2] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_match)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "rpn_bbox",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_bbox",
                    "possible_values": [
                        [
                            "np.stack([x[3] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "gt_coords",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_coords",
                    "possible_values": [
                        [
                            "np.stack([x[4] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "possible_values": [
                        [
                            "np.stack([x[5] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "gt_masks",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_masks",
                    "possible_values": [
                        [
                            "np.stack([x[6] for x in new_batch], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt_masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mask-rcnn/model/model.py": {
        "torch": {
            "SamePad2d_102": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "TopDownLayer_134": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_137": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_139": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "FPN_147": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.C1": {
                    "value": "C1",
                    "possible_values": []
                },
                "self.C2": {
                    "value": "C2",
                    "possible_values": []
                },
                "self.C3": {
                    "value": "C3",
                    "possible_values": []
                },
                "self.C4": {
                    "value": "C4",
                    "possible_values": []
                },
                "self.C5": {
                    "value": "C5",
                    "possible_values": []
                },
                "MaxPool2d_156": {
                    "variable": {
                        "value": "self.P6",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Conv2d_157": {
                    "variable": {
                        "value": "self.P5_conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "2048",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sequential_158": {
                    "variable": {
                        "value": "self.P5_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "SamePad2d(kernel_size=3, stride=1)",
                        "possible_values": []
                    }
                },
                "Conv2d_162": {
                    "variable": {
                        "value": "self.P4_conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sequential_163": {
                    "variable": {
                        "value": "self.P4_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "SamePad2d(kernel_size=3, stride=1)",
                        "possible_values": []
                    }
                },
                "Conv2d_167": {
                    "variable": {
                        "value": "self.P3_conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sequential_168": {
                    "variable": {
                        "value": "self.P3_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "SamePad2d(kernel_size=3, stride=1)",
                        "possible_values": []
                    }
                },
                "Conv2d_172": {
                    "variable": {
                        "value": "self.P2_conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sequential_173": {
                    "variable": {
                        "value": "self.P2_conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "SamePad2d(kernel_size=3, stride=1)",
                        "possible_values": []
                    }
                }
            },
            "Bottleneck_208": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_213": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "BatchNorm2d_214": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_216": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_217": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_218": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_219": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "ReLU_220": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride), nn.BatchNorm2d(planes * block.expansion, eps=0.001, momentum=0.01))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_248": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.block": {
                    "value": "Bottleneck",
                    "possible_values": []
                },
                "self.stage5": {
                    "value": "stage5",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_258": {
                    "variable": {
                        "value": "self.C1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(input_channel, 64, kernel_size=7, stride=2, padding=3)",
                        "possible_values": []
                    }
                }
            },
            "RPN_814": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.anchors_per_location": {
                    "value": "anchors_per_location",
                    "possible_values": []
                },
                "self.anchor_stride": {
                    "value": "anchor_stride",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "Conv2d_835": {
                    "variable": {
                        "value": "self.conv_shared",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.depth",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "self.anchor_stride",
                        "possible_values": []
                    }
                },
                "ReLU_836": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Conv2d_837": {
                    "variable": {
                        "value": "self.conv_class",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "2 * anchors_per_location",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Softmax_838": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Conv2d_839": {
                    "variable": {
                        "value": "self.conv_bbox",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "4 * anchors_per_location",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Classifier_872": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.pool_size": {
                    "value": "pool_size",
                    "possible_values": []
                },
                "self.image_shape": {
                    "value": "image_shape",
                    "possible_values": [
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "len(vocabulary)",
                            "Call"
                        ]
                    ]
                },
                "Conv2d_879": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.depth",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "self.pool_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_880": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_881": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_882": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "ReLU_883": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_885": {
                    "variable": {
                        "value": "self.linear_class",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "len(vocabulary)",
                                "Call"
                            ]
                        ]
                    }
                },
                "Softmax_886": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_888": {
                    "variable": {
                        "value": "self.linear_bbox",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes * 4",
                        "possible_values": []
                    }
                }
            },
            "Orientation_909": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.pool_size": {
                    "value": "pool_size",
                    "possible_values": []
                },
                "self.image_shape": {
                    "value": "image_shape",
                    "possible_values": [
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ]
                    ]
                },
                "Conv2d_915": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.depth",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "self.pool_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_916": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_917": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_918": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "ReLU_919": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_920": {
                    "variable": {
                        "value": "self.linear_class",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "n_bins",
                        "possible_values": [
                            [
                                "18",
                                "MethodArgument"
                            ],
                            [
                                "18",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Encoder_936": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.pool_size": {
                    "value": "pool_size",
                    "possible_values": []
                },
                "self.image_shape": {
                    "value": "image_shape",
                    "possible_values": [
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ]
                    ]
                },
                "Conv2d_942": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.depth",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "self.pool_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_943": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "Conv2d_944": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_945": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    },
                    "momentum": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "ReLU_946": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_947": {
                    "variable": {
                        "value": "self.linear_class",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "512",
                        "possible_values": []
                    }
                }
            },
            "Relation_963": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_966": {
                    "variable": {
                        "value": "self.fc_ce",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_967": {
                    "variable": {
                        "value": "self.fc_ce2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_968": {
                    "variable": {
                        "value": "self.fc_ce3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Mask_981": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.pool_size": {
                    "value": "pool_size",
                    "possible_values": []
                },
                "self.image_shape": {
                    "value": "image_shape",
                    "possible_values": [
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "meta[:, 1:4]",
                            "Subscript"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "len(vocabulary)",
                            "Call"
                        ]
                    ]
                },
                "Conv2d_989": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.depth",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_990": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "256",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                },
                "Conv2d_991": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_992": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "256",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                },
                "Conv2d_993": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_994": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "256",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                },
                "Conv2d_995": {
                    "variable": {
                        "value": "self.conv4",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_996": {
                    "variable": {
                        "value": "self.bn4",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "256",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_997": {
                    "variable": {
                        "value": "self.deconv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Conv2d_998": {
                    "variable": {
                        "value": "self.conv5",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "256",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "len(vocabulary)",
                                "Call"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Sigmoid_999": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ReLU_1000": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Dataset_1415": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaskRCNN_1510": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.model_dir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "self.input_channel": {
                    "value": "input_channel",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "unique_bool",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_element, unique_bool)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "aux",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor1, tensor2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_327": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, :, 0].clamp(float(window[0]), float(window[2])), boxes[:, :, 1].clamp(float(window[1]), float(window[3])), boxes[:, :, 2].clamp(float(window[0]), float(window[2])), boxes[:, :, 3].clamp(float(window[1]), float(window[3]))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_375": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "deltas * std_dev",
                            "BinOp"
                        ],
                        [
                            "torch.gather(deltas, 1, order.data)",
                            "Call"
                        ],
                        [
                            "Variable(utils.box_refinement(positive_rois.data, roi_gt_boxes.data), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "deltas / std_dev",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, 4)).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(deltas, (0, 0, 0, N + P), 'constant', 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "order.data",
                    "possible_values": []
                }
            },
            "gather_376": {
                "variable": {
                    "value": "anchors",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors.unsqueeze(0).repeat(order.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(anchors, 1, order.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "order.data",
                    "possible_values": []
                }
            },
            "stack_397": {
                "variable": {
                    "value": "final_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(final_boxes, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "pooled",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pooled, dim=0)",
                            "Call"
                        ],
                        [
                            "pooled[box_to_level]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "box_to_level",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_to_level",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "N * box_to_level[:, 0] + box_to_level[:, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sort_481": {
                "variable": {
                    "value": "(_, box_to_level)",
                    "possible_values": []
                },
                "input": {
                    "value": "box_to_level",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "N * box_to_level[:, 0] + box_to_level[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_693": {
                "variable": {
                    "value": "(_, class_ids)",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.sigmoid(self.fc_ce3(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_697": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "start": {
                    "value": "class_ids.size()[0]",
                    "possible_values": []
                }
            },
            "round_721": {
                "variable": {
                    "value": "refined_rois",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "possible_values": [
                        [
                            "apply_box_deltas(rois.unsqueeze(0), (deltas_specific * std_dev).unsqueeze(0)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "refined_rois * scale",
                            "BinOp"
                        ],
                        [
                            "clip_to_window(window, refined_rois)",
                            "Call"
                        ],
                        [
                            "torch.round(refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_767": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(refined_rois[keep.data], class_ids[keep.data].unsqueeze(1).float(), class_scores[keep.data].unsqueeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_798": {
                "variable": {
                    "value": "corners_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "ids == 2",
                    "possible_values": []
                }
            },
            "squeeze_798": {
                "variable": {
                    "value": "corners_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_799": {
                "variable": {
                    "value": "edges_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "ids == 1",
                    "possible_values": []
                }
            },
            "squeeze_799": {
                "variable": {
                    "value": "edges_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_1045": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match != 0",
                    "possible_values": []
                }
            },
            "cross_entropy_1052": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_class_logits",
                    "possible_values": [
                        [
                            "rpn_class_logits.view(-1, *rpn_class_logits.shape[2:])",
                            "Call"
                        ],
                        [
                            "rpn_class_logits[indices.data[:, 0], :]",
                            "Subscript"
                        ],
                        [
                            "self.conv_class(x)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.contiguous()",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.view(x.size()[0], -1, 2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "anchor_class",
                    "possible_values": [
                        [
                            "(rpn_match == 1).long()",
                            "Call"
                        ],
                        [
                            "anchor_class[indices.data[:, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_1083": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0)",
                            "Call"
                        ],
                        [
                            "target_masks[indices[:, 0].data, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_1084": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_masks[indices[:, 0].data, indices[:, 1].data, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_1087": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_masks[indices[:, 0].data, indices[:, 1].data, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0)",
                            "Call"
                        ],
                        [
                            "target_masks[indices[:, 0].data, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_1097": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "target_edges_dir >= 0",
                    "possible_values": []
                }
            },
            "squeeze_1097": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_1134": {
                "variable": {
                    "value": "ind",
                    "possible_values": []
                },
                "input": {
                    "value": "target_class_ids >= 0",
                    "possible_values": []
                }
            },
            "squeeze_1134": {
                "variable": {
                    "value": "ind",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_1159": {
                "variable": {
                    "value": "positive_roi_ix",
                    "possible_values": []
                },
                "input": {
                    "value": "target_class_ids > 0",
                    "possible_values": []
                }
            },
            "nonzero_1196": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(target_masks.view(target_masks.shape[0], -1), dim=-1) > 0",
                    "possible_values": []
                }
            },
            "upsample_142": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "F.upsample(y, scale_factor=2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_320": {
                "input": {
                    "value": "deltas[:, :, 2]",
                    "possible_values": []
                }
            },
            "exp_321": {
                "input": {
                    "value": "deltas[:, :, 3]",
                    "possible_values": []
                }
            },
            "nonzero_458": {
                "variable": {
                    "value": "ix",
                    "possible_values": []
                },
                "input": {
                    "value": "ix",
                    "possible_values": [
                        [
                            "roi_level == level",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(ix)",
                            "Call"
                        ],
                        [
                            "ix.detach()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "ix + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randperm_568": {
                "variable": {
                    "value": "rand_idx",
                    "possible_values": []
                },
                "n": {
                    "value": "positive_indices.size()[0]",
                    "possible_values": []
                }
            },
            "round_616": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "Variable(CropAndResizeFunction(config.MASK_SHAPE[0], config.MASK_SHAPE[1], 0)(roi_masks.unsqueeze(1), boxes, box_ids).data, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks)",
                            "Call"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, config.MASK_SHAPE[0], config.MASK_SHAPE[1])).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(masks, (0, 0, 0, 0, 0, N + P), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "mrcnn_mask[np.arange(N), :, :, class_ids]",
                            "Subscript"
                        ],
                        [
                            "np.delete(masks, exclude_ix, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_628": {
                "variable": {
                    "value": "rand_idx",
                    "possible_values": []
                },
                "n": {
                    "value": "negative_indices.size()[0]",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "roi_gt_class_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[roi_gt_class_ids, zeros]",
                    "possible_values": []
                }
            },
            "pad_648": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "input": {
                    "value": "rois",
                    "possible_values": [
                        [
                            "torch.cat((positive_rois, negative_rois), dim=0) if negative_count > 0 else positive_rois",
                            "IfExp"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, 4)).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(rois, (0, 0, 0, P), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "rois.squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack(rois, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, P)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "pad_649": {
                "variable": {
                    "value": "roi_gt_class_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_gt_class_ids",
                    "possible_values": [
                        [
                            "gt_class_ids[roi_gt_box_assignment.data]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(config.TRAIN_ROIS_PER_IMAGE).int().cuda() - 1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([roi_gt_class_ids, zeros])",
                            "Call"
                        ],
                        [
                            "F.pad(roi_gt_class_ids, (0, P), 'constant', -1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, P)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "pad_650": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "deltas * std_dev",
                            "BinOp"
                        ],
                        [
                            "torch.gather(deltas, 1, order.data)",
                            "Call"
                        ],
                        [
                            "Variable(utils.box_refinement(positive_rois.data, roi_gt_boxes.data), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "deltas / std_dev",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, 4)).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(deltas, (0, 0, 0, N + P), 'constant', 0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, N + P)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "pad_651": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "Variable(CropAndResizeFunction(config.MASK_SHAPE[0], config.MASK_SHAPE[1], 0)(roi_masks.unsqueeze(1), boxes, box_ids).data, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks)",
                            "Call"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, config.MASK_SHAPE[0], config.MASK_SHAPE[1])).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(masks, (0, 0, 0, 0, 0, N + P), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "mrcnn_mask[np.arange(N), :, :, class_ids]",
                            "Subscript"
                        ],
                        [
                            "np.delete(masks, exclude_ix, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, 0, N + P)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "zeros_653": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.TRAIN_ROIS_PER_IMAGE, 4)",
                    "possible_values": []
                }
            },
            "zeros_655": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.TRAIN_ROIS_PER_IMAGE, 4)",
                    "possible_values": []
                }
            },
            "zeros_656": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.TRAIN_ROIS_PER_IMAGE, config.MASK_SHAPE[0], config.MASK_SHAPE[1])",
                    "possible_values": []
                }
            },
            "relu_975": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_ce(torch.cat([cx, ex], dim=-1))",
                    "possible_values": []
                }
            },
            "relu_976": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_ce2(x)",
                    "possible_values": []
                }
            },
            "sigmoid_977": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_ce3(x)",
                    "possible_values": []
                }
            },
            "nonzero_1071": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "rm == 1",
                    "possible_values": []
                }
            },
            "cross_entropy_1101": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "edges_dir",
                    "possible_values": [
                        [
                            "edges_dir.view(-1, n_bins)",
                            "Call"
                        ],
                        [
                            "edges_dir[keep.data, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_edges_dir.long()",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_1115": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "relations_prob",
                    "possible_values": [
                        [
                            "relations_prob.squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "relations_target",
                    "possible_values": []
                }
            },
            "cross_entropy_1140": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "possible_values": [
                        [
                            "pred_class_logits.view(-1, pred_class_logits.shape[-1])",
                            "Call"
                        ],
                        [
                            "pred_class_logits[ind.data, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_class_ids.long()",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_1165": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(positive_roi_ix, positive_roi_class_ids)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_1172": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bbox",
                    "possible_values": [
                        [
                            "pred_bbox[indices[:, 0].data, indices[:, 1].data, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_bbox",
                    "possible_values": [
                        [
                            "target_bbox.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "target_bbox[indices[:, 0].data, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_1206": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(positive_ix, positive_class_ids)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_1220": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_masks[indices[:, 0].data, indices[:, 1].data, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0)",
                            "Call"
                        ],
                        [
                            "target_masks[indices[:, 0].data, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1492": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images.transpose(2, 0, 1)",
                    "possible_values": []
                }
            },
            "from_numpy_1493": {
                "variable": {
                    "value": "image_metas",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_metas",
                    "possible_values": [
                        [
                            "torch.from_numpy(image_metas)",
                            "Call"
                        ],
                        [
                            "input[1]",
                            "Subscript"
                        ],
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "image_metas.numpy()",
                            "Call"
                        ],
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "image_metas.numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(image_metas)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1494": {
                "variable": {
                    "value": "rpn_match",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_match",
                    "possible_values": [
                        [
                            "rpn_match.view(-1)",
                            "Call"
                        ],
                        [
                            "rpn_match.squeeze(2)",
                            "Call"
                        ],
                        [
                            "np.zeros([anchors.shape[0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "rpn_match[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rpn_match)",
                            "Call"
                        ],
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "Variable(rpn_match)",
                            "Call"
                        ],
                        [
                            "rpn_match.cuda()",
                            "Call"
                        ],
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "Variable(rpn_match, volatile=True)",
                            "Call"
                        ],
                        [
                            "rpn_match.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1495": {
                "variable": {
                    "value": "rpn_bbox",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_bbox",
                    "possible_values": [
                        [
                            "np.zeros((config.RPN_TRAIN_ANCHORS_PER_IMAGE, 4))",
                            "Call"
                        ],
                        [
                            "self.conv_bbox(x)",
                            "Call"
                        ],
                        [
                            "rpn_bbox.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rpn_bbox.contiguous()",
                            "Call"
                        ],
                        [
                            "rpn_bbox.view(x.size()[0], -1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_bbox).float()",
                            "Call"
                        ],
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "Variable(rpn_bbox)",
                            "Call"
                        ],
                        [
                            "rpn_bbox.cuda()",
                            "Call"
                        ],
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "Variable(rpn_bbox, volatile=True)",
                            "Call"
                        ],
                        [
                            "rpn_bbox.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1496": {
                "variable": {
                    "value": "gt_class_ids",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_class_ids",
                    "possible_values": [
                        [
                            "gt_class_ids[non_crowd_ix]",
                            "Subscript"
                        ],
                        [
                            "gt_class_ids[ids]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_class_ids)",
                            "Call"
                        ],
                        [
                            "input[2]",
                            "Subscript"
                        ],
                        [
                            "inputs[4]",
                            "Subscript"
                        ],
                        [
                            "Variable(gt_class_ids)",
                            "Call"
                        ],
                        [
                            "gt_class_ids.cuda()",
                            "Call"
                        ],
                        [
                            "inputs[4]",
                            "Subscript"
                        ],
                        [
                            "Variable(gt_class_ids, volatile=True)",
                            "Call"
                        ],
                        [
                            "gt_class_ids.cuda()",
                            "Call"
                        ],
                        [
                            "data[4].squeeze(0).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1497": {
                "variable": {
                    "value": "gt_boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "possible_values": [
                        [
                            "gt_boxes[non_crowd_ix]",
                            "Subscript"
                        ],
                        [
                            "gt_boxes[ids]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_boxes).float()",
                            "Call"
                        ],
                        [
                            "input[3]",
                            "Subscript"
                        ],
                        [
                            "gt_boxes / scale",
                            "BinOp"
                        ],
                        [
                            "inputs[5]",
                            "Subscript"
                        ],
                        [
                            "Variable(gt_boxes)",
                            "Call"
                        ],
                        [
                            "gt_boxes.cuda()",
                            "Call"
                        ],
                        [
                            "inputs[5]",
                            "Subscript"
                        ],
                        [
                            "Variable(gt_boxes, volatile=True)",
                            "Call"
                        ],
                        [
                            "gt_boxes.cuda()",
                            "Call"
                        ],
                        [
                            "data[7].squeeze(0).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1498": {
                "variable": {
                    "value": "gt_masks",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_masks.astype(int).transpose(2, 0, 1)",
                    "possible_values": []
                }
            },
            "from_numpy_1729": {
                "variable": {
                    "value": "molded_images",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "molded_images.transpose(0, 3, 1, 2)",
                    "possible_values": []
                }
            },
            "DataLoader_1943": {
                "variable": {
                    "value": "train_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "Dataset(train_dataset, self.config, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TRAIN_BATCH_SIZE",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PadCollate()",
                    "possible_values": []
                }
            },
            "DataLoader_1946": {
                "variable": {
                    "value": "val_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "possible_values": [
                        [
                            "Dataset(val_dataset, self.config, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Adam_1959": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': trainables_wo_bn, 'weight_decay': self.config.WEIGHT_DECAY}, {'params': trainables_only_bn}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "DataLoader_2251": {
                "variable": {
                    "value": "val_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "possible_values": [
                        [
                            "Dataset(test_dataset, self.config, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "log_96": {
                "input": {
                    "value": "torch.FloatTensor([2.0])",
                    "possible_values": []
                }
            },
            "log_99": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.C1(x)",
                            "Call"
                        ],
                        [
                            "self.C2(x)",
                            "Call"
                        ],
                        [
                            "self.C3(x)",
                            "Call"
                        ],
                        [
                            "self.C4(x)",
                            "Call"
                        ],
                        [
                            "self.C5(x)",
                            "Call"
                        ],
                        [
                            "self.C1(x)",
                            "Call"
                        ],
                        [
                            "self.C2(x)",
                            "Call"
                        ],
                        [
                            "self.C3(x)",
                            "Call"
                        ],
                        [
                            "self.C4(x)",
                            "Call"
                        ],
                        [
                            "self.C5(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv_shared(self.padding(x)))",
                            "Call"
                        ],
                        [
                            "pyramid_roi_align([rois] + x, self.pool_size, self.image_shape)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "pyramid_roi_align([rois] + x, self.pool_size, self.image_shape)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "pyramid_roi_align([rois] + x, self.pool_size, self.image_shape)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.linear_class(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc_ce(torch.cat([cx, ex], dim=-1)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc_ce2(x))",
                            "Call"
                        ],
                        [
                            "pyramid_roi_align([rois] + x, self.pool_size, self.image_shape)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.padding(x))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.padding(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(self.padding(x))",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(self.padding(x))",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_124": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "pad": {
                    "value": "(pad_left, pad_right, pad_top, pad_bottom)",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride)",
                    "possible_values": []
                }
            },
            "Sequential_299": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "from_numpy_363": {
                "ndarray": {
                    "value": "np.reshape(config.RPN_BBOX_STD_DEV, [1, 4])",
                    "possible_values": []
                }
            },
            "from_numpy_400": {
                "ndarray": {
                    "value": "np.array([height, width, height, width])",
                    "possible_values": []
                }
            },
            "max_506": {
                "input": {
                    "value": "b1_y1",
                    "possible_values": []
                }
            },
            "max_507": {
                "input": {
                    "value": "b1_x1",
                    "possible_values": []
                }
            },
            "min_508": {
                "input": {
                    "value": "b1_y2",
                    "possible_values": []
                }
            },
            "min_509": {
                "input": {
                    "value": "b1_x2",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "y1.size()[0]",
                    "possible_values": []
                }
            },
            "max_513": {
                "input": {
                    "value": "y2 - y1",
                    "possible_values": []
                }
            },
            "max_556": {
                "input": {
                    "value": "overlaps",
                    "possible_values": [
                        [
                            "iou.view(boxes2_repeat, boxes1_repeat)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps(proposals, gt_boxes)",
                            "Call"
                        ],
                        [
                            "utils.compute_overlaps(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_563": {
                "input": {
                    "value": "positive_roi_bool",
                    "possible_values": [
                        [
                            "roi_iou_max >= 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_605": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_705": {
                "ndarray": {
                    "value": "np.reshape(config.RPN_BBOX_STD_DEV, [1, 4])",
                    "possible_values": []
                }
            },
            "from_numpy_712": {
                "ndarray": {
                    "value": "np.array([height, width, height, width])",
                    "possible_values": []
                }
            },
            "nonzero_732": {
                "input": {
                    "value": "keep_bool",
                    "possible_values": [
                        [
                            "class_ids > 0",
                            "Compare"
                        ],
                        [
                            "keep_bool & (class_scores >= config.DETECTION_MIN_CONFIDENCE)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_1674": {
                "variable": {
                    "value": "pretrained_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "upsample_188": {
                "input": {
                    "value": "p5_out",
                    "possible_values": [
                        [
                            "self.P5_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.P5_conv2(p5_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "upsample_189": {
                "input": {
                    "value": "p4_out",
                    "possible_values": [
                        [
                            "self.P4_conv1(c4_out) + F.upsample(p5_out, scale_factor=2)",
                            "BinOp"
                        ],
                        [
                            "self.P4_conv2(p4_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "upsample_190": {
                "input": {
                    "value": "p3_out",
                    "possible_values": [
                        [
                            "self.P3_conv1(c3_out) + F.upsample(p4_out, scale_factor=2)",
                            "BinOp"
                        ],
                        [
                            "self.P3_conv2(p3_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "input_channel",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_263": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "nonzero_565": {
                "input": {
                    "value": "positive_roi_bool",
                    "possible_values": [
                        [
                            "roi_iou_max >= 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_578": {
                "input": {
                    "value": "positive_overlaps",
                    "possible_values": [
                        [
                            "overlaps[positive_indices.data, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_584": {
                "ndarray": {
                    "value": "config.BBOX_STD_DEV",
                    "possible_values": []
                }
            },
            "nonzero_624": {
                "input": {
                    "value": "negative_roi_bool",
                    "possible_values": [
                        [
                            "roi_iou_max < 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_625": {
                "input": {
                    "value": "negative_roi_bool",
                    "possible_values": [
                        [
                            "roi_iou_max < 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_641": {
                "tensors": {
                    "value": "(positive_rois, negative_rois)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_654": {
                "*size": {
                    "value": "config.TRAIN_ROIS_PER_IMAGE",
                    "possible_values": []
                }
            },
            "nonzero_741": {
                "input": {
                    "value": "pre_nms_class_ids == class_id",
                    "possible_values": []
                }
            },
            "sum_1196": {
                "input": {
                    "value": "target_masks.view(target_masks.shape[0], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_1201": {
                "input": {
                    "value": "target_class_ids > 0",
                    "possible_values": []
                }
            },
            "from_numpy_1552": {
                "ndarray": {
                    "value": "utils.generate_pyramid_anchors(config.RPN_ANCHOR_SCALES, config.RPN_ANCHOR_RATIOS, config.BACKBONE_SHAPES, config.BACKBONE_STRIDES, config.RPN_ANCHOR_STRIDE)",
                    "possible_values": []
                }
            },
            "cat_1802": {
                "tensors": {
                    "value": "list(o)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_1872": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois",
                    "possible_values": [
                        [
                            "torch.cat((positive_rois, negative_rois), dim=0) if negative_count > 0 else positive_rois",
                            "IfExp"
                        ],
                        [
                            "torch.zeros((config.TRAIN_ROIS_PER_IMAGE, 4)).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(rois, (0, 0, 0, P), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "rois.squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack(rois, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_1873": {
                "variable": {
                    "value": "target_class_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_class_ids",
                    "possible_values": [
                        [
                            "target_class_ids.view(-1)",
                            "Call"
                        ],
                        [
                            "target_class_ids[ind.data]",
                            "Subscript"
                        ],
                        [
                            "target_class_ids.view(-1)",
                            "Call"
                        ],
                        [
                            "target_class_ids.view(-1)",
                            "Call"
                        ],
                        [
                            "target_class_ids[keep.data[:, 0]]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(target_class_ids, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_1874": {
                "variable": {
                    "value": "target_deltas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_deltas",
                    "possible_values": [
                        [
                            "torch.stack(target_deltas, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_1875": {
                "variable": {
                    "value": "target_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mask",
                    "possible_values": [
                        [
                            "torch.stack(target_mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_1988": {
                "obj": {
                    "value": "self.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path.format(epoch)",
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_290": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "cat_392": {
                "tensors": {
                    "value": "(bx, sc.unsqueeze(-1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "pad_396": {
                "input": {
                    "value": "bx",
                    "possible_values": [
                        [
                            "bx[keep, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, proposal_count - bx.shape[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sqrt_448": {
                "input": {
                    "value": "image_area",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor([float(image_shape[0] * image_shape[1])]), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "image_area.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_749": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_757": {
                "tensors": {
                    "value": "(nms_keep, class_keep)",
                    "possible_values": []
                }
            },
            "cat_975": {
                "tensors": {
                    "value": "[cx, ex]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_1828": {
                "ndarray": {
                    "value": "np.array([h, w, h, w])",
                    "possible_values": []
                }
            },
            "arange_606": {
                "start": {
                    "value": "roi_masks.size()[0]",
                    "possible_values": []
                }
            },
            "zeros_642": {
                "*size": {
                    "value": "negative_count",
                    "possible_values": [
                        [
                            "int(r * positive_count - positive_count)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "negative_indices.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_1681": {
                "variable": {
                    "value": "mean_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_1683": {
                "variable": {
                    "value": "new_first_layer_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, mean_weight]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_1853": {
                "ndarray": {
                    "value": "np.array([h, w, h, w])",
                    "possible_values": []
                }
            },
            "cat_1694": {
                "variable": {
                    "value": "left_pad_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[:cof].clone() for _ in range(extra_num)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_1695": {
                "variable": {
                    "value": "right_pad_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[2 * cof:].clone() for _ in range(extra_num)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_1696": {
                "variable": {
                    "value": "new_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_pad_weights, v, right_pad_weights]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "mask-rcnn/model/nms/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mask-rcnn/model/nms/pth_nms.py": {
        "torch": {}
    },
    "mask-rcnn/model/roialign/roi_align/build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mask-rcnn/model/roialign/roi_align/crop_and_resize.py": {
        "torch": {
            "CropAndResizeFunction_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.crop_height": {
                    "value": "crop_height",
                    "possible_values": []
                },
                "self.crop_width": {
                    "value": "crop_width",
                    "possible_values": []
                },
                "self.extrapolation_value": {
                    "value": "extrapolation_value",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CropAndResize_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.crop_height": {
                    "value": "crop_height",
                    "possible_values": []
                },
                "self.crop_width": {
                    "value": "crop_width",
                    "possible_values": []
                },
                "self.extrapolation_value": {
                    "value": "extrapolation_value",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "crops",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "variable": {
                    "value": "grad_image",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_outputs",
                    "possible_values": [
                        [
                            "grad_outputs.contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mask-rcnn/model/roialign/roi_align/roi_align.py": {
        "torch": {
            "RoIAlign_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.crop_height": {
                    "value": "crop_height",
                    "possible_values": []
                },
                "self.crop_width": {
                    "value": "crop_width",
                    "possible_values": []
                },
                "self.extrapolation_value": {
                    "value": "extrapolation_value",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transform_fpcoor": {
                    "value": "transform_fpcoor",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_26": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": [
                        [
                            "torch.cat((ny0, nx0, ny0 + nh, nx0 + nw), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y1, x1, y2, x2), 1)",
                            "Call"
                        ],
                        [
                            "boxes.detach().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ny0, nx0, ny0 + nh, nx0 + nw)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, x1, y2, x2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mask-rcnn/model/utils.py": {
        "torch": {
            "log_114": {
                "variable": {
                    "value": "dh",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_height / height",
                    "possible_values": []
                }
            },
            "log_115": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_width / width",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy, dx, dh, dw]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}