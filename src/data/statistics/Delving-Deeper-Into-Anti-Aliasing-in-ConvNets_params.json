{
    "datasets/collate_batch.py": {
        "torch": {
            "stack_6": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_14": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[0] for x in batch]",
                            "ListComp"
                        ],
                        [
                            "list(itertools.chain(*imgs))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_7": {
                "data": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/vid.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "self.cls_to_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/cls_to_id.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/train.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/val.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_24": {
                "variable": {
                    "value": "self.vid_cls_to_imagenet_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/vid_cls_to_imagenet_id.da')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/vid_robust.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "self.cls_to_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/cls_to_id.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(data_root, 'py_annot/imagenet/val_robust_20.da')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demo_shift.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c + offset[k] - half_s:h_c + offset[k] + half_s, w_c - half_s:w_c + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c - half_s:h_c + half_s, w_c + offset[k] - half_s:w_c + offset[k] + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_vid.py": {
        "torch": {
            "device_count_218": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_312": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_583": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred == pred[:, 0:1]).int()",
                            "Call"
                        ],
                        [
                            "torch.sum(similarity, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_261": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_400": {
                "variable": {
                    "value": "valid_class",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.valid_class_pth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_201": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_294": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_299": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_345": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VidDataset(args.data, False, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]), args.val_vid_imagenet, args.val_vid_soft)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VIDBatchCollator()",
                            "Call"
                        ],
                        [
                            "VIDRobustBatchCollator()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_412": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequence(target, batch_first=True, padding_value=-1)",
                            "Call"
                        ],
                        [
                            "target.cuda(args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(args.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_557": {
                "variable": {
                    "value": "correct_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.sum(pred == target, dim=1) >= 1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_584": {
                "input": {
                    "value": "(similarity == robust_num).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_287": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_301": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_306": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_309": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_356": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VidRobustDataset(args.data, False, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]), args.robust_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VIDBatchCollator()",
                            "Call"
                        ],
                        [
                            "VIDRobustBatchCollator()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_372": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_376": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_378": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_548": {
                "input": {
                    "value": "pred == target",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_574": {
                "input": {
                    "value": "correct_or",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agree_target_pred0 + agree_target_pred1 > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_count_209": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_302": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_304": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_394": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "VidDataset(args.data, True, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "VidDataset(args.data, True, transforms.Compose([transforms.RandomResizedCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "stack_836": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output.argmax(dim=1, keepdim=False) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_837": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds == preds[0:1, :]).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_251": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_390": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "VidDataset(args.data, True, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "VidDataset(args.data, True, transforms.Compose([transforms.RandomResizedCrop(s_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_402": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_764": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(out_dir, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_284": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_289": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_312": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_412": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VidDataset(args.data, False, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_717": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_766": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(out_dir, 'checkpoint_%03d.pth.tar' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_805": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_838": {
                "input": {
                    "value": "(similarity == robust_num).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_277": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_291": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_296": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_299": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_434": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_438": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_718": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_831": {
                "input": {
                    "value": "correct_or",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agree_target_pred0 + agree_target_pred1 > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "norm_535": {
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models_lpf/__init__.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_98": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_57": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_111": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models_lpf/layers/pasa.py": {
        "torch": {
            "Tensor_58": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "group * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_84": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pad(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n, c, self.kernel_size * self.kernel_size, h * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_106": {
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models_lpf/resnet.py": {
        "torch": {
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "planes[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample(filt_size=filter_size, stride=stride, channels=planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample(filt_size=filter_size, stride=stride, channels=planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.MaxPool2d(kernel_size=2, stride=1), Downsample(filt_size=filter_size, stride=2, channels=planes[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Downsample(filt_size=filter_size, stride=2, channels=planes[0]), nn.MaxPool2d(kernel_size=2, stride=1), Downsample(filt_size=filter_size, stride=2, channels=planes[0])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_170": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models_lpf/resnet_ori.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models_lpf/resnet_pasa_group_softmax.py": {
        "torch": {
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "planes[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample_PASA_group_softmax(kernel_size=filter_size, stride=stride, in_channels=planes, group=pasa_group)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Downsample_PASA_group_softmax(kernel_size=filter_size, stride=stride, in_channels=planes, group=pasa_group)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.MaxPool2d(kernel_size=2, stride=1), Downsample_PASA_group_softmax(kernel_size=filter_size, stride=2, in_channels=planes[0], group=pasa_group)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Downsample_PASA_group_softmax(kernel_size=filter_size, stride=2, in_channels=planes[0], group=pasa_group), nn.MaxPool2d(kernel_size=2, stride=1), Downsample_PASA_group_softmax(kernel_size=filter_size, stride=2, in_channels=planes[0], group=pasa_group)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_170": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/create_vid_subset.py": {
        "torch": {
            "load_4": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/xueyan/antialias-cnn/data/ILSVRC2015/py_annot/imagenet/train.da",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "out_subset[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/xueyan/antialias-cnn/data/ILSVRC2015/py_annot/imagenet/train_var + str(var_num[i]) + .da",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval_js.py": {
        "torch": {
            "device_count_121": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_232": {
                "variable": {
                    "value": "arg_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_156": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_208": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_180": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_286": {
                "input": {
                    "value": "agree.type(torch.FloatTensor).to(output0.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_182": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_238": {
                "input": {
                    "value": "x * torch.log2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c + offset[k] - half_s:h_c + offset[k] + half_s, w_c - half_s:w_c + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c - half_s:h_c + half_s, w_c + offset[k] - half_s:w_c + offset[k] + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_271": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_238": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_240": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/get_vid_train_lst.py": {
        "torch": {}
    },
    "scripts/misc.py": {
        "torch": {
            "save_128": {
                "obj": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "/home/xueyan/antialias-cnn/data/ILSVRC2015/py_annot/imagenet/val_robust_20.da",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/save_prob.py": {
        "torch": {
            "device_count_119": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_154": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_208": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_180": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_274": {
                "input": {
                    "value": "agree.type(torch.FloatTensor).to(output0.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_182": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_232": {
                "input": {
                    "value": "x * torch.log2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_dir, 'pred2', str(i) + '_' + str(torch.argmax(output, dim=1)[0].item()) + '_' + str(target[0].item()) + '.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_255": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_232": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_234": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_260": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/save_prob_shift.py": {
        "torch": {
            "device_count_123": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_212": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_106": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_184": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_289": {
                "input": {
                    "value": "agree.type(torch.FloatTensor).to(output0.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_172": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_186": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_191": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_194": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_236": {
                "input": {
                    "value": "x * torch.log2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c + offset[k] - half_s:h_c + offset[k] + half_s, w_c - half_s:w_c + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, input_[:, :, h_c - half_s:h_c + half_s, w_c + offset[k] - half_s:w_c + offset[k] + half_s])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_dir, folder_name, str(i) + '_' + str(torch.argmax(output, dim=1)[0].item()) + '_' + str(target[0].item()) + '.da')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_269": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_236": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_238": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_275": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/visual_shift_top_var.py": {
        "torch": {
            "device_count_126": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CusImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_242": {
                "variable": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_243": {
                "variable": {
                    "value": "arg_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_213": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_180": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_185": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_398": {
                "input": {
                    "value": "agree.type(torch.FloatTensor).to(output0.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_173": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_187": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_249": {
                "input": {
                    "value": "x * torch.log2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_349": {
                "variable": {
                    "value": "(output_sort, output_argsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(model(input))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, shift_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, shift_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_249": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Softmax_346": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_251": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/visualize_shift_all.py": {
        "torch": {
            "device_count_128": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CusImageFolder(valdir, transforms.Compose([transforms.Resize(l_size), transforms.CenterCrop(crop_size), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_247": {
                "variable": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_248": {
                "variable": {
                    "value": "arg_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_across_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_218": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_185": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_365": {
                "variable": {
                    "value": "(output_sort, output_argsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(model(input))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_392": {
                "input": {
                    "value": "agree.type(torch.FloatTensor).to(output0.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_178": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_192": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(args.arch, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_254": {
                "input": {
                    "value": "x * torch.log2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, shift_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, shift_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_362": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_254": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_256": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, arg_topk]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/weights.py": {
        "torch": {
            "load_3": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/xueyan/antialias-cnn/data/lpf_weights/resnet101-5d3b4d8f.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/futils.py": {
        "torch": {
            "meshgrid_108": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(-1, 1, steps=H), torch.linspace(-1, 1, steps=W)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow, [h, w], mode='nearest')",
                            "Call"
                        ],
                        [
                            "flow[:, ::-1, :]",
                            "Subscript"
                        ],
                        [
                            "flow.copy()",
                            "Call"
                        ],
                        [
                            "np.concatenate([flow, np.zeros([H, W, 1])], axis=2)",
                            "Call"
                        ],
                        [
                            "flow.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "flow.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "flow[..., :2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_108": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/scheduler.py": {
        "torch": {}
    }
}