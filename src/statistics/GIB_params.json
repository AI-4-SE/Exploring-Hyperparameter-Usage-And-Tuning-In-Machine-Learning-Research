{
    "experiments/GIB_node_model.py": {
        "sklearn": {
            "f1_score_929": {
                "variable": {
                    "value": "train_f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_train].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_train.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_930": {
                "variable": {
                    "value": "train_f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_train].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_train.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_931": {
                "variable": {
                    "value": "val_f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_val].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_val.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_932": {
                "variable": {
                    "value": "val_f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_val].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_val.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_933": {
                "variable": {
                    "value": "test_f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_test].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_test.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_934": {
                "variable": {
                    "value": "test_f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[idx_test].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_test.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_749": {
                "variable": {
                    "value": "tsne",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_878": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[mask].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_879": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[mask].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_886": {
                "variable": {
                    "value": "f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[mask].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_887": {
                "variable": {
                    "value": "f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data.y[mask].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_1499": {
                "variable": {
                    "value": "test_f1_micro_best",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data_c.y[data_c.idx_test].tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_test.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "silhouette_score_732": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "Z_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "info_dict['Z_{}'.format(k)][mask]",
                            "Subscript"
                        ],
                        [
                            "info_dict['Z_{}'.format(k)]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[mask]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "davies_bouldin_score_734": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "Z_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "info_dict['Z_{}'.format(k)][mask]",
                            "Subscript"
                        ],
                        [
                            "info_dict['Z_{}'.format(k)]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[mask]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            },
            "calinski_harabasz_score_736": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "Z_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "info_dict['Z_{}'.format(k)][mask]",
                            "Subscript"
                        ],
                        [
                            "info_dict['Z_{}'.format(k)]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y[mask]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "no_grad_894": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_981": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=weight_decay), dict(params=model.non_reg_params, weight_decay=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01 if data_type.startswith('Pubmed') else 0.005",
                            "IfExp"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_1300": {
                "variable": {
                    "value": "data_c.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.edge_index, added_edge_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1384": {
                "variable": {
                    "value": "data_attacked.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(to_Variable(adj_coo.row, adj_coo.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1545": {
                "variable": {
                    "value": "data_lcc.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(to_Variable(edge_index_lcc_sparse.row, edge_index_lcc_sparse.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, heads * self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, heads, 2 * self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_371": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_522": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.is_cuda if isinstance(self.is_cuda, str) else 'cuda' if self.is_cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_828": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_info['ixz_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_828": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_828": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_833": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_info['structure_kl_list']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_833": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1153": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(heads * self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_309": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_310": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_177": {
                "variable": {
                    "value": "self.feature_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(x.size(0), self.out_channels).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(x.size(0), self.out_channels).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_304": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_328": {
                "variable": {
                    "value": "self.feature_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(out.size(0), self.out_channels).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(out.size(0), self.out_channels).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_333": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_333": {
                "variable": {
                    "value": "ixz",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha * torch.log((self.alpha + 1e-16) / self.prior)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_380": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "prob_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.struct_dropout_mode[1]",
                            "Subscript"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_671": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_821": {
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_881": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_1218": {
                "variable": {
                    "value": "new_train_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.train_mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_1441": {
                "type": {
                    "value": "device_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bernoulli_352": {
                "variable": {
                    "value": "posterior",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_353": {
                "variable": {
                    "value": "prior",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_354": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_354": {
                "variable": {
                    "value": "structure_kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_382": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_656": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "elu_688": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_690": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_823": {
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_830": {
                "tensors": {
                    "value": "reg_info['ixz_DN_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_830": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_835": {
                "tensors": {
                    "value": "reg_info['structure_kl_DN_list']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_312": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_313": {
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_659": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(None if x[0] is None else torch.matmul(x[0], self.weight), None if x[1] is None else torch.matmul(x[1], self.weight))",
                            "Tuple"
                        ],
                        [
                            "F.dropout(data.x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_1], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.6, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + x_1",
                            "BinOp"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_861": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1214": {
                "condition": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_1233": {
                "*size": {
                    "value": "data.x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_1495": {
                "type": {
                    "value": "device_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_178": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_329": {
                "*size": {
                    "value": "out.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_350": {
                "input": {
                    "value": "(self.alpha + 1e-16) / self.prior",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_865": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_876": {
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1247": {
                "condition": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_884": {
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1216": {
                "condition": {
                    "value": "(data.y == i) & data.train_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_389": {
                "input": {
                    "value": "alpha / (max_alpha + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_422": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_861": {
                "tensors": {
                    "value": "info_dict['ixz_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_391": {
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_420": {
                "variable": {
                    "value": "alpha_normalization",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "RelaxedBernoulli_427": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "temperature": {
                    "value": "torch.Tensor([temperature]).to(alpha.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "probs": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_865": {
                "tensors": {
                    "value": "info_dict['ixz_DN_list']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_1483": {
                "*size": {
                    "value": "data.x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(alphas, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_422": {
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x_j * self.att[:, :, self.out_neurons:]).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=prob_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(alpha)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "0.001 + max_alpha * alpha",
                            "BinOp"
                        ],
                        [
                            "sample_lognormal(mean=torch.zeros_like(alpha), sigma=alpha, sigma0=sigma0)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index_i, num_nodes=size_i)",
                            "Call"
                        ],
                        [
                            "scatter_sample(alpha, edge_index_i, temperature, size_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sigmoid(alpha), 0.01, 0.99)",
                            "Call"
                        ],
                        [
                            "torch.distributions.relaxed_bernoulli.RelaxedBernoulli(torch.Tensor([temperature]).to(alpha.device), probs=alpha).rsample()",
                            "Call"
                        ],
                        [
                            "alpha * alpha_normalization",
                            "BinOp"
                        ],
                        [
                            "alphas.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_413": {
                "variable": {
                    "value": "(alpha, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(alphas, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_424": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GIB_node_attack_exp.py": {
        "torch": {
            "device_376": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "is_cuda if isinstance(is_cuda, str) else 'cuda' if is_cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_144": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "classification_margins",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "classification_margins",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classification_margins)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_190": {
                "variable": {
                    "value": "class_distrs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_distrs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(class_distrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_395": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "classification_margins_best",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "classification_margins_best",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(classification_margins_best)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_195": {
                "variable": {
                    "value": "class_distrs_best",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_distrs_best",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(class_distrs_best)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_408": {
                "n": {
                    "value": "info['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_164": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_88": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_133": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "probs_best",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_best[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "probs_best",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_best[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GIB_node_exp.py": {
        "torch": {
            "device_161": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "is_cuda if isinstance(is_cuda, str) else 'cuda' if is_cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_181": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "run_exp/run_nettack.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_exp/run_nettack_grid.py": {
        "torch": {
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_exp/run_node.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "randn_51": {
                "variable": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Gumbel_55": {
                "variable": {
                    "value": "gumbel",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0]).to(src.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1.0]).to(src.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "gumbel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "src + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "multi_edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "multi_edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_117": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "mean + sigma * sigma0 * e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}