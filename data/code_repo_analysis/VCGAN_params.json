{
    "evaluation/Top-5 Accuracy/accuracy_VGG16.py": {
        "torch": {
            "softmax_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(target)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "vgg16",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "VGG16.pkl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/WarpError.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "flow_x_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "flow_x_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "flow_y_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "flow_y_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_occlusion(flownet, first_tensor, second_tensor)",
                            "Call"
                        ],
                        [
                            "occlusion.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((occlusion, occlusion, occlusion), dim=1)",
                            "Call"
                        ],
                        [
                            "equ29_mask | equ30_mask",
                            "BinOp"
                        ],
                        [
                            "occlusion.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pwcnet_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(occlusion, occlusion, occlusion)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_175": {
                "input": {
                    "value": "second_tensor * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "second_warpped * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/WarpError_by_txt.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "flow_x_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "flow_x_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "flow_y_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "flow_y_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_occlusion(flownet, first_tensor, second_tensor)",
                            "Call"
                        ],
                        [
                            "occlusion.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((occlusion, occlusion, occlusion), dim=1)",
                            "Call"
                        ],
                        [
                            "equ29_mask | equ30_mask",
                            "BinOp"
                        ],
                        [
                            "occlusion.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pwcnet_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(occlusion, occlusion, occlusion)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_198": {
                "input": {
                    "value": "second_tensor * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "second_warpped * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/WarpError_by_txt_DAVIS.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "flow_x_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "flow_x_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "flow_y_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "flow_y_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_occlusion(flownet, first_tensor, second_tensor)",
                            "Call"
                        ],
                        [
                            "occlusion.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((occlusion, occlusion, occlusion), dim=1)",
                            "Call"
                        ],
                        [
                            "equ29_mask | equ30_mask",
                            "BinOp"
                        ],
                        [
                            "occlusion.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pwcnet_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(occlusion, occlusion, occlusion)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_200": {
                "input": {
                    "value": "second_tensor * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "second_warpped * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/WarpError_by_txt_videvo.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "flow_x_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "flow_x_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "flow_y_du",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "flow_y_dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_occlusion(flownet, first_tensor, second_tensor)",
                            "Call"
                        ],
                        [
                            "occlusion.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((occlusion, occlusion, occlusion), dim=1)",
                            "Call"
                        ],
                        [
                            "equ29_mask | equ30_mask",
                            "BinOp"
                        ],
                        [
                            "occlusion.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_138": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pwcnet_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "occlusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(occlusion, occlusion, occlusion)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_202": {
                "input": {
                    "value": "second_tensor * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "second_warpped * non_occlusion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/correlation.py": {
        "torch": {
            "current_stream_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/WarpError/pwcnet.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "tensorPreprocessed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "tensorInput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorInput, Backward_tensorPartial[str(tensorFlow.size())]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_62": {
                "variable": {
                    "value": "tensorOutput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tensorInput, Backward_tensorPartial[str(tensorFlow.size())]], 1)",
                            "Call"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "(Backward_tensorGrid[str(tensorFlow.size())] + tensorFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_52": {
                "variable": {
                    "value": "tensorHorizontal",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_53": {
                "variable": {
                    "value": "tensorVertical",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "Backward_tensorGrid[str(tensorFlow.size())]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorHorizontal, tensorVertical]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.moduleOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.moduleTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.moduleThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.moduleFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.moduleFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=96, out_channels=128, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.moduleSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=196, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.moduleOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.moduleTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.moduleThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128, out_channels=96, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.moduleFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96, out_channels=64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.moduleFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.moduleSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64 + 32, out_channels=2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleOne(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleTwo(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleThr(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleFou(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleFiv(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.moduleMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32, out_channels=128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_140": {
                "variable": {
                    "value": "self.moduleUpflow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_142": {
                "variable": {
                    "value": "self.moduleUpfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intPrevious + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_179": {
                "variable": {
                    "value": "tensorVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorCorr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorSecond)",
                            "Call"
                        ],
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorWarp)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorVolume]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_26": {
                "input": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pwcnet(tensorPreprocessedFirst, tensorPreprocessedSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "pwcnet(tensorFirst, tensorSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.moduleSix(tensorFeat)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(objectPrevious['tensorFlow'])",
                            "Call"
                        ],
                        [
                            "tensorFlow",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_32": {
                "input": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pwcnet(tensorPreprocessedFirst, tensorPreprocessedSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "pwcnet(tensorFirst, tensorSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.moduleSix(tensorFeat)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(objectPrevious['tensorFlow'])",
                            "Call"
                        ],
                        [
                            "tensorFlow",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_100": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_110": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_112": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "intCurrent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, 81 + 32 + 2 + 2, 81 + 64 + 2 + 2, 81 + 96 + 2 + 2, 81 + 128 + 2 + 2, 81, None][intLevel + 0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_148": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "intCurrent + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_152": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_156": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_160": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_187": {
                "variable": {
                    "value": "tensorVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorCorr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorSecond)",
                            "Call"
                        ],
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorWarp)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorVolume, tensorFirst, tensorFlow, tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_205": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_207": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_213": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "resnet50_in_pre_training/dataset.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_54": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_200": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalarlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "self.targetlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalarlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "self.targetlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "resnet50_in_pre_training/network.py": {
        "torch": {
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.begin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_143": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_124": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_130": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_140": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "resnet50_in_pre_training/trainer.py": {
        "torch": {
            "device_count_22": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ImageNetTrainSet(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ImageNetValSet(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "net.eval()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_129": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "net.eval()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.softmax(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "net.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, modelname)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, modelname)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "resnet50_in_pre_training/utils.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "pretrained_net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.finetune_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/correlation.py": {
        "torch": {
            "current_stream_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/dataset.py": {
        "torch": {
            "randn_204": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b, b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, [0]] * 0.299 + img[:, :, [1]] * 0.587 + img[:, :, [2]] * 0.114",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((grayimg, grayimg, grayimg), axis=2)",
                            "Call"
                        ],
                        [
                            "self.img_aug(grayimg)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(grayimg, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(grayimg - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(grayimg).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[:, :, [0]] * 0.299 + img[:, :, [1]] * 0.587 + img[:, :, [2]] * 0.114",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((grayimg, grayimg, grayimg), axis=2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(grayimg, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(grayimg - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(grayimg).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_115": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "cropper(img)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "self.img_aug(img)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(img - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (self.opt.crop_size_w, self.opt.crop_size_h))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "color.rgb2lab(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.transpose(2, 0, 1).astype(np.float32)).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (self.opt.crop_size_w, self.opt.crop_size_h))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(img - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_116": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, [0]] * 0.299 + img[:, :, [1]] * 0.587 + img[:, :, [2]] * 0.114",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((grayimg, grayimg, grayimg), axis=2)",
                            "Call"
                        ],
                        [
                            "self.img_aug(grayimg)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(grayimg, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(grayimg - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(grayimg).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[:, :, [0]] * 0.299 + img[:, :, [1]] * 0.587 + img[:, :, [2]] * 0.114",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((grayimg, grayimg, grayimg), axis=2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(grayimg, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(grayimg - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(grayimg).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_180": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "cropper(img)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "self.img_aug(img)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(img - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (self.opt.crop_size_w, self.opt.crop_size_h))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "color.rgb2lab(img).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.transpose(2, 0, 1).astype(np.float32)).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(imgpath)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (self.opt.crop_size_w, self.opt.crop_size_h))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "(img - 128) / 128",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_181": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/network.py": {
        "torch": {
            "randn_532": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_534": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.begin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "d5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d5, global_features, global_features2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u2, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "u3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u3, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "u4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u4, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "u5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u5, d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "u6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u6, d0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "d5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d5, global_features, global_features2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u2, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "u3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u3, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "u4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u4, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "u5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u5, d1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "u6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u6, d0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_A, img_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_482": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_531": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_124": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_130": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_140": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_483": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_484": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_485": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_486": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_487": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_489": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_490": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_491": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_492": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_493": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_494": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_495": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_496": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_497": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_498": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_499": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_500": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_502": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_503": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/network_module.py": {
        "torch": {
            "randn_545": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.conv(conv2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dLayer(in_channels, latent_channels, kernel_size, stride, padding, dilation, pad_type, activation, norm, sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_158": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv1_1, conv1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv2_1, conv2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, full_conv, local_conv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "self.Gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "stacked_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_, prev_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "variable": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(in_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_276": {
                "variable": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(remember_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_280": {
                "variable": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cell_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_363": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_364": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_388": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_391": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_392": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_408": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_414": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_427": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_429": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_430": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_431": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_447": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_453": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_513": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_15": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_300": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_468": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_478": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_490": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_511": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_512": {
                "variable": {
                    "value": "self.mask_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_17": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_27": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_284": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remember_gate * prev_cell + in_gate * cell_gate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_391": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_430": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_470": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_480": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_492": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_41": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mv_341": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_342": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_472": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_494": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_508": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_509": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_43": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_341": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_496": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_498": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_261": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sigmoid_500": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/pwcnet.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "tensorPreprocessed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "tensorInput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorInput, Backward_tensorPartial[str(tensorFlow.size())]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_64": {
                "variable": {
                    "value": "tensorOutput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tensorInput, Backward_tensorPartial[str(tensorFlow.size())]], 1)",
                            "Call"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ],
                        [
                            "tensorInput",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "(Backward_tensorGrid[str(tensorFlow.size())] + tensorFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "tensorHorizontal",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_55": {
                "variable": {
                    "value": "tensorVertical",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "Backward_tensorGrid[str(tensorFlow.size())]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorHorizontal, tensorVertical]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.moduleOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.moduleTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.moduleThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.moduleFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.moduleFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=96, out_channels=128, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.moduleSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=128, out_channels=196, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.moduleOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.moduleTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.moduleThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128, out_channels=96, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.moduleFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96, out_channels=64, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.moduleFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.moduleSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=intCurrent + 128 + 128 + 96 + 64 + 32, out_channels=2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleOne(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleTwo(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleThr(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleFou(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.moduleFiv(tensorFeat), tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.moduleMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32, out_channels=128, kernel_size=3, stride=1, padding=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_142": {
                "variable": {
                    "value": "self.moduleUpflow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_144": {
                "variable": {
                    "value": "self.moduleUpfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intPrevious + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_181": {
                "variable": {
                    "value": "tensorVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorCorr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorSecond)",
                            "Call"
                        ],
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorWarp)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorVolume]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_26": {
                "input": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pwcnet(tensorPreprocessedFirst, tensorPreprocessedSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "pwcnet(tensorFirst, tensorSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.moduleSix(tensorFeat)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(objectPrevious['tensorFlow'])",
                            "Call"
                        ],
                        [
                            "tensorFlow",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_32": {
                "input": {
                    "value": "tensorFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pwcnet(tensorPreprocessedFirst, tensorPreprocessedSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "pwcnet(tensorFirst, tensorSecond)",
                            "Call"
                        ],
                        [
                            "20.0 * F.interpolate(input=tensorFlow, size=(H, W), mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.moduleSix(tensorFeat)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(objectPrevious['tensorFlow'])",
                            "Call"
                        ],
                        [
                            "tensorFlow",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_110": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_112": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_118": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "intCurrent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, None, 81 + 32 + 2 + 2, 81 + 64 + 2 + 2, 81 + 96 + 2 + 2, 81 + 128 + 2 + 2, 81, None][intLevel + 0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_150": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "intCurrent + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_154": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_158": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_162": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_166": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "intCurrent + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_189": {
                "variable": {
                    "value": "tensorVolume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensorCorr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorSecond)",
                            "Call"
                        ],
                        [
                            "correlation.FunctionCorrelation(tensorFirst=tensorFirst, tensorSecond=tensorWarp)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "tensorFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorVolume, tensorFirst, tensorFlow, tensorFeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "81 + 32 + 2 + 2 + 128 + 128 + 96 + 64 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_207": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_213": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_217": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_first_stage.py": {
        "torch": {
            "from_numpy_26": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_first_stage_by_folder.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_second_stage.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_second_stage_by_folder.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_second_stage_by_txt.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/test_model_second_stage_by_txt2.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg.transpose(2, 0, 1).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/trainer_fisrt_stage.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_33": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_172": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_178": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_179": {
                "variable": {
                    "value": "criterion_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_251": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_351": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_357": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_378": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_379": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_429": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_520": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_526": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_547": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_548": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_598": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_188": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_366": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_368": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_370": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_535": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_537": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_539": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_620": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(input_samples, interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tensor(np.zeros((true_L.shape[0], 1, 30, 30)))",
                            "Call"
                        ],
                        [
                            "Variable(Tensor(real_samples.shape[0], 1, 30, 30).fill_(1.0), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_459": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_478": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_675": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_226": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_230": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_235": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_239": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_404": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_408": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_413": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_417": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_573": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_577": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_582": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_586": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_656": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/trainer_second_stage.py": {
        "torch": {
            "device_count_28": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_34": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_234": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_240": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_241": {
                "variable": {
                    "value": "criterion_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_266": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_267": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_481": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_506": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_507": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_count_706": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_712": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_737": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_738": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_251": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_253": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_255": {
                "variable": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_257": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_491": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_493": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_495": {
                "variable": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_497": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_722": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_724": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_726": {
                "variable": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flownet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_pwcnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(flownet)",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ],
                        [
                            "flownet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_728": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_814": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(input_samples, interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tensor(np.zeros((in_part[0].shape[0], 1, 30, 30)))",
                            "Call"
                        ],
                        [
                            "Variable(Tensor(real_samples.shape[0], 1, 30, 30).fill_(1.0), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, temp, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_170": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_170": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, temp, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_392": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_608": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, temp, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_625": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_625": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_864": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp, temp, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_881": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_881": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_89": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_296": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_301": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_305": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_532": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_536": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_541": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_545": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_654": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_t, y_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, y_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_657": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_t, p_t.detach())",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_763": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_767": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_772": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_776": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_915": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_t, p_t.detach())",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, p_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_182": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_404": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_404": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_637": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_637": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_893": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-opt.mask_para * torch.sum((x_t + 1) / 2 - x_t_warp, dim=1).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_893": {
                "variable": {
                    "value": "mask_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_912": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_t, y_t)",
                            "Call"
                        ],
                        [
                            "discriminator(x_t, y_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_170": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_392": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_392": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_625": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_625": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_881": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_881": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_404": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_637": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_637": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_893": {
                "input": {
                    "value": "(x_t + 1) / 2 - x_t_warp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_893": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/utils.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pwcnet_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.perceptual_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_26": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.feature_extractor_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetSeSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}