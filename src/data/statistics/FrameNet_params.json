{
    "src/dataset.py": {
        "torch": {
            "from_numpy_66": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_x, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_y, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "orient_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_img, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "orient_vert_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_img_vertical, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "orient_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_x, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_y, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "orient_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_img, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "orient_vert_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(orient_img_vertical, (2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_226": {
                "variable": {
                    "value": "orient_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/dorn.py": {
        "torch": {
            "randn_319": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "257",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "353",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_89": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout2d_90": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.global_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048 * 4 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_94": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(30, 40)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.aspp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.aspp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, 3, padding=6, dilation=6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.aspp3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, 3, padding=12, dilation=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.aspp4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, 3, padding=18, dilation=18)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.concat_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(p=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "x6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A, B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_186": {
                "variable": {
                    "value": "ord_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((A, B), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "decode_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ord_c1 >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('conv1_1', nn.Conv2d(self.channel, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1_1', nn.BatchNorm2d(64)), ('relu1_1', nn.ReLU(inplace=True)), ('conv1_2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn_2', nn.BatchNorm2d(64)), ('relu1_2', nn.ReLU(inplace=True)), ('conv1_3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn1_3', nn.BatchNorm2d(128)), ('relu1_3', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.layer1[0].conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.layer1[0].downsample[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "self.layer3[0].conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "variable": {
                    "value": "self.layer3[0].downsample[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "variable": {
                    "value": "self.layer4[0].conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.layer4[0].downsample[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_142": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "512 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_145": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "136",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_148": {
                "size": {
                    "value": "(240, 320)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LogSoftmax_189": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_206": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate_joint.py": {
        "torch": {
            "MSELoss_29": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AffineTestsDataset(root=args.root, feat=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[angle1, angle2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_63": {
                "variable": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1 / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_64": {
                "variable": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1 / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_69": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 0:1, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_70": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 0:1, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_71": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 1:2, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_72": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 1:2, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "dir_x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dir_x ** 2, dim=1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batched['mask'] > 0",
                            "Compare"
                        ],
                        [
                            "masks_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "masks_tensor.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "dir_x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dir_x_l, dir_x_l, dir_x_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1 * norm2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_125": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_39": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "dir_x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dir_x_l, dir_x_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1 * norm2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "variable": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_162": {
                "input": {
                    "value": "torch.abs(d0 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a1",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d0), torch.min(torch.abs(d0 + 360), torch.abs(d0 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_165": {
                "input": {
                    "value": "torch.abs(d1 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a2",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d1), torch.min(torch.abs(d1 + 360), torch.abs(d1 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_168": {
                "input": {
                    "value": "torch.abs(d2 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a3",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d2), torch.min(torch.abs(d2 + 360), torch.abs(d2 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_171": {
                "input": {
                    "value": "torch.abs(d3 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a4",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d3), torch.min(torch.abs(d3 + 360), torch.abs(d3 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d3, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_173": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a3",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d2), torch.min(torch.abs(d2 + 360), torch.abs(d2 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_59": {
                "input": {
                    "value": "Q[:, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Q[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_60": {
                "input": {
                    "value": "Q[:, 3:4, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Q[:, 2:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_120": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batched['X'].cuda()",
                            "Call"
                        ],
                        [
                            "Normalize(X)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batched['Y'].cuda()",
                            "Call"
                        ],
                        [
                            "Normalize(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_162": {
                "input": {
                    "value": "d0 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_165": {
                "input": {
                    "value": "d1 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_168": {
                "input": {
                    "value": "d2 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_171": {
                "input": {
                    "value": "d3 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "dir_x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_126": {
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_193": {
                "input": {
                    "value": "angles2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(torch.sum(-dir_x * X, dim=1), min=-1.0, max=1.0)) * masks_tensor / np.pi * 180 + torch.acos(torch.clamp(torch.sum(-dir_y * Y, dim=1), min=-1.0, max=1.0)) * masks_tensor / np.pi * 180",
                            "BinOp"
                        ],
                        [
                            "torch.acos(dot_product) * masks_tensor / np.pi * 180",
                            "BinOp"
                        ],
                        [
                            "a",
                            "variable"
                        ]
                    ]
                }
            },
            "acos_141": {
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_143": {
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_145": {
                "input": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.sum(norm1 * norm2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dot_product, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_184": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_x * X, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_185": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_y * Y, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_186": {
                "input": {
                    "value": "torch.clamp(torch.sum(-dir_x * Y, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_187": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_y * X, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_188": {
                "input": {
                    "value": "torch.clamp(torch.sum(-dir_x * X, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_189": {
                "input": {
                    "value": "torch.clamp(torch.sum(-dir_y * Y, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_190": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_x * Y, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_191": {
                "input": {
                    "value": "torch.clamp(torch.sum(-dir_y * X, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_184": {
                "input": {
                    "value": "torch.sum(dir_x * X, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_185": {
                "input": {
                    "value": "torch.sum(dir_y * Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_186": {
                "input": {
                    "value": "torch.sum(-dir_x * Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_187": {
                "input": {
                    "value": "torch.sum(dir_y * X, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_188": {
                "input": {
                    "value": "torch.sum(-dir_x * X, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_189": {
                "input": {
                    "value": "torch.sum(-dir_y * Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_190": {
                "input": {
                    "value": "torch.sum(dir_x * Y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "input": {
                    "value": "torch.sum(-dir_y * X, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "acos_216": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_x_copy * X_copy, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_217": {
                "input": {
                    "value": "torch.clamp(torch.sum(dir_y_copy * Y_copy, dim=1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "dir_x * X",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "dir_y * Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "-dir_x * Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "dir_y * X",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "-dir_x * X",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "-dir_y * Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "dir_x * Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_191": {
                "input": {
                    "value": "-dir_y * X",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_216": {
                "input": {
                    "value": "torch.sum(dir_x_copy * X_copy, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_217": {
                "input": {
                    "value": "torch.sum(dir_y_copy * Y_copy, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "dir_x_copy * X_copy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "dir_y_copy * Y_copy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_affine_dorn.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AffineDataset(usage='train', root=args.root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AffineDataset(usage='test', root=args.root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AffineDataset(usage='test', root=args.root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[angle1, angle2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_90": {
                "variable": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1 / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_91": {
                "variable": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1 / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_96": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 0:1, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_97": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 0:1, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_98": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 1:2, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_99": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[:, 1:2, :, :] / 180.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "variable": {
                    "value": "dir_x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dir_x ** 2, dim=1) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "dir_x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dir_x_l, dir_x_l, dir_x_l]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_261": {
                "variable": {
                    "value": "mse_loss_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c_1 ** 2 + c_2 ** 2 + c_3 ** 2 + c_4 ** 2).view(mask.shape[0], 1, mask.shape[2], mask.shape[3]) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_269": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(torch.sum(norm1 * norm2, dim=1), -1, 1)) / np.pi * 180",
                            "BinOp"
                        ],
                        [
                            "angle.view(mask.shape[0], 1, mask.shape[2], mask.shape[3]) * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(angle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_271": {
                "input": {
                    "value": "(norm1 - norm0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_272": {
                "input": {
                    "value": "(norm1 - norm2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_198": {
                "input": {
                    "value": "torch.abs(d0 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a1",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d0), torch.min(torch.abs(d0 + 360), torch.abs(d0 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d0, dim=1)",
                            "Call"
                        ],
                        [
                            "d0.view(d0.shape[0], 1, d0.shape[1], d0.shape[2])",
                            "Call"
                        ],
                        [
                            "preds - a1",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d0), torch.min(torch.abs(d0 + 360), torch.abs(d0 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_202": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d0 * mask",
                            "BinOp"
                        ],
                        [
                            "torch.min(d0, torch.min(d1, torch.min(d2, d3)))",
                            "Call"
                        ],
                        [
                            "d.view(d.shape[0], 1, d.shape[1], d.shape[2])",
                            "Call"
                        ],
                        [
                            "d * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_204": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs - l0) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(diff, dim=1).view(outputs.shape[0], 1, outputs.shape[2], outputs.shape[3])",
                            "Call"
                        ],
                        [
                            "diff * mask",
                            "BinOp"
                        ],
                        [
                            "torch.min(diff1, torch.min(diff2, torch.min(diff3, diff4)))",
                            "Call"
                        ],
                        [
                            "diff.view(diff.shape[0], 1, diff.shape[1], diff.shape[2])",
                            "Call"
                        ],
                        [
                            "normal_pred - normal",
                            "BinOp"
                        ],
                        [
                            "(np.sqrt(np.sum(diff * diff, axis=2)) * 512).astype('uint8') * (m > 0)",
                            "BinOp"
                        ],
                        [
                            "torch.min(diff1, torch.min(diff2, torch.min(diff3, diff4)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_206": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(outputs - l0) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(diff, dim=1).view(outputs.shape[0], 1, outputs.shape[2], outputs.shape[3])",
                            "Call"
                        ],
                        [
                            "diff * mask",
                            "BinOp"
                        ],
                        [
                            "torch.min(diff1, torch.min(diff2, torch.min(diff3, diff4)))",
                            "Call"
                        ],
                        [
                            "diff.view(diff.shape[0], 1, diff.shape[1], diff.shape[2])",
                            "Call"
                        ],
                        [
                            "normal_pred - normal",
                            "BinOp"
                        ],
                        [
                            "(np.sqrt(np.sum(diff * diff, axis=2)) * 512).astype('uint8') * (m > 0)",
                            "BinOp"
                        ],
                        [
                            "torch.min(diff1, torch.min(diff2, torch.min(diff3, diff4)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_208": {
                "variable": {
                    "value": "diff_2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_x - X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_209": {
                "variable": {
                    "value": "diff_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_y - Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "mse_loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(diff_2a + diff_2b) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_214": {
                "input": {
                    "value": "torch.abs(d0 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a1",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d0), torch.min(torch.abs(d0 + 360), torch.abs(d0 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d0, dim=1)",
                            "Call"
                        ],
                        [
                            "d0.view(d0.shape[0], 1, d0.shape[1], d0.shape[2])",
                            "Call"
                        ],
                        [
                            "preds - a1",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d0), torch.min(torch.abs(d0 + 360), torch.abs(d0 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_217": {
                "input": {
                    "value": "torch.abs(d1 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_218": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a2",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d1), torch.min(torch.abs(d1 + 360), torch.abs(d1 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_220": {
                "input": {
                    "value": "torch.abs(d2 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_221": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a3",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d2), torch.min(torch.abs(d2 + 360), torch.abs(d2 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_223": {
                "input": {
                    "value": "torch.abs(d3 + 360)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_224": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a4",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d3), torch.min(torch.abs(d3 + 360), torch.abs(d3 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d3, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_225": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds - a3",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.abs(d2), torch.min(torch.abs(d2 + 360), torch.abs(d2 - 360)))",
                            "Call"
                        ],
                        [
                            "torch.sum(d2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_228": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d0 * mask",
                            "BinOp"
                        ],
                        [
                            "torch.min(d0, torch.min(d1, torch.min(d2, d3)))",
                            "Call"
                        ],
                        [
                            "d.view(d.shape[0], 1, d.shape[1], d.shape[2])",
                            "Call"
                        ],
                        [
                            "d * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_230": {
                "variable": {
                    "value": "diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_232": {
                "variable": {
                    "value": "diff3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "diff4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l3) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_234": {
                "input": {
                    "value": "diff3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - l2) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - l2) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_236": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "diff_2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_x - X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_239": {
                "variable": {
                    "value": "diff_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_y - Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_242": {
                "variable": {
                    "value": "diff_2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_x - Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "diff_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_y + X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_246": {
                "variable": {
                    "value": "diff_2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_x + X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_247": {
                "variable": {
                    "value": "diff_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_y + Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_250": {
                "variable": {
                    "value": "diff_2a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_x + Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "diff_2b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(dir_y - X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_254": {
                "input": {
                    "value": "diff_2_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff_2a + diff_2b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_255": {
                "variable": {
                    "value": "mse_loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_2 * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask, mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "(Q > 45).float()",
                            "Call"
                        ],
                        [
                            "labels_tensor[:, 0:1, :, :] * labels_tensor[:, 0:1, :, :] + labels_tensor[:, 1:2, :, :] * labels_tensor[:, 1:2, :, :] > 0.2",
                            "Compare"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mask, mask, mask, mask], dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_121": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "(Q > 45).float()",
                            "Call"
                        ],
                        [
                            "labels_tensor[:, 0:1, :, :] * labels_tensor[:, 0:1, :, :] + labels_tensor[:, 1:2, :, :] * labels_tensor[:, 1:2, :, :] > 0.2",
                            "Compare"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mask, mask, mask, mask], dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_172": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] > 90",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "Q[:, 0:1, :, :] < 0",
                            "Compare"
                        ],
                        [
                            "torch.cat([mask, mask], dim=1)",
                            "Call"
                        ],
                        [
                            "(Q > 45).float()",
                            "Call"
                        ],
                        [
                            "labels_tensor[:, 0:1, :, :] * labels_tensor[:, 0:1, :, :] + labels_tensor[:, 1:2, :, :] * labels_tensor[:, 1:2, :, :] > 0.2",
                            "Compare"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "mask & mask_alt_tensor",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mask, mask, mask, mask], dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_263": {
                "input": {
                    "value": "dir_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normalize(outputs2[:, 0:3, :, :])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dir_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normalize(outputs2[:, 3:6, :, :])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_265": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batched['X']",
                            "Subscript"
                        ],
                        [
                            "sample_batched['X'].cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_batched['Y']",
                            "Subscript"
                        ],
                        [
                            "sample_batched['Y'].cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_312": {
                "variable": {
                    "value": "diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_313": {
                "variable": {
                    "value": "diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_314": {
                "variable": {
                    "value": "diff3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_315": {
                "variable": {
                    "value": "diff4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - l3) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_316": {
                "input": {
                    "value": "diff3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - l2) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - l2) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_86": {
                "input": {
                    "value": "Q[:, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Q[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_87": {
                "input": {
                    "value": "Q[:, 3:4, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Q[:, 2:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_198": {
                "input": {
                    "value": "d0 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_214": {
                "input": {
                    "value": "d0 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_217": {
                "input": {
                    "value": "d1 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_220": {
                "input": {
                    "value": "d2 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_223": {
                "input": {
                    "value": "d3 - 360",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_267": {
                "input": {
                    "value": "torch.clamp(torch.sum(norm1 * norm2, dim=1), -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_267": {
                "input": {
                    "value": "torch.sum(norm1 * norm2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save + '/model-epoch-%05d-iter-%05d.cpkt' % (epoch, i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_136": {
                "input": {
                    "value": "dir_x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "norm1 * norm2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/visualize_field.py": {
        "torch": {}
    }
}