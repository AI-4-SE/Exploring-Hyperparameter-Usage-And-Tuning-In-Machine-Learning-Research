{
    "data/ImagenetDataset.py": {
        "torch": {
            "from_numpy_163": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(image_label))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(image_label))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/samplers.py": {
        "torch": {
            "Generator_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/Transformers/CMT/cmt.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([[x, y] for x in range(number_size) for y in range(number_size)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_611": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_41": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_42": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CMTLayers(dim=self.dim, ffn_ratio=self.ffn_ratio, relative_pos_embeeding=relative_pos_embeeding, no_distance_pos_embeeding=no_distance_pos_embeeding, features_size=features_size, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=proj_drop, sr_ratio=sr_ratio, drop_path_rate=drop_path_rate[i]) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_168": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.GELU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.conv1x1_pw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(output_dim, dim, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "make_pairs(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "make_pairs(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "self.conv3x3_gelu_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channel, out_channels=self.out_channel, kernel_size=self.kernel_size, stride=self.stride_size, padding=self.padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_304": {
                "variable": {
                    "value": "self.conv3x3_gelu_bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvGeluBN(kernel_size=kernel_size, in_channel=out_channel, out_channel=out_channel, stride_size=1) for _ in range(self.layers_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_320": {
                "variable": {
                    "value": "self.patch_aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "make_pairs(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "make_pairs(stride_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_435": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims_list[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_439": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.actation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.GELU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_173": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.position_embeeding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(2 * self.features_size - 1, 2 * self.features_size - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_patches, dims_list[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_179": {
                "variable": {
                    "value": "self.position_embeeding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.features_size ** 2, self.features_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GELU_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(dim_ratio * dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_241": {
                "in_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(dim_ratio * dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "self.out_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "2 * self.features_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * self.features_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_179": {
                "*size": {
                    "value": "self.features_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_409": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "[0.1]",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(block_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "CrossEntropyLoss_207": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDatasetTest(image_file=args.test_file, train_phase=False, input_size=args.input_size, crop_size=args.crop_size, shuffle=False, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_273": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_203": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDatasetTest(image_file=args.test_file, train_phase=False, input_size=args.input_size, crop_size=args.crop_size, shuffle=False, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_119": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_170": {
                "f": {
                    "value": "args.checkpoints_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_count_211": {
                "variable": {
                    "value": "total_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_375": {
                "variable": {
                    "value": "log_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_378": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(image_file=args.train_file, train_phase=True, input_size=args.input_size, crop_size=args.crop_size, shuffle=True, interpolation='bilinear', auto_augment='rand', color_prob=0.4, hflip_prob=0.5)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "RASampler(train_dataset, num_replicas=dist.get_world_size(), rank=dist.get_rank(), shuffle=True)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_388": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(image_file=args.val_file, train_phase=False, input_size=args.input_size, crop_size=args.crop_size, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "validation_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(validation_dataset)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_609": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_159": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_214": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_369": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(image_file=args.val_file, train_phase=False, input_size=args.input_size, crop_size=args.crop_size, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_418": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_302": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_328": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CmtTi(num_classes=args.num_classes, input_resolution=(args.crop_size, args.crop_size), qkv_bias=True if args.qkv_bias else False, ape=True if args.ape else False, rpe=True if args.rpe else False, pe_nd=True if args.pe_nd else False, drop_path_rate=args.drop_path_rate)",
                            "Call"
                        ],
                        [
                            "CmtXS(num_classes=args.num_classes, input_resolution=(args.crop_size, args.crop_size), qkv_bias=True if args.qkv_bias else False, ape=True if args.ape else False, rpe=True if args.rpe else False, pe_nd=True if args.pe_nd else False, drop_path_rate=args.drop_path_rate)",
                            "Call"
                        ],
                        [
                            "CmtS(num_classes=args.num_classes, input_resolution=(args.crop_size, args.crop_size), qkv_bias=True if args.qkv_bias else False, ape=True if args.ape else False, rpe=True if args.rpe else False, pe_nd=True if args.pe_nd else False, drop_path_rate=args.drop_path_rate)",
                            "Call"
                        ],
                        [
                            "actnn.QModule(model)",
                            "Call"
                        ],
                        [
                            "CmtB(num_classes=args.num_classes, input_resolution=(args.crop_size, args.crop_size), qkv_bias=True if args.qkv_bias else False, ape=True if args.ape else False, rpe=True if args.rpe else False, pe_nd=True if args.pe_nd else False, drop_path_rate=args.drop_path_rate)",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "DDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "DataParallel(model, device_ids=[args.local_rank], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_368": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(image_file=args.train_file, train_phase=True, input_size=args.input_size, crop_size=args.crop_size, shuffle=True, interpolation='bilinear', auto_augment='rand', color_prob=0.4, hflip_prob=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "translate_state_dict(model.state_dict())",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "translate_state_dict(model.state_dict())",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoints_path + '/r50' + f'_losses_{best_loss}' + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_457": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "translate_state_dict(model.state_dict())",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "translate_state_dict(model.state_dict())",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'state_dict': state_dict, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoints_path + '/' + 'r50' + f'_accuracy_{best_acc}' + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__546": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__554": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "autocast_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/augments.py": {
        "torch": {
            "randperm_40": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_42": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_62": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_64": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_86": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optimizer_step.py": {
        "torch": {
            "SGD_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weights_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_12": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamW_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_weight_decay(model, skip, skip_keywords)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weights_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamW_25": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/precise_bn.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_88": {
                "input": {
                    "value": "bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "torch.isnan(bn.running_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "torch.isinf(bn.running_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "~torch.isfinite(bn.running_var)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_100": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isinf_103": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_106": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}