{
    "code/model/functional/initialize.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ],
                        [
                            "777777",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "code/model/modules/bilstm.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_35": {
                "variable": {
                    "value": "packed_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_37": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_31": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/modules/bilstm_model.py": {
        "torch": {
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "conf.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "variable": {
                    "value": "self.dropout_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "conf.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conf.trans_output_size * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ex_target_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_size + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "self.local_loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.begins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.begins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "self.insides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.insides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-feats * self.begins * isBNil.float().unsqueeze(1) / todiv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "confirmed",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "confirmed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "torch.tensor(confirmed, dtype=torch.long).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "local_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "losses.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "local_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "losses.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "rights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.zeros(bilstm_outputs.size(0), 1, bilstm_outputs.size(-1)).cuda()]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "word_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_feature, char_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_241": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "-feats * self.insides * isINil.float().unsqueeze(1) / todiv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_105": {
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "temp",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tags * notfuzzy.long()",
                            "BinOp"
                        ],
                        [
                            "temp.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "-torch.gather(feats, 1, temp)",
                            "UnaryOp"
                        ],
                        [
                            "temp.squeeze()",
                            "Call"
                        ],
                        [
                            "temp * notfuzzy.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_109": {
                "input": {
                    "value": "torch.sum(torch.exp(feats), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "confirmed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "torch.tensor(confirmed, dtype=torch.long).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "losses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.local_loss_function_nil(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "self.local_loss_function(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "local_mask * losses",
                            "BinOp"
                        ],
                        [
                            "self.local_loss_function(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "local_mask * losses",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_192": {
                "input": {
                    "value": "losses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.local_loss_function_nil(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "self.local_loss_function(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "local_mask * losses",
                            "BinOp"
                        ],
                        [
                            "self.local_loss_function(flat_feats, flat_tags)",
                            "Call"
                        ],
                        [
                            "local_mask * losses",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "bilstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bilstm_outputs.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "bilstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bilstm_outputs.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "torch.exp(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_226": {
                "input": {
                    "value": "lefts[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_228": {
                "input": {
                    "value": "rights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/modules/crf.py": {
        "torch": {
            "max_18": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_19": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_33": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_34": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "init_transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.target_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.target_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transitions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(self.target_size + 2, self.target_size + 2)",
                            "Call"
                        ],
                        [
                            "init_transitions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "self.before_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[all_fuzzy, begin_fuzzy, inside_fuzzy]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "self.current_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[common, common, current_masks]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_183": {
                "variable": {
                    "value": "tg_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_191": {
                "variable": {
                    "value": "conf_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_partition.view(batch_size, tag_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_2[0, :].view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_226": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(1 - mask.long()).byte()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_227": {
                "variable": {
                    "value": "end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tags - self.NOT_CONFIRM_IDX * notconfirmed",
                            "BinOp"
                        ],
                        [
                            "tags - self.NOT_CONFIRM_IDX * notconfirmed",
                            "BinOp"
                        ],
                        [
                            "tags * isconfirmed + pred_index * notconfirmed",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_228": {
                "variable": {
                    "value": "end_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_nofuzzy, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_230": {
                "variable": {
                    "value": "final_confirmed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "isconfirmed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags_notconf >= 0).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_278": {
                "variable": {
                    "value": "tg_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_286": {
                "variable": {
                    "value": "conf_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_partition.view(batch_size, tag_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_nofuzzy[0, :].view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_319": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(1 - mask.long()).byte()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_320": {
                "variable": {
                    "value": "fuzzy_end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_notconf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tags_notconf.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(tags_notconf - conf.fuzzy2id['not_conf']) * notconfirmed",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_327": {
                "variable": {
                    "value": "end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_nofuzzy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tags_nofuzzy.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_328": {
                "variable": {
                    "value": "end_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_nofuzzy, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_330": {
                "variable": {
                    "value": "final_confirmed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "isconfirmed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags_notconf >= 0).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_377": {
                "variable": {
                    "value": "tg_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ],
                        [
                            "scores.view(seq_len, batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_388": {
                "variable": {
                    "value": "(max_score, max_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats[:, 0, :].softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_396": {
                "variable": {
                    "value": "conf_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_partition.view(batch_size, tag_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_2[0, :].view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_440": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(1 - mask.long()).byte()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_441": {
                "variable": {
                    "value": "end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags_2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tags - self.NOT_CONFIRM_IDX * notconfirmed",
                            "BinOp"
                        ],
                        [
                            "tags - self.NOT_CONFIRM_IDX * notconfirmed",
                            "BinOp"
                        ],
                        [
                            "tags * isconfirmed + pred_index * notconfirmed",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_442": {
                "variable": {
                    "value": "end_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_nofuzzy, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_444": {
                "variable": {
                    "value": "final_confirmed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "isconfirmed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags_notconf >= 0).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ],
                        [
                            "(tags != self.NOT_CONFIRM_IDX).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_462": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(1 - mask.long()).byte()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_498": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_502": {
                "variable": {
                    "value": "last_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_507": {
                "variable": {
                    "value": "(_, last_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_512": {
                "variable": {
                    "value": "back_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_563": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "(1 - mask.long()).byte()",
                            "Call"
                        ],
                        [
                            "mask.byte()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_564": {
                "variable": {
                    "value": "end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tags.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "tags.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_566": {
                "variable": {
                    "value": "end_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "self.transitions[:, self.END_TAG_IDX].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_nofuzzy, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags_2, 0, length_mask - 1).view(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_568": {
                "variable": {
                    "value": "tg_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(seq_len, batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(seq_len, batch_size))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.view(seq_len, batch_size, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_20": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "before_mask * current_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "torch.sum(score_exp, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_205": {
                "variable": {
                    "value": "notconf_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_notconf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp_fuzzy(cur_values, tag_size, before_mask, current_mask).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "isconf_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_nofuzzy[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_302": {
                "variable": {
                    "value": "notconf_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_notconf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp_fuzzy(cur_values, tag_size, before_mask, current_mask).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "isconf_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_nofuzzy[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_410": {
                "variable": {
                    "value": "(max_score, max_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats[:, idx, :].softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_418": {
                "variable": {
                    "value": "notconf_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "notconf_notconf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp_fuzzy(cur_values, tag_size, before_mask, current_mask).view(batch_size, tag_size, 1)",
                            "Call"
                        ],
                        [
                            "log_sum_exp(cur_values, tag_size).view(batch_size, tag_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "isconf_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_nofuzzy[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "tags_2[idx, :].view(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_492": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_527": {
                "variable": {
                    "value": "pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_40": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_195": {
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_2[idx - 1, :].view(batch_size, 1, 1).expand(batch_size, 1, tag_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_290": {
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_nofuzzy[idx - 1, :].view(batch_size, 1, 1).expand(batch_size, 1, tag_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_400": {
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + notconf_partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tags_2[idx - 1, :].view(batch_size, 1, 1).expand(batch_size, 1, tag_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "score_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(vec - max_score.expand_as(vec)) * before_mask * current_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(-1)",
                            "Call"
                        ],
                        [
                            "feats.size(-1)",
                            "Call"
                        ],
                        [
                            "feats.size(-1)",
                            "Call"
                        ],
                        [
                            "feats.size(-1)",
                            "Call"
                        ],
                        [
                            "feats.size(-1)",
                            "Call"
                        ],
                        [
                            "scores.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_21": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/modules/feature.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.char_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "char_conv_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "char_conv_outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(char_conv_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "char_conv_outputs.transpose(-2, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "char_conv_outputs.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_of_words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.arange(seq_len, dtype=float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.expand_dims(position_i, 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / np.power(10000.0, 2 * np.arange(self.position_size / 2, dtype=float) / self.position_size)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(np.expand_dims(position_j, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[position_ij.cos(), position_ij.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_22": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_nums[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, filter_size, self.feature_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "pool_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(conv_output, -2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "(batch_size, seq_len, self.position_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "ndarray": {
                    "value": "pretrained_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "char_encoder(input_embed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils/fuzzy_trainer.py": {
        "torch": {
            "from_numpy_456": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_458": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_465": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path_save_model + '_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}