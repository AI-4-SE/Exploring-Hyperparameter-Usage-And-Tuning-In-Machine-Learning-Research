{
    "deliverables/FINAL/code/baseline.py": {
        "sklearn": {
            "StandardScaler_415": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_419": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "deliverables/FINAL/code/extension_cnn.py": {
        "sklearn": {
            "StandardScaler_559": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_564": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "MSELoss_200": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Cin, Cout, (k, 2 * D)).float() for k in ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(ks) * Cout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(input_unsq).squeeze(3)) for conv in self.conv]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(z, z.size(2)).squeeze(2) for z in out]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out).float()",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(input_unsq).squeeze(3)) for conv in self.conv]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(z, z.size(2)).squeeze(2) for z in out]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out).float()",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_231": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/cnn.mdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_285": {
                "f": {
                    "value": "./data/cnn.mdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_60": {
                "input": {
                    "value": "conv(input_unsq).squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_61": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Cout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k, 2 * D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "ndarray": {
                    "value": "extract_emb(s1, s2, wrdvec, id2w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "extract_emb(s1, s2, wrdvec, id2w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "extract_emb(s1, s2, wrdvec, id2w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "extract_emb(s1, s2, wrdvec, id2w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "score + best_score",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_222": {
                "ndarray": {
                    "value": "extract_emb(s1, s2, wrdvec, id2w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "score + best_score",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "deliverables/FINAL/code/extension_cnn_new.py": {
        "sklearn": {
            "StandardScaler_593": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_598": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SmoothL1Loss_195": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "float"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Cin, Cout, (k, D)).float() for k in ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * len(ks) * Cout + 11",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.nn_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * len(ks) * Cout + 11",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.nn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(input_unsq1).squeeze(3)) for conv in self.conv]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(z, z.size(2)).squeeze(2) for z in out1]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out1, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(input_unsq2).squeeze(3)) for conv in self.conv]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(z, z.size(2)).squeeze(2) for z in out2]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out2, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out2).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, baseline_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/cnn.mdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_295": {
                "f": {
                    "value": "./data/cnn.mdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "conv(input_unsq1).squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_60": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_65": {
                "input": {
                    "value": "conv(input_unsq2).squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_66": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Cout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k, D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "s1v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "s2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "score + best_score",
                            "BinOp"
                        ],
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "s1v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "s2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_320": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_322": {
                "ndarray": {
                    "value": "s1v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_323": {
                "ndarray": {
                    "value": "s2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "ndarray": {
                    "value": "s1v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "s2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "score + best_score",
                            "BinOp"
                        ],
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "from_numpy_224": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_225": {
                "ndarray": {
                    "value": "s1v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_226": {
                "ndarray": {
                    "value": "s2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ],
                        [
                            "extract_emb(s1, s2, wrdvec, id2w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "score + best_score",
                            "BinOp"
                        ],
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "deliverables/FINAL/code/extension_lstm.py": {
        "sklearn": {
            "StandardScaler_440": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_444": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_32": {
                "variable": {
                    "value": "infersent",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../data/InferSent-master/encoder/infersent.allnli.pickle",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "data/InferSent-master/data.py": {
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), 300))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/InferSent-master/encoder/evaluate_model.py": {
        "torch": {
            "load_66": {
                "variable": {
                    "value": "params_senteval.infersent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "params.modelpath",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/InferSent-master/encoder/models.py": {
        "torch": {
            "LSTM_31": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_52": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_241": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(output, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(-lengths)",
                            "Call"
                        ],
                        [
                            "self.prepare_samples(sentences, bsize, tokenize, verbose)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(-lengths)",
                            "Call"
                        ],
                        [
                            "self.prepare_samples(sentences, bsize, tokenize, verbose)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_54": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_67": {
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/InferSent-master/models.py": {
        "torch": {
            "LSTM_33": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_54": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_243": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(output, 0)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_274": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_294": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_296": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hn[0], hn[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_319": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_341": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LSTM_379": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_398": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GRU_423": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_443": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LSTM_469": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_476": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_478": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_479": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_495": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_512": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_527": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_527": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_545": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_552": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_554": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_555": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_571": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_586": {
                "variable": {
                    "value": "sent_key_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_key_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ],
                        [
                            "self.proj_key(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(bsize, -1, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(sent_key_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_596": {
                "variable": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas1 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_596": {
                "variable": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_603": {
                "variable": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas2 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_603": {
                "variable": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_609": {
                "variable": {
                    "value": "emb3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas3 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_609": {
                "variable": {
                    "value": "emb3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_615": {
                "variable": {
                    "value": "emb4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas4 * sent_output_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_615": {
                "variable": {
                    "value": "emb4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb1, emb2, emb3, emb4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_641": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_646": {
                "variable": {
                    "value": "self.proj_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_648": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_650": {
                "variable": {
                    "value": "self.proj_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_653": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_654": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_670": {
                "variable": {
                    "value": "sent_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "Variable(torch.FloatTensor(sent_len)).unsqueeze(1).cuda()",
                            "Call"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ],
                        [
                            "np.sort(sent_len)[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_688": {
                "variable": {
                    "value": "sent_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_693": {
                "variable": {
                    "value": "sent_M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_keys + sent_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_723": {
                "variable": {
                    "value": "self.convnet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(self.word_emb_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_728": {
                "variable": {
                    "value": "self.convnet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_733": {
                "variable": {
                    "value": "self.convnet3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_738": {
                "variable": {
                    "value": "self.convnet4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(2 * self.enc_lstm_dim, 2 * self.enc_lstm_dim, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_767": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u1, u2, u3, u4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_818": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, torch.abs(u - v), u * v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_848": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_356": {
                "variable": {
                    "value": "sent_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_357": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_357": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_796": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_807": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(-lengths)",
                            "Call"
                        ],
                        [
                            "self.prepare_samples(sentences, bsize, tokenize, verbose)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(-lengths)",
                            "Call"
                        ],
                        [
                            "self.prepare_samples(sentences, bsize, tokenize, verbose)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ],
                        [
                            "np.argsort(-sent_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_56": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_345": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_360": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_499": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_575": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_674": {
                "sequence": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_724": {
                "in_channels": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_726": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_729": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_731": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_734": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_736": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_739": {
                "in_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.enc_lstm_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_741": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_756": {
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_759": {
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_762": {
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_765": {
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, Variable(idx_sort))",
                            "Call"
                        ],
                        [
                            "sentences",
                            "variable"
                        ],
                        [
                            "sent.split() if not tokenize else word_tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[['<s>'] + [word for word in sent if word in self.word_vec] + ['</s>']]",
                            "List"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.index_select(1, Variable(torch.cuda.LongTensor(idx_sort)))",
                            "Call"
                        ],
                        [
                            "sent.transpose(0, 1).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.convnet1(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet2(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet3(sent)",
                            "Call"
                        ],
                        [
                            "self.convnet4(sent)",
                            "Call"
                        ],
                        [
                            "sent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_849": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_850": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_525": {
                "input": {
                    "value": "sent_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_525": {
                "input": {
                    "value": "sent_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.query_embedding(Variable(torch.LongTensor(bsize * [0]).cuda())).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_619": {
                "tensors": {
                    "value": "(alphas1.data[0, :, 0], alphas2.data[0, :, 0], torch.abs(alphas1.data[0, :, 0] - alphas2.data[0, :, 0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_702": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_702": {
                "input": {
                    "value": "sent_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_797": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_798": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_800": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_801": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_803": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_804": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_808": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_809": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_810": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_818": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_688": {
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_621": {
                "input": {
                    "value": "alphas1.data[0, :, 0] - alphas2.data[0, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_360": {
                "input": {
                    "value": "sent_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(idx_unsort))",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "self.proj_enc(sent_output.view(-1, 2 * self.enc_lstm_dim)).view(-1, bsize, 2 * self.enc_lstm_dim)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[1][0].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, self.init_lstm)[1].squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.enc_lstm(sent_packed, (self.init_lstm, self.init_lstm))[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, Variable(torch.cuda.LongTensor(idx_unsort)))",
                            "Call"
                        ],
                        [
                            "sent_output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/InferSent-master/mutils.py": {
        "torch": {}
    },
    "data/InferSent-master/train_nli.py": {
        "torch": {
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(params.n_classes).fill_(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_296": {
                "variable": {
                    "value": "nli_net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "params.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_303": {
                "obj": {
                    "value": "nli_net.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname + '.encoder')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "nli_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLINet(config_nli_model)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(params.outputdir, params.outputmodelname))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "deliverables/FINAL/code/extension_cnn_old.py": {
        "torch": {
            "L1Loss_245": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "float"
                        ]
                    ]
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ],
                        [
                            "10002",
                            "int"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Cin, Cout, (k, 2 * D)).double() for k in ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(ks) * Cout + 11",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(input).squeeze(3)) for conv in self.conv]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(z, z.size(2)).squeeze(2) for z in out]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(out).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([out, baseline_features], 1)",
                            "Call"
                        ],
                        [
                            "self.fc(out).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, baseline_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/cnn.mdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "conv(input).squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_48": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_288": {
                "ndarray": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[0], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_289": {
                "ndarray": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[1], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Cout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k, 2 * D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "ndarray": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[0], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[1], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[0], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "s1.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "np.array([item[0]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s1))",
                            "Call"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ],
                        [
                            "s1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_273": {
                "ndarray": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_indxs(sp[1], w2id)",
                            "Call"
                        ],
                        [
                            "next(gen)",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "s2.split()",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "np.array([item[1]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s2))",
                            "Call"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ],
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_287": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_270": {
                "ndarray": {
                    "value": "baseline_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_baseline_features(s1s, s2s)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "extract_baseline_features([s1s], [s2s])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(baseline_features)).float()",
                            "Call"
                        ],
                        [
                            "baseline_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * ovlp_cnt / (len(ss1) + len(ss2) + 0.0)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "np.array([item[2]])",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(score)).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}