{
    "tests/integrations/test_full_pipeline.py": {
        "sklearn": {
            "Pipeline_48": {
                "variable": {
                    "value": "pipe",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('relevant_augmenter', relevant_augmenter)]",
                    "possible_values": []
                }
            }
        }
    },
    "tests/units/transformers/test_per_column_imputer.py": {
        "sklearn": {}
    },
    "tests/units/transformers/test_relevant_feature_augmenter.py": {
        "sklearn": {
            "Pipeline_232": {
                "variable": {
                    "value": "pipeline",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('augmenter', augmenter), ('classifier', RandomForestClassifier(random_state=1))]",
                    "possible_values": []
                }
            },
            "cross_val_score_239": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "possible_values": [
                        [
                            "Pipeline([('augmenter', augmenter), ('classifier', RandomForestClassifier(random_state=1))])",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "possible_values": [
                        [
                            "pd.DataFrame(index=index)",
                            "Call"
                        ],
                        [
                            "pd.DataFrame()",
                            "Call"
                        ],
                        [
                            "pd.DataFrame()",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[10, 500])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[10, 500])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=np.unique(df.id))",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=[1])",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(index=np.unique(df.id))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "pd.Series(data=[0] * (n // 2) + [1] * (n // 2), index=index)",
                            "Call"
                        ],
                        [
                            "pd.Series(dtype='float64')",
                            "Call"
                        ],
                        [
                            "pd.Series({10: 1, 500: 0})",
                            "Call"
                        ],
                        [
                            "pd.Series({10: 1, 500: 0})",
                            "Call"
                        ],
                        [
                            "pd.Series([0, 1])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_235": {
                "random_state": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "tsfresh/transformers/feature_augmenter.py": {
        "sklearn": {
            "FeatureAugmenter_13": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "base_class_1": {
                    "value": "sklearn.base.TransformerMixin",
                    "possible_values": []
                },
                "self.default_fc_parameters": {
                    "value": "default_fc_parameters",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.kind_to_fc_parameters": {
                    "value": "kind_to_fc_parameters",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_id": {
                    "value": "column_id",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_sort": {
                    "value": "column_sort",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_kind": {
                    "value": "column_kind",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_value": {
                    "value": "column_value",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "tsfresh.defaults.N_PROCESSES",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.chunksize": {
                    "value": "chunksize",
                    "possible_values": [
                        [
                            "tsfresh.defaults.CHUNKSIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.show_warnings": {
                    "value": "show_warnings",
                    "possible_values": [
                        [
                            "tsfresh.defaults.SHOW_WARNINGS",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.disable_progressbar": {
                    "value": "disable_progressbar",
                    "possible_values": [
                        [
                            "tsfresh.defaults.DISABLE_PROGRESSBAR",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.impute_function": {
                    "value": "impute_function",
                    "possible_values": [
                        [
                            "tsfresh.defaults.IMPUTE_FUNCTION",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profile": {
                    "value": "profile",
                    "possible_values": [
                        [
                            "tsfresh.defaults.PROFILING",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profiling_filename": {
                    "value": "profiling_filename",
                    "possible_values": [
                        [
                            "tsfresh.defaults.PROFILING_FILENAME",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profiling_sorting": {
                    "value": "profiling_sorting",
                    "possible_values": [
                        [
                            "tsfresh.defaults.PROFILING_SORTING",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.timeseries_container": {
                    "value": "timeseries_container",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tsfresh/transformers/feature_selector.py": {
        "sklearn": {
            "FeatureSelector_12": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "base_class_1": {
                    "value": "sklearn.base.TransformerMixin",
                    "possible_values": []
                },
                "self.test_for_binary_target_binary_feature": {
                    "value": "test_for_binary_target_binary_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_BINARY_TARGET_BINARY_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_binary_target_real_feature": {
                    "value": "test_for_binary_target_real_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_BINARY_TARGET_REAL_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_real_target_binary_feature": {
                    "value": "test_for_real_target_binary_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_REAL_TARGET_BINARY_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_real_target_real_feature": {
                    "value": "test_for_real_target_real_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_REAL_TARGET_REAL_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fdr_level": {
                    "value": "fdr_level",
                    "possible_values": [
                        [
                            "defaults.FDR_LEVEL",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.hypotheses_independent": {
                    "value": "hypotheses_independent",
                    "possible_values": [
                        [
                            "defaults.HYPOTHESES_INDEPENDENT",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "defaults.N_PROCESSES",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.chunksize": {
                    "value": "chunksize",
                    "possible_values": [
                        [
                            "defaults.CHUNKSIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ml_task": {
                    "value": "ml_task",
                    "possible_values": [
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.multiclass": {
                    "value": "multiclass",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_significant": {
                    "value": "n_significant",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.multiclass_p_values": {
                    "value": "multiclass_p_values",
                    "possible_values": [
                        [
                            "'min'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tsfresh/transformers/per_column_imputer.py": {
        "sklearn": {
            "PerColumnImputer_15": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "base_class_1": {
                    "value": "sklearn.base.TransformerMixin",
                    "possible_values": []
                },
                "self.col_to_NINF_repl_preset": {
                    "value": "col_to_NINF_repl_preset",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.col_to_PINF_repl_preset": {
                    "value": "col_to_PINF_repl_preset",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.col_to_NAN_repl_preset": {
                    "value": "col_to_NAN_repl_preset",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tsfresh/transformers/relevant_feature_augmenter.py": {
        "sklearn": {
            "RelevantFeatureAugmenter_21": {
                "base_class_0": {
                    "value": "sklearn.base.BaseEstimator",
                    "possible_values": []
                },
                "base_class_1": {
                    "value": "sklearn.base.TransformerMixin",
                    "possible_values": []
                },
                "self.filter_only_tsfresh_features": {
                    "value": "filter_only_tsfresh_features",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.default_fc_parameters": {
                    "value": "default_fc_parameters",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.kind_to_fc_parameters": {
                    "value": "kind_to_fc_parameters",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_id": {
                    "value": "column_id",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_sort": {
                    "value": "column_sort",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_kind": {
                    "value": "column_kind",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.column_value": {
                    "value": "column_value",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.timeseries_container": {
                    "value": "timeseries_container",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.chunksize": {
                    "value": "chunksize",
                    "possible_values": [
                        [
                            "defaults.CHUNKSIZE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "defaults.N_PROCESSES",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.show_warnings": {
                    "value": "show_warnings",
                    "possible_values": [
                        [
                            "defaults.SHOW_WARNINGS",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.disable_progressbar": {
                    "value": "disable_progressbar",
                    "possible_values": [
                        [
                            "defaults.DISABLE_PROGRESSBAR",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profile": {
                    "value": "profile",
                    "possible_values": [
                        [
                            "defaults.PROFILING",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profiling_filename": {
                    "value": "profiling_filename",
                    "possible_values": [
                        [
                            "defaults.PROFILING_FILENAME",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.profiling_sorting": {
                    "value": "profiling_sorting",
                    "possible_values": [
                        [
                            "defaults.PROFILING_SORTING",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_binary_target_binary_feature": {
                    "value": "test_for_binary_target_binary_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_BINARY_TARGET_BINARY_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_binary_target_real_feature": {
                    "value": "test_for_binary_target_real_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_BINARY_TARGET_REAL_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_real_target_binary_feature": {
                    "value": "test_for_real_target_binary_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_REAL_TARGET_BINARY_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_for_real_target_real_feature": {
                    "value": "test_for_real_target_real_feature",
                    "possible_values": [
                        [
                            "defaults.TEST_FOR_REAL_TARGET_REAL_FEATURE",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fdr_level": {
                    "value": "fdr_level",
                    "possible_values": [
                        [
                            "defaults.FDR_LEVEL",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.hypotheses_independent": {
                    "value": "hypotheses_independent",
                    "possible_values": [
                        [
                            "defaults.HYPOTHESES_INDEPENDENT",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ml_task": {
                    "value": "ml_task",
                    "possible_values": [
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.multiclass": {
                    "value": "multiclass",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_significant": {
                    "value": "n_significant",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.multiclass_p_values": {
                    "value": "multiclass_p_values",
                    "possible_values": [
                        [
                            "'min'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}