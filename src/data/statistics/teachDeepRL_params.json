{
    "teachDRL/teachers/algos/alp_gmm.py": {
        "sklearn": {}
    },
    "teachDRL/teachers/algos/covar_gmm.py": {
        "sklearn": {}
    },
    "teachDRL/spinup/algos/ddpg/core.py": {
        "tensorflow": {
            "placeholder_6": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim) if dim else (None,)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_14": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(400",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(tf.concat([x, a], axis=-1), list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "q_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(tf.concat([x, pi], axis=-1), list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "q",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "q",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_33": {
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[x, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/ddpg/ddpg.py": {
        "tensorflow": {
            "stop_gradient_154": {
                "variable": {
                    "value": "backup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_ph + gamma * (1 - d_ph) * q_pi_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "q_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_161": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "pi_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_162": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "q_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_167": {
                "variable": {
                    "value": "target_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_171": {
                "variable": {
                    "value": "target_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_174": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_120": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "main",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "input_tensor": {
                    "value": "q_pi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_167": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_171": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/ppo/core.py": {
        "tensorflow": {
            "log_softmax_70": {
                "variable": {
                    "value": "logp_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(a, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "logp_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(pi, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_std",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-0.5 * np.ones(act_dim, dtype=np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_14": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "combined_shape(None, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(x, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "indices": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_73": {
                "indices": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.multinomial(logits, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "mu + tf.random_normal(tf.shape(mu)) * std",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_42": {
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/algos/ppo/ppo.py": {
        "tensorflow": {
            "exp_204": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp - logp_old_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_205": {
                "variable": {
                    "value": "min_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adv_ph > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 + clip_ratio) * adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(1 - clip_ratio) * adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "v_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(ret_ph - v) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_210": {
                "variable": {
                    "value": "approx_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logp_old_ph - logp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_211": {
                "variable": {
                    "value": "approx_ent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-logp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_or_212": {
                "variable": {
                    "value": "clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ratio > 1 + clip_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "ratio < 1 - clip_ratio",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "clipfrac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(clipped, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_219": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_172": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + 10000 * proc_id()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_206": {
                "input_tensor": {
                    "value": "tf.minimum(ratio * adv_ph, min_adv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "clipped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_or(ratio > 1 + clip_ratio, ratio < 1 - clip_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_206": {
                "x": {
                    "value": "ratio * adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "min_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(adv_ph > 0, (1 + clip_ratio) * adv_ph, (1 - clip_ratio) * adv_ph)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/algos/sac/core.py": {
        "tensorflow": {
            "cast_29": {
                "variable": {
                    "value": "clip_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x > u",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "clip_low",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x < l",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes), activation, activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_65": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes), activation, activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_68": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, act_dim, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "LOG_STD_MIN + 0.5 * (LOG_STD_MAX - LOG_STD_MIN) * (log_std + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_74": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, act_dim, activation=output_activation)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mu)",
                            "Call"
                        ],
                        [
                            "mu * action_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_75": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mu + tf.random_normal(tf.shape(mu)) * std",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(pi)",
                            "Call"
                        ],
                        [
                            "pi * action_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_7": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim) if dim else (None,)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_14": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_15": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(400",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "tf.log(clip_but_pass_gradient(1 - pi ** 2, l=0, u=1) + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_31": {
                "input": {
                    "value": "(u - x) * clip_up + (l - x) * clip_low",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_77": {
                "x": {
                    "value": "clip_but_pass_gradient(1 - pi ** 2, l=0, u=1) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "input": {
                    "value": "mlp(x, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "q1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "q1",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "q2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "q2",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_99": {
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "[x, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_103": {
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_105": {
                "values": {
                    "value": "[x, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "mu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, act_dim, activation=output_activation)",
                            "Call"
                        ],
                        [
                            "tf.tanh(mu)",
                            "Call"
                        ],
                        [
                            "mu * action_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_25": {
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(net, act_dim, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "LOG_STD_MIN + 0.5 * (LOG_STD_MAX - LOG_STD_MIN) * (log_std + 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/algos/sac/sac.py": {
        "tensorflow": {
            "minimum_183": {
                "variable": {
                    "value": "min_q_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q1_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "q2_pi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_186": {
                "variable": {
                    "value": "q_backup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_ph + gamma * (1 - d_ph) * v_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_187": {
                "variable": {
                    "value": "v_backup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_q_pi - alpha * logp_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "pi_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha * logp_pi - q1_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_198": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_203": {
                "variable": {
                    "value": "value_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_219": {
                "variable": {
                    "value": "target_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_222": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_224": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_137": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_211": {
                "variable": {
                    "value": "target_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "main",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "input_tensor": {
                    "value": "(q_backup - q1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "(q_backup - q2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "(v_backup - v) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_205": {
                "control_inputs": {
                    "value": "[train_pi_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_210": {
                "control_inputs": {
                    "value": "[train_value_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_219": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_211": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/td3/core.py": {
        "tensorflow": {
            "placeholder_6": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim) if dim else (None,)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_14": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(400",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(tf.concat([x, a], axis=-1), list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(tf.concat([x, a], axis=-1), list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "q1_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(tf.concat([x, pi], axis=-1), list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "q1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "q2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "q1",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_33": {
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[x, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/td3/td3.py": {
        "tensorflow": {
            "minimum_177": {
                "variable": {
                    "value": "min_q_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q1_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "q2_targ",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_178": {
                "variable": {
                    "value": "backup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_ph + gamma * (1 - d_ph) * min_q_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "q1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q1 - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "q2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q2 - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "pi_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_188": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "q_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_193": {
                "variable": {
                    "value": "target_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_197": {
                "variable": {
                    "value": "target_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_200": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_133": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_162": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "epsilon",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(pi_targ), stddev=target_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(epsilon, -noise_clip, noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "noise_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_164": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "a2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pi_targ + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(a2, -act_limit, act_limit)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-act_limit",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "act_limit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.action_space.high[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "main",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "input_tensor": {
                    "value": "q1_pi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_161": {
                "input": {
                    "value": "pi_targ",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_193": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_197": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/trpo/core.py": {
        "tensorflow": {
            "reduce_sum_59": {
                "variable": {
                    "value": "all_kls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ],
                        [
                            "0.5 * (((mu1 - mu0) ** 2 + var0) / (var1 + EPS) - 1) + log_std1 - log_std0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "variable": {
                    "value": "all_kls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(logp1) * (logp1 - logp0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "g.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=g.shape)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[flat_size(p) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "logp_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(a, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "logp_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(pi, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_std",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-0.5 * np.ones(act_dim, dtype=np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_130": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_20": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "combined_shape(None, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=g.shape)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_38": {
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=g.shape)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ],
                        [
                            "0.5 * (((mu1 - mu0) ** 2 + var0) / (var1 + EPS) - 1) + log_std1 - log_std0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "all_kls",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pre_sum, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.exp(logp1) * (logp1 - logp0), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "all_kls",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pre_sum, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.exp(logp1) * (logp1 - logp0), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_71": {
                "values": {
                    "value": "[tf.reshape(x, (-1,)) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_86": {
                "*inputs": {
                    "value": "[tf.assign(p, p_new) for (p, p_new) in zip(params, new_params)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(x, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_57": {
                "x": {
                    "value": "2 * log_std1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_74": {
                "xs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "p_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_113": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_67": {
                "x": {
                    "value": "logp1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=g.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "g * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_86": {
                "ref": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p_new",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "indices": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_115": {
                "indices": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.multinomial(logits, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "mu + tf.random_normal(tf.shape(mu)) * std",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_48": {
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/algos/trpo/trpo.py": {
        "tensorflow": {
            "exp_238": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logp - logp_old_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "v_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(ret_ph - v) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_256": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_205": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + 10000 * proc_id()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_239": {
                "input_tensor": {
                    "value": "ratio * adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/algos/vpg/core.py": {
        "tensorflow": {
            "log_softmax_70": {
                "variable": {
                    "value": "logp_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(a, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "logp_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(pi, depth=act_dim) * logp_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_std",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-0.5 * np.ones(act_dim, dtype=np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_14": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "combined_shape(None, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_32": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ],
                        [
                            "(64",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp(x, list(hidden_sizes) + [1], activation, None)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, None)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "indices": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_73": {
                "indices": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.multinomial(logits, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "mu + tf.random_normal(tf.shape(mu)) * std",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "act_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_space.n",
                            "Attribute"
                        ],
                        [
                            "a.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_42": {
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/algos/vpg/vpg.py": {
        "tensorflow": {
            "reduce_mean_191": {
                "variable": {
                    "value": "v_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(ret_ph - v) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "approx_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logp_old_ph - logp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "approx_ent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-logp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_201": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_158": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + 10000 * proc_id()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_190": {
                "input_tensor": {
                    "value": "logp * adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/examples/bench_ppo_cartpole.py": {
        "tensorflow": {}
    },
    "teachDRL/spinup/examples/pg_math/1_simple_pg.py": {
        "tensorflow": {
            "placeholder_26": {
                "variable": {
                    "value": "obs_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_30": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits=logits, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "weights_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "act_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "action_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(None,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_acts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.action_space.n",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_36": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_masks * tf.nn.log_softmax(logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_40": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InteractiveSession_42": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=size, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_10": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=size, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multinomial_30": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(obs_ph, sizes=hidden_sizes + [n_acts])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "weights_ph * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_36": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(obs_ph, sizes=hidden_sizes + [n_acts])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/examples/pg_math/2_rtg_pg.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "obs_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits=logits, num_samples=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "weights_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "act_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_42": {
                "variable": {
                    "value": "action_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(None,), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_acts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.action_space.n",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_masks * tf.nn.log_softmax(logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_47": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InteractiveSession_49": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=size, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_10": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=size, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multinomial_37": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(obs_ph, sizes=hidden_sizes + [n_acts])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "input_tensor": {
                    "value": "weights_ph * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_43": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(obs_ph, sizes=hidden_sizes + [n_acts])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/examples/train_mnist.py": {
        "tensorflow": {
            "load_data_22": {
                "variable": {
                    "value": "((x_train, y_train), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "x_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28 * 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "y_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_29": {
                "variable": {
                    "value": "predict",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x_ph, hidden_sizes=[hidden_size] * layers + [10], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None,))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_33": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(y_ph, 10)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x_ph, hidden_sizes=[hidden_size] * layers + [10], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(y_ph, predict), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_35": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_10": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_34": {
                "x": {
                    "value": "tf.equal(y_ph, predict)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_34": {
                "x": {
                    "value": "y_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=(None,))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/exercises/problem_set_1/exercise1_1.py": {
        "tensorflow": {
            "Session_41": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/exercises/problem_set_1/exercise1_2.py": {
        "tensorflow": {}
    },
    "teachDRL/spinup/exercises/problem_set_1/exercise1_3.py": {
        "tensorflow": {
            "AdamOptimizer_240": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "pi_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_241": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "q_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_246": {
                "variable": {
                    "value": "target_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_250": {
                "variable": {
                    "value": "target_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_253": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_148": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "main",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_246": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_250": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/exercises/problem_set_1_solutions/exercise1_1_soln.py": {
        "tensorflow": {
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_7": {
                "x": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/exercises/problem_set_1_solutions/exercise1_2_soln.py": {
        "tensorflow": {
            "get_variable_19": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_std",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-0.5 * np.ones(act_dim, dtype=np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_20": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_10": {
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, units=h, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(32",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-0.5 * (((x - mu) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp(x, list(hidden_sizes) + [act_dim], activation, output_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_13": {
                "x": {
                    "value": "log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='log_std', initializer=-0.5 * np.ones(act_dim, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/exercises/problem_set_2/exercise2_2.py": {
        "tensorflow": {}
    },
    "teachDRL/spinup/exercises/problem_set_2/exercise2_3.py": {
        "tensorflow": {
            "minimum_161": {
                "variable": {
                    "value": "min_q_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q1_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "q2_targ",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "backup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_ph + gamma * (1 - d_ph) * min_q_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "q1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q1 - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "q2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q2 - backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "pi_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "pi_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_172": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "q_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_177": {
                "variable": {
                    "value": "target_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, polyak * v_targ + (1 - polyak) * v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_181": {
                "variable": {
                    "value": "target_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.assign(v_targ, v_main) for (v_main, v_targ) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_184": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_116": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_145": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "epsilon",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(pi_targ), stddev=target_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(epsilon, -noise_clip, noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "noise_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "main",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_148": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "a2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pi_targ + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(a2, -act_limit, act_limit)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-act_limit",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "act_limit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.action_space.high[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_165": {
                "input_tensor": {
                    "value": "q1_pi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "pi_targ",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assign_177": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "polyak * v_targ + (1 - polyak) * v_main",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_181": {
                "ref": {
                    "value": "v_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_main",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "teachDRL/spinup/run.py": {
        "tensorflow": {}
    },
    "teachDRL/spinup/utils/logx.py": {
        "tensorflow": {
            "get_default_graph_66": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'simple_save' + ('%d' % itr if itr is not None else '')",
                            "BinOp"
                        ],
                        [
                            "osp.join(self.output_dir, fpath)",
                            "Call"
                        ]
                    ]
                }
            },
            "simple_save_227": {
                "export_dir": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'simple_save' + ('%d' % itr if itr is not None else '')",
                            "BinOp"
                        ],
                        [
                            "osp.join(self.output_dir, fpath)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "teachDRL/spinup/utils/mpi_tf.py": {
        "tensorflow": {
            "split_12": {
                "variable": {
                    "value": "splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[flat_size(p) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "py_func_21": {
                "variable": {
                    "value": "synced_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_broadcast",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[get_params]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_8": {
                "values": {
                    "value": "[tf.reshape(x, (-1,)) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_14": {
                "*inputs": {
                    "value": "[tf.assign(p, p_new) for (p, p_new) in zip(params, new_params)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "py_func_63": {
                "variable": {
                    "value": "avg_flat_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_collect_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[flat_grad]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_65": {
                "variable": {
                    "value": "avg_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg_flat_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.py_func(_collect_grads, [flat_grad], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[int(np.prod(s)) for s in shapes]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "tensor": {
                    "value": "p_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_78": {
                "*inputs": {
                    "value": "[opt, sync]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_8": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_14": {
                "ref": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p_new",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_76": {
                "control_inputs": {
                    "value": "[opt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}